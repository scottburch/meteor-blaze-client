//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var $, jQuery;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jquery/jquery.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * jQuery JavaScript Library v1.10.2                                                                                   // 2
 * http://jquery.com/                                                                                                  // 3
 *                                                                                                                     // 4
 * Includes Sizzle.js                                                                                                  // 5
 * http://sizzlejs.com/                                                                                                // 6
 *                                                                                                                     // 7
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors                                                 // 8
 * Released under the MIT license                                                                                      // 9
 * http://jquery.org/license                                                                                           // 10
 *                                                                                                                     // 11
 * Date: 2013-07-03T13:48Z                                                                                             // 12
 */                                                                                                                    // 13
(function( window, undefined ) {                                                                                       // 14
                                                                                                                       // 15
// Can't do this because several apps including ASP.NET trace                                                          // 16
// the stack via arguments.caller.callee and Firefox dies if                                                           // 17
// you try to trace through "use strict" call chains. (#13335)                                                         // 18
// Support: Firefox 18+                                                                                                // 19
//"use strict";                                                                                                        // 20
var                                                                                                                    // 21
	// The deferred used on DOM ready                                                                                     // 22
	readyList,                                                                                                            // 23
                                                                                                                       // 24
	// A central reference to the root jQuery(document)                                                                   // 25
	rootjQuery,                                                                                                           // 26
                                                                                                                       // 27
	// Support: IE<10                                                                                                     // 28
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`                                              // 29
	core_strundefined = typeof undefined,                                                                                 // 30
                                                                                                                       // 31
	// Use the correct document accordingly with window argument (sandbox)                                                // 32
	location = window.location,                                                                                           // 33
	document = window.document,                                                                                           // 34
	docElem = document.documentElement,                                                                                   // 35
                                                                                                                       // 36
	// Map over jQuery in case of overwrite                                                                               // 37
	_jQuery = window.jQuery,                                                                                              // 38
                                                                                                                       // 39
	// Map over the $ in case of overwrite                                                                                // 40
	_$ = window.$,                                                                                                        // 41
                                                                                                                       // 42
	// [[Class]] -> type pairs                                                                                            // 43
	class2type = {},                                                                                                      // 44
                                                                                                                       // 45
	// List of deleted data cache ids, so we can reuse them                                                               // 46
	core_deletedIds = [],                                                                                                 // 47
                                                                                                                       // 48
	core_version = "1.10.2",                                                                                              // 49
                                                                                                                       // 50
	// Save a reference to some core methods                                                                              // 51
	core_concat = core_deletedIds.concat,                                                                                 // 52
	core_push = core_deletedIds.push,                                                                                     // 53
	core_slice = core_deletedIds.slice,                                                                                   // 54
	core_indexOf = core_deletedIds.indexOf,                                                                               // 55
	core_toString = class2type.toString,                                                                                  // 56
	core_hasOwn = class2type.hasOwnProperty,                                                                              // 57
	core_trim = core_version.trim,                                                                                        // 58
                                                                                                                       // 59
	// Define a local copy of jQuery                                                                                      // 60
	jQuery = function( selector, context ) {                                                                              // 61
		// The jQuery object is actually just the init constructor 'enhanced'                                                // 62
		return new jQuery.fn.init( selector, context, rootjQuery );                                                          // 63
	},                                                                                                                    // 64
                                                                                                                       // 65
	// Used for matching numbers                                                                                          // 66
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,                                                             // 67
                                                                                                                       // 68
	// Used for splitting on whitespace                                                                                   // 69
	core_rnotwhite = /\S+/g,                                                                                              // 70
                                                                                                                       // 71
	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)                                          // 72
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,                                                                         // 73
                                                                                                                       // 74
	// A simple way to check for HTML strings                                                                             // 75
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)                                                   // 76
	// Strict HTML recognition (#11290: must start with <)                                                                // 77
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,                                                                   // 78
                                                                                                                       // 79
	// Match a standalone tag                                                                                             // 80
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,                                                                            // 81
                                                                                                                       // 82
	// JSON RegExp                                                                                                        // 83
	rvalidchars = /^[\],:{}\s]*$/,                                                                                        // 84
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,                                                                                // 85
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,                                                                  // 86
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,                                     // 87
                                                                                                                       // 88
	// Matches dashed string for camelizing                                                                               // 89
	rmsPrefix = /^-ms-/,                                                                                                  // 90
	rdashAlpha = /-([\da-z])/gi,                                                                                          // 91
                                                                                                                       // 92
	// Used by jQuery.camelCase as callback to replace()                                                                  // 93
	fcamelCase = function( all, letter ) {                                                                                // 94
		return letter.toUpperCase();                                                                                         // 95
	},                                                                                                                    // 96
                                                                                                                       // 97
	// The ready event handler                                                                                            // 98
	completed = function( event ) {                                                                                       // 99
                                                                                                                       // 100
		// readyState === "complete" is good enough for us to call the dom ready in oldIE                                    // 101
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {                    // 102
			detach();                                                                                                           // 103
			jQuery.ready();                                                                                                     // 104
		}                                                                                                                    // 105
	},                                                                                                                    // 106
	// Clean-up method for dom ready events                                                                               // 107
	detach = function() {                                                                                                 // 108
		if ( document.addEventListener ) {                                                                                   // 109
			document.removeEventListener( "DOMContentLoaded", completed, false );                                               // 110
			window.removeEventListener( "load", completed, false );                                                             // 111
                                                                                                                       // 112
		} else {                                                                                                             // 113
			document.detachEvent( "onreadystatechange", completed );                                                            // 114
			window.detachEvent( "onload", completed );                                                                          // 115
		}                                                                                                                    // 116
	};                                                                                                                    // 117
                                                                                                                       // 118
jQuery.fn = jQuery.prototype = {                                                                                       // 119
	// The current version of jQuery being used                                                                           // 120
	jquery: core_version,                                                                                                 // 121
                                                                                                                       // 122
	constructor: jQuery,                                                                                                  // 123
	init: function( selector, context, rootjQuery ) {                                                                     // 124
		var match, elem;                                                                                                     // 125
                                                                                                                       // 126
		// HANDLE: $(""), $(null), $(undefined), $(false)                                                                    // 127
		if ( !selector ) {                                                                                                   // 128
			return this;                                                                                                        // 129
		}                                                                                                                    // 130
                                                                                                                       // 131
		// Handle HTML strings                                                                                               // 132
		if ( typeof selector === "string" ) {                                                                                // 133
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {       // 134
				// Assume that strings that start and end with <> are HTML and skip the regex check                                // 135
				match = [ null, selector, null ];                                                                                  // 136
                                                                                                                       // 137
			} else {                                                                                                            // 138
				match = rquickExpr.exec( selector );                                                                               // 139
			}                                                                                                                   // 140
                                                                                                                       // 141
			// Match html or make sure no context is specified for #id                                                          // 142
			if ( match && (match[1] || !context) ) {                                                                            // 143
                                                                                                                       // 144
				// HANDLE: $(html) -> $(array)                                                                                     // 145
				if ( match[1] ) {                                                                                                  // 146
					context = context instanceof jQuery ? context[0] : context;                                                       // 147
                                                                                                                       // 148
					// scripts is true for back-compat                                                                                // 149
					jQuery.merge( this, jQuery.parseHTML(                                                                             // 150
						match[1],                                                                                                        // 151
						context && context.nodeType ? context.ownerDocument || context : document,                                       // 152
						true                                                                                                             // 153
					) );                                                                                                              // 154
                                                                                                                       // 155
					// HANDLE: $(html, props)                                                                                         // 156
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {                                           // 157
						for ( match in context ) {                                                                                       // 158
							// Properties of context are called as methods if possible                                                      // 159
							if ( jQuery.isFunction( this[ match ] ) ) {                                                                     // 160
								this[ match ]( context[ match ] );                                                                             // 161
                                                                                                                       // 162
							// ...and otherwise set as attributes                                                                           // 163
							} else {                                                                                                        // 164
								this.attr( match, context[ match ] );                                                                          // 165
							}                                                                                                               // 166
						}                                                                                                                // 167
					}                                                                                                                 // 168
                                                                                                                       // 169
					return this;                                                                                                      // 170
                                                                                                                       // 171
				// HANDLE: $(#id)                                                                                                  // 172
				} else {                                                                                                           // 173
					elem = document.getElementById( match[2] );                                                                       // 174
                                                                                                                       // 175
					// Check parentNode to catch when Blackberry 4.6 returns                                                          // 176
					// nodes that are no longer in the document #6963                                                                 // 177
					if ( elem && elem.parentNode ) {                                                                                  // 178
						// Handle the case where IE and Opera return items                                                               // 179
						// by name instead of ID                                                                                         // 180
						if ( elem.id !== match[2] ) {                                                                                    // 181
							return rootjQuery.find( selector );                                                                             // 182
						}                                                                                                                // 183
                                                                                                                       // 184
						// Otherwise, we inject the element directly into the jQuery object                                              // 185
						this.length = 1;                                                                                                 // 186
						this[0] = elem;                                                                                                  // 187
					}                                                                                                                 // 188
                                                                                                                       // 189
					this.context = document;                                                                                          // 190
					this.selector = selector;                                                                                         // 191
					return this;                                                                                                      // 192
				}                                                                                                                  // 193
                                                                                                                       // 194
			// HANDLE: $(expr, $(...))                                                                                          // 195
			} else if ( !context || context.jquery ) {                                                                          // 196
				return ( context || rootjQuery ).find( selector );                                                                 // 197
                                                                                                                       // 198
			// HANDLE: $(expr, context)                                                                                         // 199
			// (which is just equivalent to: $(context).find(expr)                                                              // 200
			} else {                                                                                                            // 201
				return this.constructor( context ).find( selector );                                                               // 202
			}                                                                                                                   // 203
                                                                                                                       // 204
		// HANDLE: $(DOMElement)                                                                                             // 205
		} else if ( selector.nodeType ) {                                                                                    // 206
			this.context = this[0] = selector;                                                                                  // 207
			this.length = 1;                                                                                                    // 208
			return this;                                                                                                        // 209
                                                                                                                       // 210
		// HANDLE: $(function)                                                                                               // 211
		// Shortcut for document ready                                                                                       // 212
		} else if ( jQuery.isFunction( selector ) ) {                                                                        // 213
			return rootjQuery.ready( selector );                                                                                // 214
		}                                                                                                                    // 215
                                                                                                                       // 216
		if ( selector.selector !== undefined ) {                                                                             // 217
			this.selector = selector.selector;                                                                                  // 218
			this.context = selector.context;                                                                                    // 219
		}                                                                                                                    // 220
                                                                                                                       // 221
		return jQuery.makeArray( selector, this );                                                                           // 222
	},                                                                                                                    // 223
                                                                                                                       // 224
	// Start with an empty selector                                                                                       // 225
	selector: "",                                                                                                         // 226
                                                                                                                       // 227
	// The default length of a jQuery object is 0                                                                         // 228
	length: 0,                                                                                                            // 229
                                                                                                                       // 230
	toArray: function() {                                                                                                 // 231
		return core_slice.call( this );                                                                                      // 232
	},                                                                                                                    // 233
                                                                                                                       // 234
	// Get the Nth element in the matched element set OR                                                                  // 235
	// Get the whole matched element set as a clean array                                                                 // 236
	get: function( num ) {                                                                                                // 237
		return num == null ?                                                                                                 // 238
                                                                                                                       // 239
			// Return a 'clean' array                                                                                           // 240
			this.toArray() :                                                                                                    // 241
                                                                                                                       // 242
			// Return just the object                                                                                           // 243
			( num < 0 ? this[ this.length + num ] : this[ num ] );                                                              // 244
	},                                                                                                                    // 245
                                                                                                                       // 246
	// Take an array of elements and push it onto the stack                                                               // 247
	// (returning the new matched element set)                                                                            // 248
	pushStack: function( elems ) {                                                                                        // 249
                                                                                                                       // 250
		// Build a new jQuery matched element set                                                                            // 251
		var ret = jQuery.merge( this.constructor(), elems );                                                                 // 252
                                                                                                                       // 253
		// Add the old object onto the stack (as a reference)                                                                // 254
		ret.prevObject = this;                                                                                               // 255
		ret.context = this.context;                                                                                          // 256
                                                                                                                       // 257
		// Return the newly-formed element set                                                                               // 258
		return ret;                                                                                                          // 259
	},                                                                                                                    // 260
                                                                                                                       // 261
	// Execute a callback for every element in the matched set.                                                           // 262
	// (You can seed the arguments with an array of args, but this is                                                     // 263
	// only used internally.)                                                                                             // 264
	each: function( callback, args ) {                                                                                    // 265
		return jQuery.each( this, callback, args );                                                                          // 266
	},                                                                                                                    // 267
                                                                                                                       // 268
	ready: function( fn ) {                                                                                               // 269
		// Add the callback                                                                                                  // 270
		jQuery.ready.promise().done( fn );                                                                                   // 271
                                                                                                                       // 272
		return this;                                                                                                         // 273
	},                                                                                                                    // 274
                                                                                                                       // 275
	slice: function() {                                                                                                   // 276
		return this.pushStack( core_slice.apply( this, arguments ) );                                                        // 277
	},                                                                                                                    // 278
                                                                                                                       // 279
	first: function() {                                                                                                   // 280
		return this.eq( 0 );                                                                                                 // 281
	},                                                                                                                    // 282
                                                                                                                       // 283
	last: function() {                                                                                                    // 284
		return this.eq( -1 );                                                                                                // 285
	},                                                                                                                    // 286
                                                                                                                       // 287
	eq: function( i ) {                                                                                                   // 288
		var len = this.length,                                                                                               // 289
			j = +i + ( i < 0 ? len : 0 );                                                                                       // 290
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );                                                       // 291
	},                                                                                                                    // 292
                                                                                                                       // 293
	map: function( callback ) {                                                                                           // 294
		return this.pushStack( jQuery.map(this, function( elem, i ) {                                                        // 295
			return callback.call( elem, i, elem );                                                                              // 296
		}));                                                                                                                 // 297
	},                                                                                                                    // 298
                                                                                                                       // 299
	end: function() {                                                                                                     // 300
		return this.prevObject || this.constructor(null);                                                                    // 301
	},                                                                                                                    // 302
                                                                                                                       // 303
	// For internal use only.                                                                                             // 304
	// Behaves like an Array's method, not like a jQuery method.                                                          // 305
	push: core_push,                                                                                                      // 306
	sort: [].sort,                                                                                                        // 307
	splice: [].splice                                                                                                     // 308
};                                                                                                                     // 309
                                                                                                                       // 310
// Give the init function the jQuery prototype for later instantiation                                                 // 311
jQuery.fn.init.prototype = jQuery.fn;                                                                                  // 312
                                                                                                                       // 313
jQuery.extend = jQuery.fn.extend = function() {                                                                        // 314
	var src, copyIsArray, copy, name, options, clone,                                                                     // 315
		target = arguments[0] || {},                                                                                         // 316
		i = 1,                                                                                                               // 317
		length = arguments.length,                                                                                           // 318
		deep = false;                                                                                                        // 319
                                                                                                                       // 320
	// Handle a deep copy situation                                                                                       // 321
	if ( typeof target === "boolean" ) {                                                                                  // 322
		deep = target;                                                                                                       // 323
		target = arguments[1] || {};                                                                                         // 324
		// skip the boolean and the target                                                                                   // 325
		i = 2;                                                                                                               // 326
	}                                                                                                                     // 327
                                                                                                                       // 328
	// Handle case when target is a string or something (possible in deep copy)                                           // 329
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {                                                     // 330
		target = {};                                                                                                         // 331
	}                                                                                                                     // 332
                                                                                                                       // 333
	// extend jQuery itself if only one argument is passed                                                                // 334
	if ( length === i ) {                                                                                                 // 335
		target = this;                                                                                                       // 336
		--i;                                                                                                                 // 337
	}                                                                                                                     // 338
                                                                                                                       // 339
	for ( ; i < length; i++ ) {                                                                                           // 340
		// Only deal with non-null/undefined values                                                                          // 341
		if ( (options = arguments[ i ]) != null ) {                                                                          // 342
			// Extend the base object                                                                                           // 343
			for ( name in options ) {                                                                                           // 344
				src = target[ name ];                                                                                              // 345
				copy = options[ name ];                                                                                            // 346
                                                                                                                       // 347
				// Prevent never-ending loop                                                                                       // 348
				if ( target === copy ) {                                                                                           // 349
					continue;                                                                                                         // 350
				}                                                                                                                  // 351
                                                                                                                       // 352
				// Recurse if we're merging plain objects or arrays                                                                // 353
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {                    // 354
					if ( copyIsArray ) {                                                                                              // 355
						copyIsArray = false;                                                                                             // 356
						clone = src && jQuery.isArray(src) ? src : [];                                                                   // 357
                                                                                                                       // 358
					} else {                                                                                                          // 359
						clone = src && jQuery.isPlainObject(src) ? src : {};                                                             // 360
					}                                                                                                                 // 361
                                                                                                                       // 362
					// Never move original objects, clone them                                                                        // 363
					target[ name ] = jQuery.extend( deep, clone, copy );                                                              // 364
                                                                                                                       // 365
				// Don't bring in undefined values                                                                                 // 366
				} else if ( copy !== undefined ) {                                                                                 // 367
					target[ name ] = copy;                                                                                            // 368
				}                                                                                                                  // 369
			}                                                                                                                   // 370
		}                                                                                                                    // 371
	}                                                                                                                     // 372
                                                                                                                       // 373
	// Return the modified object                                                                                         // 374
	return target;                                                                                                        // 375
};                                                                                                                     // 376
                                                                                                                       // 377
jQuery.extend({                                                                                                        // 378
	// Unique for each copy of jQuery on the page                                                                         // 379
	// Non-digits removed to match rinlinejQuery                                                                          // 380
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),                                            // 381
                                                                                                                       // 382
	noConflict: function( deep ) {                                                                                        // 383
		if ( window.$ === jQuery ) {                                                                                         // 384
			window.$ = _$;                                                                                                      // 385
		}                                                                                                                    // 386
                                                                                                                       // 387
		if ( deep && window.jQuery === jQuery ) {                                                                            // 388
			window.jQuery = _jQuery;                                                                                            // 389
		}                                                                                                                    // 390
                                                                                                                       // 391
		return jQuery;                                                                                                       // 392
	},                                                                                                                    // 393
                                                                                                                       // 394
	// Is the DOM ready to be used? Set to true once it occurs.                                                           // 395
	isReady: false,                                                                                                       // 396
                                                                                                                       // 397
	// A counter to track how many items to wait for before                                                               // 398
	// the ready event fires. See #6781                                                                                   // 399
	readyWait: 1,                                                                                                         // 400
                                                                                                                       // 401
	// Hold (or release) the ready event                                                                                  // 402
	holdReady: function( hold ) {                                                                                         // 403
		if ( hold ) {                                                                                                        // 404
			jQuery.readyWait++;                                                                                                 // 405
		} else {                                                                                                             // 406
			jQuery.ready( true );                                                                                               // 407
		}                                                                                                                    // 408
	},                                                                                                                    // 409
                                                                                                                       // 410
	// Handle when the DOM is ready                                                                                       // 411
	ready: function( wait ) {                                                                                             // 412
                                                                                                                       // 413
		// Abort if there are pending holds or we're already ready                                                           // 414
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {                                                         // 415
			return;                                                                                                             // 416
		}                                                                                                                    // 417
                                                                                                                       // 418
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).                             // 419
		if ( !document.body ) {                                                                                              // 420
			return setTimeout( jQuery.ready );                                                                                  // 421
		}                                                                                                                    // 422
                                                                                                                       // 423
		// Remember that the DOM is ready                                                                                    // 424
		jQuery.isReady = true;                                                                                               // 425
                                                                                                                       // 426
		// If a normal DOM Ready event fired, decrement, and wait if need be                                                 // 427
		if ( wait !== true && --jQuery.readyWait > 0 ) {                                                                     // 428
			return;                                                                                                             // 429
		}                                                                                                                    // 430
                                                                                                                       // 431
		// If there are functions bound, to execute                                                                          // 432
		readyList.resolveWith( document, [ jQuery ] );                                                                       // 433
                                                                                                                       // 434
		// Trigger any bound ready events                                                                                    // 435
		if ( jQuery.fn.trigger ) {                                                                                           // 436
			jQuery( document ).trigger("ready").off("ready");                                                                   // 437
		}                                                                                                                    // 438
	},                                                                                                                    // 439
                                                                                                                       // 440
	// See test/unit/core.js for details concerning isFunction.                                                           // 441
	// Since version 1.3, DOM methods and functions like alert                                                            // 442
	// aren't supported. They return false on IE (#2968).                                                                 // 443
	isFunction: function( obj ) {                                                                                         // 444
		return jQuery.type(obj) === "function";                                                                              // 445
	},                                                                                                                    // 446
                                                                                                                       // 447
	isArray: Array.isArray || function( obj ) {                                                                           // 448
		return jQuery.type(obj) === "array";                                                                                 // 449
	},                                                                                                                    // 450
                                                                                                                       // 451
	isWindow: function( obj ) {                                                                                           // 452
		/* jshint eqeqeq: false */                                                                                           // 453
		return obj != null && obj == obj.window;                                                                             // 454
	},                                                                                                                    // 455
                                                                                                                       // 456
	isNumeric: function( obj ) {                                                                                          // 457
		return !isNaN( parseFloat(obj) ) && isFinite( obj );                                                                 // 458
	},                                                                                                                    // 459
                                                                                                                       // 460
	type: function( obj ) {                                                                                               // 461
		if ( obj == null ) {                                                                                                 // 462
			return String( obj );                                                                                               // 463
		}                                                                                                                    // 464
		return typeof obj === "object" || typeof obj === "function" ?                                                        // 465
			class2type[ core_toString.call(obj) ] || "object" :                                                                 // 466
			typeof obj;                                                                                                         // 467
	},                                                                                                                    // 468
                                                                                                                       // 469
	isPlainObject: function( obj ) {                                                                                      // 470
		var key;                                                                                                             // 471
                                                                                                                       // 472
		// Must be an Object.                                                                                                // 473
		// Because of IE, we also have to check the presence of the constructor property.                                    // 474
		// Make sure that DOM nodes and window objects don't pass through, as well                                           // 475
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {                             // 476
			return false;                                                                                                       // 477
		}                                                                                                                    // 478
                                                                                                                       // 479
		try {                                                                                                                // 480
			// Not own constructor property must be Object                                                                      // 481
			if ( obj.constructor &&                                                                                             // 482
				!core_hasOwn.call(obj, "constructor") &&                                                                           // 483
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {                                                  // 484
				return false;                                                                                                      // 485
			}                                                                                                                   // 486
		} catch ( e ) {                                                                                                      // 487
			// IE8,9 Will throw exceptions on certain host objects #9897                                                        // 488
			return false;                                                                                                       // 489
		}                                                                                                                    // 490
                                                                                                                       // 491
		// Support: IE<9                                                                                                     // 492
		// Handle iteration over inherited properties before own properties.                                                 // 493
		if ( jQuery.support.ownLast ) {                                                                                      // 494
			for ( key in obj ) {                                                                                                // 495
				return core_hasOwn.call( obj, key );                                                                               // 496
			}                                                                                                                   // 497
		}                                                                                                                    // 498
                                                                                                                       // 499
		// Own properties are enumerated firstly, so to speed up,                                                            // 500
		// if last one is own, then all properties are own.                                                                  // 501
		for ( key in obj ) {}                                                                                                // 502
                                                                                                                       // 503
		return key === undefined || core_hasOwn.call( obj, key );                                                            // 504
	},                                                                                                                    // 505
                                                                                                                       // 506
	isEmptyObject: function( obj ) {                                                                                      // 507
		var name;                                                                                                            // 508
		for ( name in obj ) {                                                                                                // 509
			return false;                                                                                                       // 510
		}                                                                                                                    // 511
		return true;                                                                                                         // 512
	},                                                                                                                    // 513
                                                                                                                       // 514
	error: function( msg ) {                                                                                              // 515
		throw new Error( msg );                                                                                              // 516
	},                                                                                                                    // 517
                                                                                                                       // 518
	// data: string of html                                                                                               // 519
	// context (optional): If specified, the fragment will be created in this context, defaults to document               // 520
	// keepScripts (optional): If true, will include scripts passed in the html string                                    // 521
	parseHTML: function( data, context, keepScripts ) {                                                                   // 522
		if ( !data || typeof data !== "string" ) {                                                                           // 523
			return null;                                                                                                        // 524
		}                                                                                                                    // 525
		if ( typeof context === "boolean" ) {                                                                                // 526
			keepScripts = context;                                                                                              // 527
			context = false;                                                                                                    // 528
		}                                                                                                                    // 529
		context = context || document;                                                                                       // 530
                                                                                                                       // 531
		var parsed = rsingleTag.exec( data ),                                                                                // 532
			scripts = !keepScripts && [];                                                                                       // 533
                                                                                                                       // 534
		// Single tag                                                                                                        // 535
		if ( parsed ) {                                                                                                      // 536
			return [ context.createElement( parsed[1] ) ];                                                                      // 537
		}                                                                                                                    // 538
                                                                                                                       // 539
		parsed = jQuery.buildFragment( [ data ], context, scripts );                                                         // 540
		if ( scripts ) {                                                                                                     // 541
			jQuery( scripts ).remove();                                                                                         // 542
		}                                                                                                                    // 543
		return jQuery.merge( [], parsed.childNodes );                                                                        // 544
	},                                                                                                                    // 545
                                                                                                                       // 546
	parseJSON: function( data ) {                                                                                         // 547
		// Attempt to parse using the native JSON parser first                                                               // 548
		if ( window.JSON && window.JSON.parse ) {                                                                            // 549
			return window.JSON.parse( data );                                                                                   // 550
		}                                                                                                                    // 551
                                                                                                                       // 552
		if ( data === null ) {                                                                                               // 553
			return data;                                                                                                        // 554
		}                                                                                                                    // 555
                                                                                                                       // 556
		if ( typeof data === "string" ) {                                                                                    // 557
                                                                                                                       // 558
			// Make sure leading/trailing whitespace is removed (IE can't handle it)                                            // 559
			data = jQuery.trim( data );                                                                                         // 560
                                                                                                                       // 561
			if ( data ) {                                                                                                       // 562
				// Make sure the incoming data is actual JSON                                                                      // 563
				// Logic borrowed from http://json.org/json2.js                                                                    // 564
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )                                                           // 565
					.replace( rvalidtokens, "]" )                                                                                     // 566
					.replace( rvalidbraces, "")) ) {                                                                                  // 567
                                                                                                                       // 568
					return ( new Function( "return " + data ) )();                                                                    // 569
				}                                                                                                                  // 570
			}                                                                                                                   // 571
		}                                                                                                                    // 572
                                                                                                                       // 573
		jQuery.error( "Invalid JSON: " + data );                                                                             // 574
	},                                                                                                                    // 575
                                                                                                                       // 576
	// Cross-browser xml parsing                                                                                          // 577
	parseXML: function( data ) {                                                                                          // 578
		var xml, tmp;                                                                                                        // 579
		if ( !data || typeof data !== "string" ) {                                                                           // 580
			return null;                                                                                                        // 581
		}                                                                                                                    // 582
		try {                                                                                                                // 583
			if ( window.DOMParser ) { // Standard                                                                               // 584
				tmp = new DOMParser();                                                                                             // 585
				xml = tmp.parseFromString( data , "text/xml" );                                                                    // 586
			} else { // IE                                                                                                      // 587
				xml = new ActiveXObject( "Microsoft.XMLDOM" );                                                                     // 588
				xml.async = "false";                                                                                               // 589
				xml.loadXML( data );                                                                                               // 590
			}                                                                                                                   // 591
		} catch( e ) {                                                                                                       // 592
			xml = undefined;                                                                                                    // 593
		}                                                                                                                    // 594
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {                            // 595
			jQuery.error( "Invalid XML: " + data );                                                                             // 596
		}                                                                                                                    // 597
		return xml;                                                                                                          // 598
	},                                                                                                                    // 599
                                                                                                                       // 600
	noop: function() {},                                                                                                  // 601
                                                                                                                       // 602
	// Evaluates a script in a global context                                                                             // 603
	// Workarounds based on findings by Jim Driscoll                                                                      // 604
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context                            // 605
	globalEval: function( data ) {                                                                                        // 606
		if ( data && jQuery.trim( data ) ) {                                                                                 // 607
			// We use execScript on Internet Explorer                                                                           // 608
			// We use an anonymous function so that context is window                                                           // 609
			// rather than jQuery in Firefox                                                                                    // 610
			( window.execScript || function( data ) {                                                                           // 611
				window[ "eval" ].call( window, data );                                                                             // 612
			} )( data );                                                                                                        // 613
		}                                                                                                                    // 614
	},                                                                                                                    // 615
                                                                                                                       // 616
	// Convert dashed to camelCase; used by the css and data modules                                                      // 617
	// Microsoft forgot to hump their vendor prefix (#9572)                                                               // 618
	camelCase: function( string ) {                                                                                       // 619
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );                                         // 620
	},                                                                                                                    // 621
                                                                                                                       // 622
	nodeName: function( elem, name ) {                                                                                    // 623
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();                                          // 624
	},                                                                                                                    // 625
                                                                                                                       // 626
	// args is for internal usage only                                                                                    // 627
	each: function( obj, callback, args ) {                                                                               // 628
		var value,                                                                                                           // 629
			i = 0,                                                                                                              // 630
			length = obj.length,                                                                                                // 631
			isArray = isArraylike( obj );                                                                                       // 632
                                                                                                                       // 633
		if ( args ) {                                                                                                        // 634
			if ( isArray ) {                                                                                                    // 635
				for ( ; i < length; i++ ) {                                                                                        // 636
					value = callback.apply( obj[ i ], args );                                                                         // 637
                                                                                                                       // 638
					if ( value === false ) {                                                                                          // 639
						break;                                                                                                           // 640
					}                                                                                                                 // 641
				}                                                                                                                  // 642
			} else {                                                                                                            // 643
				for ( i in obj ) {                                                                                                 // 644
					value = callback.apply( obj[ i ], args );                                                                         // 645
                                                                                                                       // 646
					if ( value === false ) {                                                                                          // 647
						break;                                                                                                           // 648
					}                                                                                                                 // 649
				}                                                                                                                  // 650
			}                                                                                                                   // 651
                                                                                                                       // 652
		// A special, fast, case for the most common use of each                                                             // 653
		} else {                                                                                                             // 654
			if ( isArray ) {                                                                                                    // 655
				for ( ; i < length; i++ ) {                                                                                        // 656
					value = callback.call( obj[ i ], i, obj[ i ] );                                                                   // 657
                                                                                                                       // 658
					if ( value === false ) {                                                                                          // 659
						break;                                                                                                           // 660
					}                                                                                                                 // 661
				}                                                                                                                  // 662
			} else {                                                                                                            // 663
				for ( i in obj ) {                                                                                                 // 664
					value = callback.call( obj[ i ], i, obj[ i ] );                                                                   // 665
                                                                                                                       // 666
					if ( value === false ) {                                                                                          // 667
						break;                                                                                                           // 668
					}                                                                                                                 // 669
				}                                                                                                                  // 670
			}                                                                                                                   // 671
		}                                                                                                                    // 672
                                                                                                                       // 673
		return obj;                                                                                                          // 674
	},                                                                                                                    // 675
                                                                                                                       // 676
	// Use native String.trim function wherever possible                                                                  // 677
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?                                                                    // 678
		function( text ) {                                                                                                   // 679
			return text == null ?                                                                                               // 680
				"" :                                                                                                               // 681
				core_trim.call( text );                                                                                            // 682
		} :                                                                                                                  // 683
                                                                                                                       // 684
		// Otherwise use our own trimming functionality                                                                      // 685
		function( text ) {                                                                                                   // 686
			return text == null ?                                                                                               // 687
				"" :                                                                                                               // 688
				( text + "" ).replace( rtrim, "" );                                                                                // 689
		},                                                                                                                   // 690
                                                                                                                       // 691
	// results is for internal usage only                                                                                 // 692
	makeArray: function( arr, results ) {                                                                                 // 693
		var ret = results || [];                                                                                             // 694
                                                                                                                       // 695
		if ( arr != null ) {                                                                                                 // 696
			if ( isArraylike( Object(arr) ) ) {                                                                                 // 697
				jQuery.merge( ret,                                                                                                 // 698
					typeof arr === "string" ?                                                                                         // 699
					[ arr ] : arr                                                                                                     // 700
				);                                                                                                                 // 701
			} else {                                                                                                            // 702
				core_push.call( ret, arr );                                                                                        // 703
			}                                                                                                                   // 704
		}                                                                                                                    // 705
                                                                                                                       // 706
		return ret;                                                                                                          // 707
	},                                                                                                                    // 708
                                                                                                                       // 709
	inArray: function( elem, arr, i ) {                                                                                   // 710
		var len;                                                                                                             // 711
                                                                                                                       // 712
		if ( arr ) {                                                                                                         // 713
			if ( core_indexOf ) {                                                                                               // 714
				return core_indexOf.call( arr, elem, i );                                                                          // 715
			}                                                                                                                   // 716
                                                                                                                       // 717
			len = arr.length;                                                                                                   // 718
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;                                                                     // 719
                                                                                                                       // 720
			for ( ; i < len; i++ ) {                                                                                            // 721
				// Skip accessing in sparse arrays                                                                                 // 722
				if ( i in arr && arr[ i ] === elem ) {                                                                             // 723
					return i;                                                                                                         // 724
				}                                                                                                                  // 725
			}                                                                                                                   // 726
		}                                                                                                                    // 727
                                                                                                                       // 728
		return -1;                                                                                                           // 729
	},                                                                                                                    // 730
                                                                                                                       // 731
	merge: function( first, second ) {                                                                                    // 732
		var l = second.length,                                                                                               // 733
			i = first.length,                                                                                                   // 734
			j = 0;                                                                                                              // 735
                                                                                                                       // 736
		if ( typeof l === "number" ) {                                                                                       // 737
			for ( ; j < l; j++ ) {                                                                                              // 738
				first[ i++ ] = second[ j ];                                                                                        // 739
			}                                                                                                                   // 740
		} else {                                                                                                             // 741
			while ( second[j] !== undefined ) {                                                                                 // 742
				first[ i++ ] = second[ j++ ];                                                                                      // 743
			}                                                                                                                   // 744
		}                                                                                                                    // 745
                                                                                                                       // 746
		first.length = i;                                                                                                    // 747
                                                                                                                       // 748
		return first;                                                                                                        // 749
	},                                                                                                                    // 750
                                                                                                                       // 751
	grep: function( elems, callback, inv ) {                                                                              // 752
		var retVal,                                                                                                          // 753
			ret = [],                                                                                                           // 754
			i = 0,                                                                                                              // 755
			length = elems.length;                                                                                              // 756
		inv = !!inv;                                                                                                         // 757
                                                                                                                       // 758
		// Go through the array, only saving the items                                                                       // 759
		// that pass the validator function                                                                                  // 760
		for ( ; i < length; i++ ) {                                                                                          // 761
			retVal = !!callback( elems[ i ], i );                                                                               // 762
			if ( inv !== retVal ) {                                                                                             // 763
				ret.push( elems[ i ] );                                                                                            // 764
			}                                                                                                                   // 765
		}                                                                                                                    // 766
                                                                                                                       // 767
		return ret;                                                                                                          // 768
	},                                                                                                                    // 769
                                                                                                                       // 770
	// arg is for internal usage only                                                                                     // 771
	map: function( elems, callback, arg ) {                                                                               // 772
		var value,                                                                                                           // 773
			i = 0,                                                                                                              // 774
			length = elems.length,                                                                                              // 775
			isArray = isArraylike( elems ),                                                                                     // 776
			ret = [];                                                                                                           // 777
                                                                                                                       // 778
		// Go through the array, translating each of the items to their                                                      // 779
		if ( isArray ) {                                                                                                     // 780
			for ( ; i < length; i++ ) {                                                                                         // 781
				value = callback( elems[ i ], i, arg );                                                                            // 782
                                                                                                                       // 783
				if ( value != null ) {                                                                                             // 784
					ret[ ret.length ] = value;                                                                                        // 785
				}                                                                                                                  // 786
			}                                                                                                                   // 787
                                                                                                                       // 788
		// Go through every key on the object,                                                                               // 789
		} else {                                                                                                             // 790
			for ( i in elems ) {                                                                                                // 791
				value = callback( elems[ i ], i, arg );                                                                            // 792
                                                                                                                       // 793
				if ( value != null ) {                                                                                             // 794
					ret[ ret.length ] = value;                                                                                        // 795
				}                                                                                                                  // 796
			}                                                                                                                   // 797
		}                                                                                                                    // 798
                                                                                                                       // 799
		// Flatten any nested arrays                                                                                         // 800
		return core_concat.apply( [], ret );                                                                                 // 801
	},                                                                                                                    // 802
                                                                                                                       // 803
	// A global GUID counter for objects                                                                                  // 804
	guid: 1,                                                                                                              // 805
                                                                                                                       // 806
	// Bind a function to a context, optionally partially applying any                                                    // 807
	// arguments.                                                                                                         // 808
	proxy: function( fn, context ) {                                                                                      // 809
		var args, proxy, tmp;                                                                                                // 810
                                                                                                                       // 811
		if ( typeof context === "string" ) {                                                                                 // 812
			tmp = fn[ context ];                                                                                                // 813
			context = fn;                                                                                                       // 814
			fn = tmp;                                                                                                           // 815
		}                                                                                                                    // 816
                                                                                                                       // 817
		// Quick check to determine if target is callable, in the spec                                                       // 818
		// this throws a TypeError, but we will just return undefined.                                                       // 819
		if ( !jQuery.isFunction( fn ) ) {                                                                                    // 820
			return undefined;                                                                                                   // 821
		}                                                                                                                    // 822
                                                                                                                       // 823
		// Simulated bind                                                                                                    // 824
		args = core_slice.call( arguments, 2 );                                                                              // 825
		proxy = function() {                                                                                                 // 826
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );                                    // 827
		};                                                                                                                   // 828
                                                                                                                       // 829
		// Set the guid of unique handler to the same of original handler, so it can be removed                              // 830
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;                                                                     // 831
                                                                                                                       // 832
		return proxy;                                                                                                        // 833
	},                                                                                                                    // 834
                                                                                                                       // 835
	// Multifunctional method to get and set values of a collection                                                       // 836
	// The value/s can optionally be executed if it's a function                                                          // 837
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {                                                 // 838
		var i = 0,                                                                                                           // 839
			length = elems.length,                                                                                              // 840
			bulk = key == null;                                                                                                 // 841
                                                                                                                       // 842
		// Sets many values                                                                                                  // 843
		if ( jQuery.type( key ) === "object" ) {                                                                             // 844
			chainable = true;                                                                                                   // 845
			for ( i in key ) {                                                                                                  // 846
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );                                                        // 847
			}                                                                                                                   // 848
                                                                                                                       // 849
		// Sets one value                                                                                                    // 850
		} else if ( value !== undefined ) {                                                                                  // 851
			chainable = true;                                                                                                   // 852
                                                                                                                       // 853
			if ( !jQuery.isFunction( value ) ) {                                                                                // 854
				raw = true;                                                                                                        // 855
			}                                                                                                                   // 856
                                                                                                                       // 857
			if ( bulk ) {                                                                                                       // 858
				// Bulk operations run against the entire set                                                                      // 859
				if ( raw ) {                                                                                                       // 860
					fn.call( elems, value );                                                                                          // 861
					fn = null;                                                                                                        // 862
                                                                                                                       // 863
				// ...except when executing function values                                                                        // 864
				} else {                                                                                                           // 865
					bulk = fn;                                                                                                        // 866
					fn = function( elem, key, value ) {                                                                               // 867
						return bulk.call( jQuery( elem ), value );                                                                       // 868
					};                                                                                                                // 869
				}                                                                                                                  // 870
			}                                                                                                                   // 871
                                                                                                                       // 872
			if ( fn ) {                                                                                                         // 873
				for ( ; i < length; i++ ) {                                                                                        // 874
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );                                // 875
				}                                                                                                                  // 876
			}                                                                                                                   // 877
		}                                                                                                                    // 878
                                                                                                                       // 879
		return chainable ?                                                                                                   // 880
			elems :                                                                                                             // 881
                                                                                                                       // 882
			// Gets                                                                                                             // 883
			bulk ?                                                                                                              // 884
				fn.call( elems ) :                                                                                                 // 885
				length ? fn( elems[0], key ) : emptyGet;                                                                           // 886
	},                                                                                                                    // 887
                                                                                                                       // 888
	now: function() {                                                                                                     // 889
		return ( new Date() ).getTime();                                                                                     // 890
	},                                                                                                                    // 891
                                                                                                                       // 892
	// A method for quickly swapping in/out CSS properties to get correct calculations.                                   // 893
	// Note: this method belongs to the css module but it's needed here for the support module.                           // 894
	// If support gets modularized, this method should be moved back to the css module.                                   // 895
	swap: function( elem, options, callback, args ) {                                                                     // 896
		var ret, name,                                                                                                       // 897
			old = {};                                                                                                           // 898
                                                                                                                       // 899
		// Remember the old values, and insert the new ones                                                                  // 900
		for ( name in options ) {                                                                                            // 901
			old[ name ] = elem.style[ name ];                                                                                   // 902
			elem.style[ name ] = options[ name ];                                                                               // 903
		}                                                                                                                    // 904
                                                                                                                       // 905
		ret = callback.apply( elem, args || [] );                                                                            // 906
                                                                                                                       // 907
		// Revert the old values                                                                                             // 908
		for ( name in options ) {                                                                                            // 909
			elem.style[ name ] = old[ name ];                                                                                   // 910
		}                                                                                                                    // 911
                                                                                                                       // 912
		return ret;                                                                                                          // 913
	}                                                                                                                     // 914
});                                                                                                                    // 915
                                                                                                                       // 916
jQuery.ready.promise = function( obj ) {                                                                               // 917
	if ( !readyList ) {                                                                                                   // 918
                                                                                                                       // 919
		readyList = jQuery.Deferred();                                                                                       // 920
                                                                                                                       // 921
		// Catch cases where $(document).ready() is called after the browser event has already occurred.                     // 922
		// we once tried to use readyState "interactive" here, but it caused issues like the one                             // 923
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15                                         // 924
		if ( document.readyState === "complete" ) {                                                                          // 925
			// Handle it asynchronously to allow scripts the opportunity to delay ready                                         // 926
			setTimeout( jQuery.ready );                                                                                         // 927
                                                                                                                       // 928
		// Standards-based browsers support DOMContentLoaded                                                                 // 929
		} else if ( document.addEventListener ) {                                                                            // 930
			// Use the handy event callback                                                                                     // 931
			document.addEventListener( "DOMContentLoaded", completed, false );                                                  // 932
                                                                                                                       // 933
			// A fallback to window.onload, that will always work                                                               // 934
			window.addEventListener( "load", completed, false );                                                                // 935
                                                                                                                       // 936
		// If IE event model is used                                                                                         // 937
		} else {                                                                                                             // 938
			// Ensure firing before onload, maybe late but safe also for iframes                                                // 939
			document.attachEvent( "onreadystatechange", completed );                                                            // 940
                                                                                                                       // 941
			// A fallback to window.onload, that will always work                                                               // 942
			window.attachEvent( "onload", completed );                                                                          // 943
                                                                                                                       // 944
			// If IE and not a frame                                                                                            // 945
			// continually check to see if the document is ready                                                                // 946
			var top = false;                                                                                                    // 947
                                                                                                                       // 948
			try {                                                                                                               // 949
				top = window.frameElement == null && document.documentElement;                                                     // 950
			} catch(e) {}                                                                                                       // 951
                                                                                                                       // 952
			if ( top && top.doScroll ) {                                                                                        // 953
				(function doScrollCheck() {                                                                                        // 954
					if ( !jQuery.isReady ) {                                                                                          // 955
                                                                                                                       // 956
						try {                                                                                                            // 957
							// Use the trick by Diego Perini                                                                                // 958
							// http://javascript.nwbox.com/IEContentLoaded/                                                                 // 959
							top.doScroll("left");                                                                                           // 960
						} catch(e) {                                                                                                     // 961
							return setTimeout( doScrollCheck, 50 );                                                                         // 962
						}                                                                                                                // 963
                                                                                                                       // 964
						// detach all dom ready events                                                                                   // 965
						detach();                                                                                                        // 966
                                                                                                                       // 967
						// and execute any waiting functions                                                                             // 968
						jQuery.ready();                                                                                                  // 969
					}                                                                                                                 // 970
				})();                                                                                                              // 971
			}                                                                                                                   // 972
		}                                                                                                                    // 973
	}                                                                                                                     // 974
	return readyList.promise( obj );                                                                                      // 975
};                                                                                                                     // 976
                                                                                                                       // 977
// Populate the class2type map                                                                                         // 978
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {            // 979
	class2type[ "[object " + name + "]" ] = name.toLowerCase();                                                           // 980
});                                                                                                                    // 981
                                                                                                                       // 982
function isArraylike( obj ) {                                                                                          // 983
	var length = obj.length,                                                                                              // 984
		type = jQuery.type( obj );                                                                                           // 985
                                                                                                                       // 986
	if ( jQuery.isWindow( obj ) ) {                                                                                       // 987
		return false;                                                                                                        // 988
	}                                                                                                                     // 989
                                                                                                                       // 990
	if ( obj.nodeType === 1 && length ) {                                                                                 // 991
		return true;                                                                                                         // 992
	}                                                                                                                     // 993
                                                                                                                       // 994
	return type === "array" || type !== "function" &&                                                                     // 995
		( length === 0 ||                                                                                                    // 996
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );                                                 // 997
}                                                                                                                      // 998
                                                                                                                       // 999
// All jQuery objects should point back to these                                                                       // 1000
rootjQuery = jQuery(document);                                                                                         // 1001
/*!                                                                                                                    // 1002
 * Sizzle CSS Selector Engine v1.10.2                                                                                  // 1003
 * http://sizzlejs.com/                                                                                                // 1004
 *                                                                                                                     // 1005
 * Copyright 2013 jQuery Foundation, Inc. and other contributors                                                       // 1006
 * Released under the MIT license                                                                                      // 1007
 * http://jquery.org/license                                                                                           // 1008
 *                                                                                                                     // 1009
 * Date: 2013-07-03                                                                                                    // 1010
 */                                                                                                                    // 1011
(function( window, undefined ) {                                                                                       // 1012
                                                                                                                       // 1013
var i,                                                                                                                 // 1014
	support,                                                                                                              // 1015
	cachedruns,                                                                                                           // 1016
	Expr,                                                                                                                 // 1017
	getText,                                                                                                              // 1018
	isXML,                                                                                                                // 1019
	compile,                                                                                                              // 1020
	outermostContext,                                                                                                     // 1021
	sortInput,                                                                                                            // 1022
                                                                                                                       // 1023
	// Local document vars                                                                                                // 1024
	setDocument,                                                                                                          // 1025
	document,                                                                                                             // 1026
	docElem,                                                                                                              // 1027
	documentIsHTML,                                                                                                       // 1028
	rbuggyQSA,                                                                                                            // 1029
	rbuggyMatches,                                                                                                        // 1030
	matches,                                                                                                              // 1031
	contains,                                                                                                             // 1032
                                                                                                                       // 1033
	// Instance-specific data                                                                                             // 1034
	expando = "sizzle" + -(new Date()),                                                                                   // 1035
	preferredDoc = window.document,                                                                                       // 1036
	dirruns = 0,                                                                                                          // 1037
	done = 0,                                                                                                             // 1038
	classCache = createCache(),                                                                                           // 1039
	tokenCache = createCache(),                                                                                           // 1040
	compilerCache = createCache(),                                                                                        // 1041
	hasDuplicate = false,                                                                                                 // 1042
	sortOrder = function( a, b ) {                                                                                        // 1043
		if ( a === b ) {                                                                                                     // 1044
			hasDuplicate = true;                                                                                                // 1045
			return 0;                                                                                                           // 1046
		}                                                                                                                    // 1047
		return 0;                                                                                                            // 1048
	},                                                                                                                    // 1049
                                                                                                                       // 1050
	// General-purpose constants                                                                                          // 1051
	strundefined = typeof undefined,                                                                                      // 1052
	MAX_NEGATIVE = 1 << 31,                                                                                               // 1053
                                                                                                                       // 1054
	// Instance methods                                                                                                   // 1055
	hasOwn = ({}).hasOwnProperty,                                                                                         // 1056
	arr = [],                                                                                                             // 1057
	pop = arr.pop,                                                                                                        // 1058
	push_native = arr.push,                                                                                               // 1059
	push = arr.push,                                                                                                      // 1060
	slice = arr.slice,                                                                                                    // 1061
	// Use a stripped-down indexOf if we can't use a native one                                                           // 1062
	indexOf = arr.indexOf || function( elem ) {                                                                           // 1063
		var i = 0,                                                                                                           // 1064
			len = this.length;                                                                                                  // 1065
		for ( ; i < len; i++ ) {                                                                                             // 1066
			if ( this[i] === elem ) {                                                                                           // 1067
				return i;                                                                                                          // 1068
			}                                                                                                                   // 1069
		}                                                                                                                    // 1070
		return -1;                                                                                                           // 1071
	},                                                                                                                    // 1072
                                                                                                                       // 1073
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                                                                                                                       // 1075
	// Regular expressions                                                                                                // 1076
                                                                                                                       // 1077
	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace                                              // 1078
	whitespace = "[\\x20\\t\\r\\n\\f]",                                                                                   // 1079
	// http://www.w3.org/TR/css3-syntax/#characters                                                                       // 1080
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",                                                               // 1081
                                                                                                                       // 1082
	// Loosely modeled on CSS identifier characters                                                                       // 1083
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors              // 1084
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier                                        // 1085
	identifier = characterEncoding.replace( "w", "w#" ),                                                                  // 1086
                                                                                                                       // 1087
	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors                                           // 1088
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +                                       // 1089
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
                                                                                                                       // 1091
	// Prefer arguments quoted,                                                                                           // 1092
	//   then not containing pseudos/brackets,                                                                            // 1093
	//   then attribute selectors/non-parenthetical expressions,                                                          // 1094
	//   then anything else                                                                                               // 1095
	// These preferences are here to reduce the number of selectors                                                       // 1096
	//   needing tokenize in the PSEUDO preFilter                                                                         // 1097
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
                                                                                                                       // 1099
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter         // 1100
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),                      // 1101
                                                                                                                       // 1102
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),                                                    // 1103
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),                     // 1104
                                                                                                                       // 1105
	rsibling = new RegExp( whitespace + "*[+~]" ),                                                                        // 1106
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),                       // 1107
                                                                                                                       // 1108
	rpseudo = new RegExp( pseudos ),                                                                                      // 1109
	ridentifier = new RegExp( "^" + identifier + "$" ),                                                                   // 1110
                                                                                                                       // 1111
	matchExpr = {                                                                                                         // 1112
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),                                                                 // 1113
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),                                                            // 1114
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),                                            // 1115
		"ATTR": new RegExp( "^" + attributes ),                                                                              // 1116
		"PSEUDO": new RegExp( "^" + pseudos ),                                                                               // 1117
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +                         // 1118
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +                                          // 1119
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),                                                                        // 1120
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),                                                                 // 1121
		// For use in libraries implementing .is()                                                                           // 1122
		// We use this for POS matching in `select`                                                                          // 1123
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +                  // 1124
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )                                            // 1125
	},                                                                                                                    // 1126
                                                                                                                       // 1127
	rnative = /^[^{]+\{\s*\[native \w/,                                                                                   // 1128
                                                                                                                       // 1129
	// Easily-parseable/retrievable ID or TAG or CLASS selectors                                                          // 1130
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,                                                                      // 1131
                                                                                                                       // 1132
	rinputs = /^(?:input|select|textarea|button)$/i,                                                                      // 1133
	rheader = /^h\d$/i,                                                                                                   // 1134
                                                                                                                       // 1135
	rescape = /'|\\/g,                                                                                                    // 1136
                                                                                                                       // 1137
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters                                             // 1138
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),                      // 1139
	funescape = function( _, escaped, escapedWhitespace ) {                                                               // 1140
		var high = "0x" + escaped - 0x10000;                                                                                 // 1141
		// NaN means non-codepoint                                                                                           // 1142
		// Support: Firefox                                                                                                  // 1143
		// Workaround erroneous numeric interpretation of +"0x"                                                              // 1144
		return high !== high || escapedWhitespace ?                                                                          // 1145
			escaped :                                                                                                           // 1146
			// BMP codepoint                                                                                                    // 1147
			high < 0 ?                                                                                                          // 1148
				String.fromCharCode( high + 0x10000 ) :                                                                            // 1149
				// Supplemental Plane codepoint (surrogate pair)                                                                   // 1150
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );                                                 // 1151
	};                                                                                                                    // 1152
                                                                                                                       // 1153
// Optimize for push.apply( _, NodeList )                                                                              // 1154
try {                                                                                                                  // 1155
	push.apply(                                                                                                           // 1156
		(arr = slice.call( preferredDoc.childNodes )),                                                                       // 1157
		preferredDoc.childNodes                                                                                              // 1158
	);                                                                                                                    // 1159
	// Support: Android<4.0                                                                                               // 1160
	// Detect silently failing push.apply                                                                                 // 1161
	arr[ preferredDoc.childNodes.length ].nodeType;                                                                       // 1162
} catch ( e ) {                                                                                                        // 1163
	push = { apply: arr.length ?                                                                                          // 1164
                                                                                                                       // 1165
		// Leverage slice if possible                                                                                        // 1166
		function( target, els ) {                                                                                            // 1167
			push_native.apply( target, slice.call(els) );                                                                       // 1168
		} :                                                                                                                  // 1169
                                                                                                                       // 1170
		// Support: IE<9                                                                                                     // 1171
		// Otherwise append directly                                                                                         // 1172
		function( target, els ) {                                                                                            // 1173
			var j = target.length,                                                                                              // 1174
				i = 0;                                                                                                             // 1175
			// Can't trust NodeList.length                                                                                      // 1176
			while ( (target[j++] = els[i++]) ) {}                                                                               // 1177
			target.length = j - 1;                                                                                              // 1178
		}                                                                                                                    // 1179
	};                                                                                                                    // 1180
}                                                                                                                      // 1181
                                                                                                                       // 1182
function Sizzle( selector, context, results, seed ) {                                                                  // 1183
	var match, elem, m, nodeType,                                                                                         // 1184
		// QSA vars                                                                                                          // 1185
		i, groups, old, nid, newContext, newSelector;                                                                        // 1186
                                                                                                                       // 1187
	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {                                   // 1188
		setDocument( context );                                                                                              // 1189
	}                                                                                                                     // 1190
                                                                                                                       // 1191
	context = context || document;                                                                                        // 1192
	results = results || [];                                                                                              // 1193
                                                                                                                       // 1194
	if ( !selector || typeof selector !== "string" ) {                                                                    // 1195
		return results;                                                                                                      // 1196
	}                                                                                                                     // 1197
                                                                                                                       // 1198
	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {                                                        // 1199
		return [];                                                                                                           // 1200
	}                                                                                                                     // 1201
                                                                                                                       // 1202
	if ( documentIsHTML && !seed ) {                                                                                      // 1203
                                                                                                                       // 1204
		// Shortcuts                                                                                                         // 1205
		if ( (match = rquickExpr.exec( selector )) ) {                                                                       // 1206
			// Speed-up: Sizzle("#ID")                                                                                          // 1207
			if ( (m = match[1]) ) {                                                                                             // 1208
				if ( nodeType === 9 ) {                                                                                            // 1209
					elem = context.getElementById( m );                                                                               // 1210
					// Check parentNode to catch when Blackberry 4.6 returns                                                          // 1211
					// nodes that are no longer in the document #6963                                                                 // 1212
					if ( elem && elem.parentNode ) {                                                                                  // 1213
						// Handle the case where IE, Opera, and Webkit return items                                                      // 1214
						// by name instead of ID                                                                                         // 1215
						if ( elem.id === m ) {                                                                                           // 1216
							results.push( elem );                                                                                           // 1217
							return results;                                                                                                 // 1218
						}                                                                                                                // 1219
					} else {                                                                                                          // 1220
						return results;                                                                                                  // 1221
					}                                                                                                                 // 1222
				} else {                                                                                                           // 1223
					// Context is not a document                                                                                      // 1224
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&                               // 1225
						contains( context, elem ) && elem.id === m ) {                                                                   // 1226
						results.push( elem );                                                                                            // 1227
						return results;                                                                                                  // 1228
					}                                                                                                                 // 1229
				}                                                                                                                  // 1230
                                                                                                                       // 1231
			// Speed-up: Sizzle("TAG")                                                                                          // 1232
			} else if ( match[2] ) {                                                                                            // 1233
				push.apply( results, context.getElementsByTagName( selector ) );                                                   // 1234
				return results;                                                                                                    // 1235
                                                                                                                       // 1236
			// Speed-up: Sizzle(".CLASS")                                                                                       // 1237
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {                  // 1238
				push.apply( results, context.getElementsByClassName( m ) );                                                        // 1239
				return results;                                                                                                    // 1240
			}                                                                                                                   // 1241
		}                                                                                                                    // 1242
                                                                                                                       // 1243
		// QSA path                                                                                                          // 1244
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {                                                  // 1245
			nid = old = expando;                                                                                                // 1246
			newContext = context;                                                                                               // 1247
			newSelector = nodeType === 9 && selector;                                                                           // 1248
                                                                                                                       // 1249
			// qSA works strangely on Element-rooted queries                                                                    // 1250
			// We can work around this by specifying an extra ID on the root                                                    // 1251
			// and working up from there (Thanks to Andrew Dupont for the technique)                                            // 1252
			// IE 8 doesn't work on object elements                                                                             // 1253
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {                                              // 1254
				groups = tokenize( selector );                                                                                     // 1255
                                                                                                                       // 1256
				if ( (old = context.getAttribute("id")) ) {                                                                        // 1257
					nid = old.replace( rescape, "\\$&" );                                                                             // 1258
				} else {                                                                                                           // 1259
					context.setAttribute( "id", nid );                                                                                // 1260
				}                                                                                                                  // 1261
				nid = "[id='" + nid + "'] ";                                                                                       // 1262
                                                                                                                       // 1263
				i = groups.length;                                                                                                 // 1264
				while ( i-- ) {                                                                                                    // 1265
					groups[i] = nid + toSelector( groups[i] );                                                                        // 1266
				}                                                                                                                  // 1267
				newContext = rsibling.test( selector ) && context.parentNode || context;                                           // 1268
				newSelector = groups.join(",");                                                                                    // 1269
			}                                                                                                                   // 1270
                                                                                                                       // 1271
			if ( newSelector ) {                                                                                                // 1272
				try {                                                                                                              // 1273
					push.apply( results,                                                                                              // 1274
						newContext.querySelectorAll( newSelector )                                                                       // 1275
					);                                                                                                                // 1276
					return results;                                                                                                   // 1277
				} catch(qsaError) {                                                                                                // 1278
				} finally {                                                                                                        // 1279
					if ( !old ) {                                                                                                     // 1280
						context.removeAttribute("id");                                                                                   // 1281
					}                                                                                                                 // 1282
				}                                                                                                                  // 1283
			}                                                                                                                   // 1284
		}                                                                                                                    // 1285
	}                                                                                                                     // 1286
                                                                                                                       // 1287
	// All others                                                                                                         // 1288
	return select( selector.replace( rtrim, "$1" ), context, results, seed );                                             // 1289
}                                                                                                                      // 1290
                                                                                                                       // 1291
/**                                                                                                                    // 1292
 * Create key-value caches of limited size                                                                             // 1293
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with                         // 1294
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)                        // 1295
 *	deleting the oldest entry                                                                                           // 1296
 */                                                                                                                    // 1297
function createCache() {                                                                                               // 1298
	var keys = [];                                                                                                        // 1299
                                                                                                                       // 1300
	function cache( key, value ) {                                                                                        // 1301
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)                              // 1302
		if ( keys.push( key += " " ) > Expr.cacheLength ) {                                                                  // 1303
			// Only keep the most recent entries                                                                                // 1304
			delete cache[ keys.shift() ];                                                                                       // 1305
		}                                                                                                                    // 1306
		return (cache[ key ] = value);                                                                                       // 1307
	}                                                                                                                     // 1308
	return cache;                                                                                                         // 1309
}                                                                                                                      // 1310
                                                                                                                       // 1311
/**                                                                                                                    // 1312
 * Mark a function for special use by Sizzle                                                                           // 1313
 * @param {Function} fn The function to mark                                                                           // 1314
 */                                                                                                                    // 1315
function markFunction( fn ) {                                                                                          // 1316
	fn[ expando ] = true;                                                                                                 // 1317
	return fn;                                                                                                            // 1318
}                                                                                                                      // 1319
                                                                                                                       // 1320
/**                                                                                                                    // 1321
 * Support testing using an element                                                                                    // 1322
 * @param {Function} fn Passed the created div and expects a boolean result                                            // 1323
 */                                                                                                                    // 1324
function assert( fn ) {                                                                                                // 1325
	var div = document.createElement("div");                                                                              // 1326
                                                                                                                       // 1327
	try {                                                                                                                 // 1328
		return !!fn( div );                                                                                                  // 1329
	} catch (e) {                                                                                                         // 1330
		return false;                                                                                                        // 1331
	} finally {                                                                                                           // 1332
		// Remove from its parent by default                                                                                 // 1333
		if ( div.parentNode ) {                                                                                              // 1334
			div.parentNode.removeChild( div );                                                                                  // 1335
		}                                                                                                                    // 1336
		// release memory in IE                                                                                              // 1337
		div = null;                                                                                                          // 1338
	}                                                                                                                     // 1339
}                                                                                                                      // 1340
                                                                                                                       // 1341
/**                                                                                                                    // 1342
 * Adds the same handler for all of the specified attrs                                                                // 1343
 * @param {String} attrs Pipe-separated list of attributes                                                             // 1344
 * @param {Function} handler The method that will be applied                                                           // 1345
 */                                                                                                                    // 1346
function addHandle( attrs, handler ) {                                                                                 // 1347
	var arr = attrs.split("|"),                                                                                           // 1348
		i = attrs.length;                                                                                                    // 1349
                                                                                                                       // 1350
	while ( i-- ) {                                                                                                       // 1351
		Expr.attrHandle[ arr[i] ] = handler;                                                                                 // 1352
	}                                                                                                                     // 1353
}                                                                                                                      // 1354
                                                                                                                       // 1355
/**                                                                                                                    // 1356
 * Checks document order of two siblings                                                                               // 1357
 * @param {Element} a                                                                                                  // 1358
 * @param {Element} b                                                                                                  // 1359
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b                                // 1360
 */                                                                                                                    // 1361
function siblingCheck( a, b ) {                                                                                        // 1362
	var cur = b && a,                                                                                                     // 1363
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&                                                                // 1364
			( ~b.sourceIndex || MAX_NEGATIVE ) -                                                                                // 1365
			( ~a.sourceIndex || MAX_NEGATIVE );                                                                                 // 1366
                                                                                                                       // 1367
	// Use IE sourceIndex if available on both nodes                                                                      // 1368
	if ( diff ) {                                                                                                         // 1369
		return diff;                                                                                                         // 1370
	}                                                                                                                     // 1371
                                                                                                                       // 1372
	// Check if b follows a                                                                                               // 1373
	if ( cur ) {                                                                                                          // 1374
		while ( (cur = cur.nextSibling) ) {                                                                                  // 1375
			if ( cur === b ) {                                                                                                  // 1376
				return -1;                                                                                                         // 1377
			}                                                                                                                   // 1378
		}                                                                                                                    // 1379
	}                                                                                                                     // 1380
                                                                                                                       // 1381
	return a ? 1 : -1;                                                                                                    // 1382
}                                                                                                                      // 1383
                                                                                                                       // 1384
/**                                                                                                                    // 1385
 * Returns a function to use in pseudos for input types                                                                // 1386
 * @param {String} type                                                                                                // 1387
 */                                                                                                                    // 1388
function createInputPseudo( type ) {                                                                                   // 1389
	return function( elem ) {                                                                                             // 1390
		var name = elem.nodeName.toLowerCase();                                                                              // 1391
		return name === "input" && elem.type === type;                                                                       // 1392
	};                                                                                                                    // 1393
}                                                                                                                      // 1394
                                                                                                                       // 1395
/**                                                                                                                    // 1396
 * Returns a function to use in pseudos for buttons                                                                    // 1397
 * @param {String} type                                                                                                // 1398
 */                                                                                                                    // 1399
function createButtonPseudo( type ) {                                                                                  // 1400
	return function( elem ) {                                                                                             // 1401
		var name = elem.nodeName.toLowerCase();                                                                              // 1402
		return (name === "input" || name === "button") && elem.type === type;                                                // 1403
	};                                                                                                                    // 1404
}                                                                                                                      // 1405
                                                                                                                       // 1406
/**                                                                                                                    // 1407
 * Returns a function to use in pseudos for positionals                                                                // 1408
 * @param {Function} fn                                                                                                // 1409
 */                                                                                                                    // 1410
function createPositionalPseudo( fn ) {                                                                                // 1411
	return markFunction(function( argument ) {                                                                            // 1412
		argument = +argument;                                                                                                // 1413
		return markFunction(function( seed, matches ) {                                                                      // 1414
			var j,                                                                                                              // 1415
				matchIndexes = fn( [], seed.length, argument ),                                                                    // 1416
				i = matchIndexes.length;                                                                                           // 1417
                                                                                                                       // 1418
			// Match elements found at the specified indexes                                                                    // 1419
			while ( i-- ) {                                                                                                     // 1420
				if ( seed[ (j = matchIndexes[i]) ] ) {                                                                             // 1421
					seed[j] = !(matches[j] = seed[j]);                                                                                // 1422
				}                                                                                                                  // 1423
			}                                                                                                                   // 1424
		});                                                                                                                  // 1425
	});                                                                                                                   // 1426
}                                                                                                                      // 1427
                                                                                                                       // 1428
/**                                                                                                                    // 1429
 * Detect xml                                                                                                          // 1430
 * @param {Element|Object} elem An element or a document                                                               // 1431
 */                                                                                                                    // 1432
isXML = Sizzle.isXML = function( elem ) {                                                                              // 1433
	// documentElement is verified for cases where it doesn't yet exist                                                   // 1434
	// (such as loading iframes in IE - #4833)                                                                            // 1435
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;                                           // 1436
	return documentElement ? documentElement.nodeName !== "HTML" : false;                                                 // 1437
};                                                                                                                     // 1438
                                                                                                                       // 1439
// Expose support vars for convenience                                                                                 // 1440
support = Sizzle.support = {};                                                                                         // 1441
                                                                                                                       // 1442
/**                                                                                                                    // 1443
 * Sets document-related variables once based on the current document                                                  // 1444
 * @param {Element|Object} [doc] An element or document object to use to set the document                              // 1445
 * @returns {Object} Returns the current document                                                                      // 1446
 */                                                                                                                    // 1447
setDocument = Sizzle.setDocument = function( node ) {                                                                  // 1448
	var doc = node ? node.ownerDocument || node : preferredDoc,                                                           // 1449
		parent = doc.defaultView;                                                                                            // 1450
                                                                                                                       // 1451
	// If no document and documentElement is available, return                                                            // 1452
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {                                               // 1453
		return document;                                                                                                     // 1454
	}                                                                                                                     // 1455
                                                                                                                       // 1456
	// Set our document                                                                                                   // 1457
	document = doc;                                                                                                       // 1458
	docElem = doc.documentElement;                                                                                        // 1459
                                                                                                                       // 1460
	// Support tests                                                                                                      // 1461
	documentIsHTML = !isXML( doc );                                                                                       // 1462
                                                                                                                       // 1463
	// Support: IE>8                                                                                                      // 1464
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,                             // 1465
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936                      // 1466
	// IE6-8 do not support the defaultView property so parent will be undefined                                          // 1467
	if ( parent && parent.attachEvent && parent !== parent.top ) {                                                        // 1468
		parent.attachEvent( "onbeforeunload", function() {                                                                   // 1469
			setDocument();                                                                                                      // 1470
		});                                                                                                                  // 1471
	}                                                                                                                     // 1472
                                                                                                                       // 1473
	/* Attributes                                                                                                         // 1474
	---------------------------------------------------------------------- */                                             // 1475
                                                                                                                       // 1476
	// Support: IE<8                                                                                                      // 1477
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)                     // 1478
	support.attributes = assert(function( div ) {                                                                         // 1479
		div.className = "i";                                                                                                 // 1480
		return !div.getAttribute("className");                                                                               // 1481
	});                                                                                                                   // 1482
                                                                                                                       // 1483
	/* getElement(s)By*                                                                                                   // 1484
	---------------------------------------------------------------------- */                                             // 1485
                                                                                                                       // 1486
	// Check if getElementsByTagName("*") returns only elements                                                           // 1487
	support.getElementsByTagName = assert(function( div ) {                                                               // 1488
		div.appendChild( doc.createComment("") );                                                                            // 1489
		return !div.getElementsByTagName("*").length;                                                                        // 1490
	});                                                                                                                   // 1491
                                                                                                                       // 1492
	// Check if getElementsByClassName can be trusted                                                                     // 1493
	support.getElementsByClassName = assert(function( div ) {                                                             // 1494
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";                                                      // 1495
                                                                                                                       // 1496
		// Support: Safari<4                                                                                                 // 1497
		// Catch class over-caching                                                                                          // 1498
		div.firstChild.className = "i";                                                                                      // 1499
		// Support: Opera<10                                                                                                 // 1500
		// Catch gEBCN failure to find non-leading classes                                                                   // 1501
		return div.getElementsByClassName("i").length === 2;                                                                 // 1502
	});                                                                                                                   // 1503
                                                                                                                       // 1504
	// Support: IE<10                                                                                                     // 1505
	// Check if getElementById returns elements by name                                                                   // 1506
	// The broken getElementById methods don't pick up programatically-set names,                                         // 1507
	// so use a roundabout getElementsByName test                                                                         // 1508
	support.getById = assert(function( div ) {                                                                            // 1509
		docElem.appendChild( div ).id = expando;                                                                             // 1510
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;                                           // 1511
	});                                                                                                                   // 1512
                                                                                                                       // 1513
	// ID find and filter                                                                                                 // 1514
	if ( support.getById ) {                                                                                              // 1515
		Expr.find["ID"] = function( id, context ) {                                                                          // 1516
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {                                           // 1517
				var m = context.getElementById( id );                                                                              // 1518
				// Check parentNode to catch when Blackberry 4.6 returns                                                           // 1519
				// nodes that are no longer in the document #6963                                                                  // 1520
				return m && m.parentNode ? [m] : [];                                                                               // 1521
			}                                                                                                                   // 1522
		};                                                                                                                   // 1523
		Expr.filter["ID"] = function( id ) {                                                                                 // 1524
			var attrId = id.replace( runescape, funescape );                                                                    // 1525
			return function( elem ) {                                                                                           // 1526
				return elem.getAttribute("id") === attrId;                                                                         // 1527
			};                                                                                                                  // 1528
		};                                                                                                                   // 1529
	} else {                                                                                                              // 1530
		// Support: IE6/7                                                                                                    // 1531
		// getElementById is not reliable as a find shortcut                                                                 // 1532
		delete Expr.find["ID"];                                                                                              // 1533
                                                                                                                       // 1534
		Expr.filter["ID"] =  function( id ) {                                                                                // 1535
			var attrId = id.replace( runescape, funescape );                                                                    // 1536
			return function( elem ) {                                                                                           // 1537
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");                           // 1538
				return node && node.value === attrId;                                                                              // 1539
			};                                                                                                                  // 1540
		};                                                                                                                   // 1541
	}                                                                                                                     // 1542
                                                                                                                       // 1543
	// Tag                                                                                                                // 1544
	Expr.find["TAG"] = support.getElementsByTagName ?                                                                     // 1545
		function( tag, context ) {                                                                                           // 1546
			if ( typeof context.getElementsByTagName !== strundefined ) {                                                       // 1547
				return context.getElementsByTagName( tag );                                                                        // 1548
			}                                                                                                                   // 1549
		} :                                                                                                                  // 1550
		function( tag, context ) {                                                                                           // 1551
			var elem,                                                                                                           // 1552
				tmp = [],                                                                                                          // 1553
				i = 0,                                                                                                             // 1554
				results = context.getElementsByTagName( tag );                                                                     // 1555
                                                                                                                       // 1556
			// Filter out possible comments                                                                                     // 1557
			if ( tag === "*" ) {                                                                                                // 1558
				while ( (elem = results[i++]) ) {                                                                                  // 1559
					if ( elem.nodeType === 1 ) {                                                                                      // 1560
						tmp.push( elem );                                                                                                // 1561
					}                                                                                                                 // 1562
				}                                                                                                                  // 1563
                                                                                                                       // 1564
				return tmp;                                                                                                        // 1565
			}                                                                                                                   // 1566
			return results;                                                                                                     // 1567
		};                                                                                                                   // 1568
                                                                                                                       // 1569
	// Class                                                                                                              // 1570
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {                               // 1571
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {                                    // 1572
			return context.getElementsByClassName( className );                                                                 // 1573
		}                                                                                                                    // 1574
	};                                                                                                                    // 1575
                                                                                                                       // 1576
	/* QSA/matchesSelector                                                                                                // 1577
	---------------------------------------------------------------------- */                                             // 1578
                                                                                                                       // 1579
	// QSA and matchesSelector support                                                                                    // 1580
                                                                                                                       // 1581
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)                                                  // 1582
	rbuggyMatches = [];                                                                                                   // 1583
                                                                                                                       // 1584
	// qSa(:focus) reports false when true (Chrome 21)                                                                    // 1585
	// We allow this because of a bug in IE8/9 that throws an error                                                       // 1586
	// whenever `document.activeElement` is accessed on an iframe                                                         // 1587
	// So, we allow :focus to pass through QSA all the time to avoid the IE error                                         // 1588
	// See http://bugs.jquery.com/ticket/13378                                                                            // 1589
	rbuggyQSA = [];                                                                                                       // 1590
                                                                                                                       // 1591
	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {                                                         // 1592
		// Build QSA regex                                                                                                   // 1593
		// Regex strategy adopted from Diego Perini                                                                          // 1594
		assert(function( div ) {                                                                                             // 1595
			// Select is set to empty string on purpose                                                                         // 1596
			// This is to test IE's treatment of not explicitly                                                                 // 1597
			// setting a boolean content attribute,                                                                             // 1598
			// since its presence should be enough                                                                              // 1599
			// http://bugs.jquery.com/ticket/12359                                                                              // 1600
			div.innerHTML = "<select><option selected=''></option></select>";                                                   // 1601
                                                                                                                       // 1602
			// Support: IE8                                                                                                     // 1603
			// Boolean attributes and "value" are not treated correctly                                                         // 1604
			if ( !div.querySelectorAll("[selected]").length ) {                                                                 // 1605
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );                                              // 1606
			}                                                                                                                   // 1607
                                                                                                                       // 1608
			// Webkit/Opera - :checked should return selected option elements                                                   // 1609
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                   // 1610
			// IE8 throws error here and will not see later tests                                                               // 1611
			if ( !div.querySelectorAll(":checked").length ) {                                                                   // 1612
				rbuggyQSA.push(":checked");                                                                                        // 1613
			}                                                                                                                   // 1614
		});                                                                                                                  // 1615
                                                                                                                       // 1616
		assert(function( div ) {                                                                                             // 1617
                                                                                                                       // 1618
			// Support: Opera 10-12/IE8                                                                                         // 1619
			// ^= $= *= and empty values                                                                                        // 1620
			// Should not select anything                                                                                       // 1621
			// Support: Windows 8 Native Apps                                                                                   // 1622
			// The type attribute is restricted during .innerHTML assignment                                                    // 1623
			var input = doc.createElement("input");                                                                             // 1624
			input.setAttribute( "type", "hidden" );                                                                             // 1625
			div.appendChild( input ).setAttribute( "t", "" );                                                                   // 1626
                                                                                                                       // 1627
			if ( div.querySelectorAll("[t^='']").length ) {                                                                     // 1628
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );                                                          // 1629
			}                                                                                                                   // 1630
                                                                                                                       // 1631
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)                              // 1632
			// IE8 throws error here and will not see later tests                                                               // 1633
			if ( !div.querySelectorAll(":enabled").length ) {                                                                   // 1634
				rbuggyQSA.push( ":enabled", ":disabled" );                                                                         // 1635
			}                                                                                                                   // 1636
                                                                                                                       // 1637
			// Opera 10-11 does not throw on post-comma invalid pseudos                                                         // 1638
			div.querySelectorAll("*,:x");                                                                                       // 1639
			rbuggyQSA.push(",.*:");                                                                                             // 1640
		});                                                                                                                  // 1641
	}                                                                                                                     // 1642
                                                                                                                       // 1643
	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||                             // 1644
		docElem.mozMatchesSelector ||                                                                                        // 1645
		docElem.oMatchesSelector ||                                                                                          // 1646
		docElem.msMatchesSelector) )) ) {                                                                                    // 1647
                                                                                                                       // 1648
		assert(function( div ) {                                                                                             // 1649
			// Check to see if it's possible to do matchesSelector                                                              // 1650
			// on a disconnected node (IE 9)                                                                                    // 1651
			support.disconnectedMatch = matches.call( div, "div" );                                                             // 1652
                                                                                                                       // 1653
			// This should fail with an exception                                                                               // 1654
			// Gecko does not error, returns false instead                                                                      // 1655
			matches.call( div, "[s!='']:x" );                                                                                   // 1656
			rbuggyMatches.push( "!=", pseudos );                                                                                // 1657
		});                                                                                                                  // 1658
	}                                                                                                                     // 1659
                                                                                                                       // 1660
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );                                                    // 1661
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );                                        // 1662
                                                                                                                       // 1663
	/* Contains                                                                                                           // 1664
	---------------------------------------------------------------------- */                                             // 1665
                                                                                                                       // 1666
	// Element contains another                                                                                           // 1667
	// Purposefully does not implement inclusive descendent                                                               // 1668
	// As in, an element does not contain itself                                                                          // 1669
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?                                      // 1670
		function( a, b ) {                                                                                                   // 1671
			var adown = a.nodeType === 9 ? a.documentElement : a,                                                               // 1672
				bup = b && b.parentNode;                                                                                           // 1673
			return a === bup || !!( bup && bup.nodeType === 1 && (                                                              // 1674
				adown.contains ?                                                                                                   // 1675
					adown.contains( bup ) :                                                                                           // 1676
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16                                                // 1677
			));                                                                                                                 // 1678
		} :                                                                                                                  // 1679
		function( a, b ) {                                                                                                   // 1680
			if ( b ) {                                                                                                          // 1681
				while ( (b = b.parentNode) ) {                                                                                     // 1682
					if ( b === a ) {                                                                                                  // 1683
						return true;                                                                                                     // 1684
					}                                                                                                                 // 1685
				}                                                                                                                  // 1686
			}                                                                                                                   // 1687
			return false;                                                                                                       // 1688
		};                                                                                                                   // 1689
                                                                                                                       // 1690
	/* Sorting                                                                                                            // 1691
	---------------------------------------------------------------------- */                                             // 1692
                                                                                                                       // 1693
	// Document order sorting                                                                                             // 1694
	sortOrder = docElem.compareDocumentPosition ?                                                                         // 1695
	function( a, b ) {                                                                                                    // 1696
                                                                                                                       // 1697
		// Flag for duplicate removal                                                                                        // 1698
		if ( a === b ) {                                                                                                     // 1699
			hasDuplicate = true;                                                                                                // 1700
			return 0;                                                                                                           // 1701
		}                                                                                                                    // 1702
                                                                                                                       // 1703
		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );              // 1704
                                                                                                                       // 1705
		if ( compare ) {                                                                                                     // 1706
			// Disconnected nodes                                                                                               // 1707
			if ( compare & 1 ||                                                                                                 // 1708
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {                                          // 1709
                                                                                                                       // 1710
				// Choose the first element that is related to our preferred document                                              // 1711
				if ( a === doc || contains(preferredDoc, a) ) {                                                                    // 1712
					return -1;                                                                                                        // 1713
				}                                                                                                                  // 1714
				if ( b === doc || contains(preferredDoc, b) ) {                                                                    // 1715
					return 1;                                                                                                         // 1716
				}                                                                                                                  // 1717
                                                                                                                       // 1718
				// Maintain original order                                                                                         // 1719
				return sortInput ?                                                                                                 // 1720
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :                                                 // 1721
					0;                                                                                                                // 1722
			}                                                                                                                   // 1723
                                                                                                                       // 1724
			return compare & 4 ? -1 : 1;                                                                                        // 1725
		}                                                                                                                    // 1726
                                                                                                                       // 1727
		// Not directly comparable, sort on existence of method                                                              // 1728
		return a.compareDocumentPosition ? -1 : 1;                                                                           // 1729
	} :                                                                                                                   // 1730
	function( a, b ) {                                                                                                    // 1731
		var cur,                                                                                                             // 1732
			i = 0,                                                                                                              // 1733
			aup = a.parentNode,                                                                                                 // 1734
			bup = b.parentNode,                                                                                                 // 1735
			ap = [ a ],                                                                                                         // 1736
			bp = [ b ];                                                                                                         // 1737
                                                                                                                       // 1738
		// Exit early if the nodes are identical                                                                             // 1739
		if ( a === b ) {                                                                                                     // 1740
			hasDuplicate = true;                                                                                                // 1741
			return 0;                                                                                                           // 1742
                                                                                                                       // 1743
		// Parentless nodes are either documents or disconnected                                                             // 1744
		} else if ( !aup || !bup ) {                                                                                         // 1745
			return a === doc ? -1 :                                                                                             // 1746
				b === doc ? 1 :                                                                                                    // 1747
				aup ? -1 :                                                                                                         // 1748
				bup ? 1 :                                                                                                          // 1749
				sortInput ?                                                                                                        // 1750
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :                                                  // 1751
				0;                                                                                                                 // 1752
                                                                                                                       // 1753
		// If the nodes are siblings, we can do a quick check                                                                // 1754
		} else if ( aup === bup ) {                                                                                          // 1755
			return siblingCheck( a, b );                                                                                        // 1756
		}                                                                                                                    // 1757
                                                                                                                       // 1758
		// Otherwise we need full lists of their ancestors for comparison                                                    // 1759
		cur = a;                                                                                                             // 1760
		while ( (cur = cur.parentNode) ) {                                                                                   // 1761
			ap.unshift( cur );                                                                                                  // 1762
		}                                                                                                                    // 1763
		cur = b;                                                                                                             // 1764
		while ( (cur = cur.parentNode) ) {                                                                                   // 1765
			bp.unshift( cur );                                                                                                  // 1766
		}                                                                                                                    // 1767
                                                                                                                       // 1768
		// Walk down the tree looking for a discrepancy                                                                      // 1769
		while ( ap[i] === bp[i] ) {                                                                                          // 1770
			i++;                                                                                                                // 1771
		}                                                                                                                    // 1772
                                                                                                                       // 1773
		return i ?                                                                                                           // 1774
			// Do a sibling check if the nodes have a common ancestor                                                           // 1775
			siblingCheck( ap[i], bp[i] ) :                                                                                      // 1776
                                                                                                                       // 1777
			// Otherwise nodes in our document sort first                                                                       // 1778
			ap[i] === preferredDoc ? -1 :                                                                                       // 1779
			bp[i] === preferredDoc ? 1 :                                                                                        // 1780
			0;                                                                                                                  // 1781
	};                                                                                                                    // 1782
                                                                                                                       // 1783
	return doc;                                                                                                           // 1784
};                                                                                                                     // 1785
                                                                                                                       // 1786
Sizzle.matches = function( expr, elements ) {                                                                          // 1787
	return Sizzle( expr, null, null, elements );                                                                          // 1788
};                                                                                                                     // 1789
                                                                                                                       // 1790
Sizzle.matchesSelector = function( elem, expr ) {                                                                      // 1791
	// Set document vars if needed                                                                                        // 1792
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                                  // 1793
		setDocument( elem );                                                                                                 // 1794
	}                                                                                                                     // 1795
                                                                                                                       // 1796
	// Make sure that attribute selectors are quoted                                                                      // 1797
	expr = expr.replace( rattributeQuotes, "='$1']" );                                                                    // 1798
                                                                                                                       // 1799
	if ( support.matchesSelector && documentIsHTML &&                                                                     // 1800
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&                                                                 // 1801
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {                                                                    // 1802
                                                                                                                       // 1803
		try {                                                                                                                // 1804
			var ret = matches.call( elem, expr );                                                                               // 1805
                                                                                                                       // 1806
			// IE 9's matchesSelector returns false on disconnected nodes                                                       // 1807
			if ( ret || support.disconnectedMatch ||                                                                            // 1808
					// As well, disconnected nodes are said to be in a document                                                       // 1809
					// fragment in IE 9                                                                                               // 1810
					elem.document && elem.document.nodeType !== 11 ) {                                                                // 1811
				return ret;                                                                                                        // 1812
			}                                                                                                                   // 1813
		} catch(e) {}                                                                                                        // 1814
	}                                                                                                                     // 1815
                                                                                                                       // 1816
	return Sizzle( expr, document, null, [elem] ).length > 0;                                                             // 1817
};                                                                                                                     // 1818
                                                                                                                       // 1819
Sizzle.contains = function( context, elem ) {                                                                          // 1820
	// Set document vars if needed                                                                                        // 1821
	if ( ( context.ownerDocument || context ) !== document ) {                                                            // 1822
		setDocument( context );                                                                                              // 1823
	}                                                                                                                     // 1824
	return contains( context, elem );                                                                                     // 1825
};                                                                                                                     // 1826
                                                                                                                       // 1827
Sizzle.attr = function( elem, name ) {                                                                                 // 1828
	// Set document vars if needed                                                                                        // 1829
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                                  // 1830
		setDocument( elem );                                                                                                 // 1831
	}                                                                                                                     // 1832
                                                                                                                       // 1833
	var fn = Expr.attrHandle[ name.toLowerCase() ],                                                                       // 1834
		// Don't get fooled by Object.prototype properties (jQuery #13807)                                                   // 1835
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?                                                     // 1836
			fn( elem, name, !documentIsHTML ) :                                                                                 // 1837
			undefined;                                                                                                          // 1838
                                                                                                                       // 1839
	return val === undefined ?                                                                                            // 1840
		support.attributes || !documentIsHTML ?                                                                              // 1841
			elem.getAttribute( name ) :                                                                                         // 1842
			(val = elem.getAttributeNode(name)) && val.specified ?                                                              // 1843
				val.value :                                                                                                        // 1844
				null :                                                                                                             // 1845
		val;                                                                                                                 // 1846
};                                                                                                                     // 1847
                                                                                                                       // 1848
Sizzle.error = function( msg ) {                                                                                       // 1849
	throw new Error( "Syntax error, unrecognized expression: " + msg );                                                   // 1850
};                                                                                                                     // 1851
                                                                                                                       // 1852
/**                                                                                                                    // 1853
 * Document sorting and removing duplicates                                                                            // 1854
 * @param {ArrayLike} results                                                                                          // 1855
 */                                                                                                                    // 1856
Sizzle.uniqueSort = function( results ) {                                                                              // 1857
	var elem,                                                                                                             // 1858
		duplicates = [],                                                                                                     // 1859
		j = 0,                                                                                                               // 1860
		i = 0;                                                                                                               // 1861
                                                                                                                       // 1862
	// Unless we *know* we can detect duplicates, assume their presence                                                   // 1863
	hasDuplicate = !support.detectDuplicates;                                                                             // 1864
	sortInput = !support.sortStable && results.slice( 0 );                                                                // 1865
	results.sort( sortOrder );                                                                                            // 1866
                                                                                                                       // 1867
	if ( hasDuplicate ) {                                                                                                 // 1868
		while ( (elem = results[i++]) ) {                                                                                    // 1869
			if ( elem === results[ i ] ) {                                                                                      // 1870
				j = duplicates.push( i );                                                                                          // 1871
			}                                                                                                                   // 1872
		}                                                                                                                    // 1873
		while ( j-- ) {                                                                                                      // 1874
			results.splice( duplicates[ j ], 1 );                                                                               // 1875
		}                                                                                                                    // 1876
	}                                                                                                                     // 1877
                                                                                                                       // 1878
	return results;                                                                                                       // 1879
};                                                                                                                     // 1880
                                                                                                                       // 1881
/**                                                                                                                    // 1882
 * Utility function for retrieving the text value of an array of DOM nodes                                             // 1883
 * @param {Array|Element} elem                                                                                         // 1884
 */                                                                                                                    // 1885
getText = Sizzle.getText = function( elem ) {                                                                          // 1886
	var node,                                                                                                             // 1887
		ret = "",                                                                                                            // 1888
		i = 0,                                                                                                               // 1889
		nodeType = elem.nodeType;                                                                                            // 1890
                                                                                                                       // 1891
	if ( !nodeType ) {                                                                                                    // 1892
		// If no nodeType, this is expected to be an array                                                                   // 1893
		for ( ; (node = elem[i]); i++ ) {                                                                                    // 1894
			// Do not traverse comment nodes                                                                                    // 1895
			ret += getText( node );                                                                                             // 1896
		}                                                                                                                    // 1897
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {                                                   // 1898
		// Use textContent for elements                                                                                      // 1899
		// innerText usage removed for consistency of new lines (see #11153)                                                 // 1900
		if ( typeof elem.textContent === "string" ) {                                                                        // 1901
			return elem.textContent;                                                                                            // 1902
		} else {                                                                                                             // 1903
			// Traverse its children                                                                                            // 1904
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                     // 1905
				ret += getText( elem );                                                                                            // 1906
			}                                                                                                                   // 1907
		}                                                                                                                    // 1908
	} else if ( nodeType === 3 || nodeType === 4 ) {                                                                      // 1909
		return elem.nodeValue;                                                                                               // 1910
	}                                                                                                                     // 1911
	// Do not include comment or processing instruction nodes                                                             // 1912
                                                                                                                       // 1913
	return ret;                                                                                                           // 1914
};                                                                                                                     // 1915
                                                                                                                       // 1916
Expr = Sizzle.selectors = {                                                                                            // 1917
                                                                                                                       // 1918
	// Can be adjusted by the user                                                                                        // 1919
	cacheLength: 50,                                                                                                      // 1920
                                                                                                                       // 1921
	createPseudo: markFunction,                                                                                           // 1922
                                                                                                                       // 1923
	match: matchExpr,                                                                                                     // 1924
                                                                                                                       // 1925
	attrHandle: {},                                                                                                       // 1926
                                                                                                                       // 1927
	find: {},                                                                                                             // 1928
                                                                                                                       // 1929
	relative: {                                                                                                           // 1930
		">": { dir: "parentNode", first: true },                                                                             // 1931
		" ": { dir: "parentNode" },                                                                                          // 1932
		"+": { dir: "previousSibling", first: true },                                                                        // 1933
		"~": { dir: "previousSibling" }                                                                                      // 1934
	},                                                                                                                    // 1935
                                                                                                                       // 1936
	preFilter: {                                                                                                          // 1937
		"ATTR": function( match ) {                                                                                          // 1938
			match[1] = match[1].replace( runescape, funescape );                                                                // 1939
                                                                                                                       // 1940
			// Move the given value to match[3] whether quoted or unquoted                                                      // 1941
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );                                          // 1942
                                                                                                                       // 1943
			if ( match[2] === "~=" ) {                                                                                          // 1944
				match[3] = " " + match[3] + " ";                                                                                   // 1945
			}                                                                                                                   // 1946
                                                                                                                       // 1947
			return match.slice( 0, 4 );                                                                                         // 1948
		},                                                                                                                   // 1949
                                                                                                                       // 1950
		"CHILD": function( match ) {                                                                                         // 1951
			/* matches from matchExpr["CHILD"]                                                                                  // 1952
				1 type (only|nth|...)                                                                                              // 1953
				2 what (child|of-type)                                                                                             // 1954
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)                                                                       // 1955
				4 xn-component of xn+y argument ([+-]?\d*n|)                                                                       // 1956
				5 sign of xn-component                                                                                             // 1957
				6 x of xn-component                                                                                                // 1958
				7 sign of y-component                                                                                              // 1959
				8 y of y-component                                                                                                 // 1960
			*/                                                                                                                  // 1961
			match[1] = match[1].toLowerCase();                                                                                  // 1962
                                                                                                                       // 1963
			if ( match[1].slice( 0, 3 ) === "nth" ) {                                                                           // 1964
				// nth-* requires argument                                                                                         // 1965
				if ( !match[3] ) {                                                                                                 // 1966
					Sizzle.error( match[0] );                                                                                         // 1967
				}                                                                                                                  // 1968
                                                                                                                       // 1969
				// numeric x and y parameters for Expr.filter.CHILD                                                                // 1970
				// remember that false/true cast respectively to 0/1                                                               // 1971
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );         // 1972
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );                                                     // 1973
                                                                                                                       // 1974
			// other types prohibit arguments                                                                                   // 1975
			} else if ( match[3] ) {                                                                                            // 1976
				Sizzle.error( match[0] );                                                                                          // 1977
			}                                                                                                                   // 1978
                                                                                                                       // 1979
			return match;                                                                                                       // 1980
		},                                                                                                                   // 1981
                                                                                                                       // 1982
		"PSEUDO": function( match ) {                                                                                        // 1983
			var excess,                                                                                                         // 1984
				unquoted = !match[5] && match[2];                                                                                  // 1985
                                                                                                                       // 1986
			if ( matchExpr["CHILD"].test( match[0] ) ) {                                                                        // 1987
				return null;                                                                                                       // 1988
			}                                                                                                                   // 1989
                                                                                                                       // 1990
			// Accept quoted arguments as-is                                                                                    // 1991
			if ( match[3] && match[4] !== undefined ) {                                                                         // 1992
				match[2] = match[4];                                                                                               // 1993
                                                                                                                       // 1994
			// Strip excess characters from unquoted arguments                                                                  // 1995
			} else if ( unquoted && rpseudo.test( unquoted ) &&                                                                 // 1996
				// Get excess from tokenize (recursively)                                                                          // 1997
				(excess = tokenize( unquoted, true )) &&                                                                           // 1998
				// advance to the next closing parenthesis                                                                         // 1999
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {                                 // 2000
                                                                                                                       // 2001
				// excess is a negative index                                                                                      // 2002
				match[0] = match[0].slice( 0, excess );                                                                            // 2003
				match[2] = unquoted.slice( 0, excess );                                                                            // 2004
			}                                                                                                                   // 2005
                                                                                                                       // 2006
			// Return only captures needed by the pseudo filter method (type and argument)                                      // 2007
			return match.slice( 0, 3 );                                                                                         // 2008
		}                                                                                                                    // 2009
	},                                                                                                                    // 2010
                                                                                                                       // 2011
	filter: {                                                                                                             // 2012
                                                                                                                       // 2013
		"TAG": function( nodeNameSelector ) {                                                                                // 2014
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();                                      // 2015
			return nodeNameSelector === "*" ?                                                                                   // 2016
				function() { return true; } :                                                                                      // 2017
				function( elem ) {                                                                                                 // 2018
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;                                                 // 2019
				};                                                                                                                 // 2020
		},                                                                                                                   // 2021
                                                                                                                       // 2022
		"CLASS": function( className ) {                                                                                     // 2023
			var pattern = classCache[ className + " " ];                                                                        // 2024
                                                                                                                       // 2025
			return pattern ||                                                                                                   // 2026
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&                       // 2027
				classCache( className, function( elem ) {                                                                          // 2028
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});                                                                                                                // 2030
		},                                                                                                                   // 2031
                                                                                                                       // 2032
		"ATTR": function( name, operator, check ) {                                                                          // 2033
			return function( elem ) {                                                                                           // 2034
				var result = Sizzle.attr( elem, name );                                                                            // 2035
                                                                                                                       // 2036
				if ( result == null ) {                                                                                            // 2037
					return operator === "!=";                                                                                         // 2038
				}                                                                                                                  // 2039
				if ( !operator ) {                                                                                                 // 2040
					return true;                                                                                                      // 2041
				}                                                                                                                  // 2042
                                                                                                                       // 2043
				result += "";                                                                                                      // 2044
                                                                                                                       // 2045
				return operator === "=" ? result === check :                                                                       // 2046
					operator === "!=" ? result !== check :                                                                            // 2047
					operator === "^=" ? check && result.indexOf( check ) === 0 :                                                      // 2048
					operator === "*=" ? check && result.indexOf( check ) > -1 :                                                       // 2049
					operator === "$=" ? check && result.slice( -check.length ) === check :                                            // 2050
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :                                                // 2051
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :                     // 2052
					false;                                                                                                            // 2053
			};                                                                                                                  // 2054
		},                                                                                                                   // 2055
                                                                                                                       // 2056
		"CHILD": function( type, what, argument, first, last ) {                                                             // 2057
			var simple = type.slice( 0, 3 ) !== "nth",                                                                          // 2058
				forward = type.slice( -4 ) !== "last",                                                                             // 2059
				ofType = what === "of-type";                                                                                       // 2060
                                                                                                                       // 2061
			return first === 1 && last === 0 ?                                                                                  // 2062
                                                                                                                       // 2063
				// Shortcut for :nth-*(n)                                                                                          // 2064
				function( elem ) {                                                                                                 // 2065
					return !!elem.parentNode;                                                                                         // 2066
				} :                                                                                                                // 2067
                                                                                                                       // 2068
				function( elem, context, xml ) {                                                                                   // 2069
					var cache, outerCache, node, diff, nodeIndex, start,                                                              // 2070
						dir = simple !== forward ? "nextSibling" : "previousSibling",                                                    // 2071
						parent = elem.parentNode,                                                                                        // 2072
						name = ofType && elem.nodeName.toLowerCase(),                                                                    // 2073
						useCache = !xml && !ofType;                                                                                      // 2074
                                                                                                                       // 2075
					if ( parent ) {                                                                                                   // 2076
                                                                                                                       // 2077
						// :(first|last|only)-(child|of-type)                                                                            // 2078
						if ( simple ) {                                                                                                  // 2079
							while ( dir ) {                                                                                                 // 2080
								node = elem;                                                                                                   // 2081
								while ( (node = node[ dir ]) ) {                                                                               // 2082
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {                                  // 2083
										return false;                                                                                                // 2084
									}                                                                                                             // 2085
								}                                                                                                              // 2086
								// Reverse direction for :only-* (if we haven't yet done so)                                                   // 2087
								start = dir = type === "only" && !start && "nextSibling";                                                      // 2088
							}                                                                                                               // 2089
							return true;                                                                                                    // 2090
						}                                                                                                                // 2091
                                                                                                                       // 2092
						start = [ forward ? parent.firstChild : parent.lastChild ];                                                      // 2093
                                                                                                                       // 2094
						// non-xml :nth-child(...) stores cache data on `parent`                                                         // 2095
						if ( forward && useCache ) {                                                                                     // 2096
							// Seek `elem` from a previously-cached index                                                                   // 2097
							outerCache = parent[ expando ] || (parent[ expando ] = {});                                                     // 2098
							cache = outerCache[ type ] || [];                                                                               // 2099
							nodeIndex = cache[0] === dirruns && cache[1];                                                                   // 2100
							diff = cache[0] === dirruns && cache[2];                                                                        // 2101
							node = nodeIndex && parent.childNodes[ nodeIndex ];                                                             // 2102
                                                                                                                       // 2103
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                           // 2104
                                                                                                                       // 2105
								// Fallback to seeking `elem` from the start                                                                   // 2106
								(diff = nodeIndex = 0) || start.pop()) ) {                                                                     // 2107
                                                                                                                       // 2108
								// When found, cache indexes on `parent` and break                                                             // 2109
								if ( node.nodeType === 1 && ++diff && node === elem ) {                                                        // 2110
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];                                                            // 2111
									break;                                                                                                        // 2112
								}                                                                                                              // 2113
							}                                                                                                               // 2114
                                                                                                                       // 2115
						// Use previously-cached element index if available                                                              // 2116
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];                                                                                                // 2118
                                                                                                                       // 2119
						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)                                      // 2120
						} else {                                                                                                         // 2121
							// Use the same loop as above to seek `elem` from the start                                                     // 2122
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                           // 2123
								(diff = nodeIndex = 0) || start.pop()) ) {                                                                     // 2124
                                                                                                                       // 2125
								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {                     // 2126
									// Cache the index of each encountered element                                                                // 2127
									if ( useCache ) {                                                                                             // 2128
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];                                     // 2129
									}                                                                                                             // 2130
                                                                                                                       // 2131
									if ( node === elem ) {                                                                                        // 2132
										break;                                                                                                       // 2133
									}                                                                                                             // 2134
								}                                                                                                              // 2135
							}                                                                                                               // 2136
						}                                                                                                                // 2137
                                                                                                                       // 2138
						// Incorporate the offset, then check against cycle size                                                         // 2139
						diff -= last;                                                                                                    // 2140
						return diff === first || ( diff % first === 0 && diff / first >= 0 );                                            // 2141
					}                                                                                                                 // 2142
				};                                                                                                                 // 2143
		},                                                                                                                   // 2144
                                                                                                                       // 2145
		"PSEUDO": function( pseudo, argument ) {                                                                             // 2146
			// pseudo-class names are case-insensitive                                                                          // 2147
			// http://www.w3.org/TR/selectors/#pseudo-classes                                                                   // 2148
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters                           // 2149
			// Remember that setFilters inherits from pseudos                                                                   // 2150
			var args,                                                                                                           // 2151
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||                                          // 2152
					Sizzle.error( "unsupported pseudo: " + pseudo );                                                                  // 2153
                                                                                                                       // 2154
			// The user may use createPseudo to indicate that                                                                   // 2155
			// arguments are needed to create the filter function                                                               // 2156
			// just as Sizzle does                                                                                              // 2157
			if ( fn[ expando ] ) {                                                                                              // 2158
				return fn( argument );                                                                                             // 2159
			}                                                                                                                   // 2160
                                                                                                                       // 2161
			// But maintain support for old signatures                                                                          // 2162
			if ( fn.length > 1 ) {                                                                                              // 2163
				args = [ pseudo, pseudo, "", argument ];                                                                           // 2164
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?                                                    // 2165
					markFunction(function( seed, matches ) {                                                                          // 2166
						var idx,                                                                                                         // 2167
							matched = fn( seed, argument ),                                                                                 // 2168
							i = matched.length;                                                                                             // 2169
						while ( i-- ) {                                                                                                  // 2170
							idx = indexOf.call( seed, matched[i] );                                                                         // 2171
							seed[ idx ] = !( matches[ idx ] = matched[i] );                                                                 // 2172
						}                                                                                                                // 2173
					}) :                                                                                                              // 2174
					function( elem ) {                                                                                                // 2175
						return fn( elem, 0, args );                                                                                      // 2176
					};                                                                                                                // 2177
			}                                                                                                                   // 2178
                                                                                                                       // 2179
			return fn;                                                                                                          // 2180
		}                                                                                                                    // 2181
	},                                                                                                                    // 2182
                                                                                                                       // 2183
	pseudos: {                                                                                                            // 2184
		// Potentially complex pseudos                                                                                       // 2185
		"not": markFunction(function( selector ) {                                                                           // 2186
			// Trim the selector passed to compile                                                                              // 2187
			// to avoid treating leading and trailing                                                                           // 2188
			// spaces as combinators                                                                                            // 2189
			var input = [],                                                                                                     // 2190
				results = [],                                                                                                      // 2191
				matcher = compile( selector.replace( rtrim, "$1" ) );                                                              // 2192
                                                                                                                       // 2193
			return matcher[ expando ] ?                                                                                         // 2194
				markFunction(function( seed, matches, context, xml ) {                                                             // 2195
					var elem,                                                                                                         // 2196
						unmatched = matcher( seed, null, xml, [] ),                                                                      // 2197
						i = seed.length;                                                                                                 // 2198
                                                                                                                       // 2199
					// Match elements unmatched by `matcher`                                                                          // 2200
					while ( i-- ) {                                                                                                   // 2201
						if ( (elem = unmatched[i]) ) {                                                                                   // 2202
							seed[i] = !(matches[i] = elem);                                                                                 // 2203
						}                                                                                                                // 2204
					}                                                                                                                 // 2205
				}) :                                                                                                               // 2206
				function( elem, context, xml ) {                                                                                   // 2207
					input[0] = elem;                                                                                                  // 2208
					matcher( input, null, xml, results );                                                                             // 2209
					return !results.pop();                                                                                            // 2210
				};                                                                                                                 // 2211
		}),                                                                                                                  // 2212
                                                                                                                       // 2213
		"has": markFunction(function( selector ) {                                                                           // 2214
			return function( elem ) {                                                                                           // 2215
				return Sizzle( selector, elem ).length > 0;                                                                        // 2216
			};                                                                                                                  // 2217
		}),                                                                                                                  // 2218
                                                                                                                       // 2219
		"contains": markFunction(function( text ) {                                                                          // 2220
			return function( elem ) {                                                                                           // 2221
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;                             // 2222
			};                                                                                                                  // 2223
		}),                                                                                                                  // 2224
                                                                                                                       // 2225
		// "Whether an element is represented by a :lang() selector                                                          // 2226
		// is based solely on the element's language value                                                                   // 2227
		// being equal to the identifier C,                                                                                  // 2228
		// or beginning with the identifier C immediately followed by "-".                                                   // 2229
		// The matching of C against the element's language value is performed case-insensitively.                           // 2230
		// The identifier C does not have to be a valid language name."                                                      // 2231
		// http://www.w3.org/TR/selectors/#lang-pseudo                                                                       // 2232
		"lang": markFunction( function( lang ) {                                                                             // 2233
			// lang value must be a valid identifier                                                                            // 2234
			if ( !ridentifier.test(lang || "") ) {                                                                              // 2235
				Sizzle.error( "unsupported lang: " + lang );                                                                       // 2236
			}                                                                                                                   // 2237
			lang = lang.replace( runescape, funescape ).toLowerCase();                                                          // 2238
			return function( elem ) {                                                                                           // 2239
				var elemLang;                                                                                                      // 2240
				do {                                                                                                               // 2241
					if ( (elemLang = documentIsHTML ?                                                                                 // 2242
						elem.lang :                                                                                                      // 2243
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {                                                  // 2244
                                                                                                                       // 2245
						elemLang = elemLang.toLowerCase();                                                                               // 2246
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;                                                // 2247
					}                                                                                                                 // 2248
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );                                                       // 2249
				return false;                                                                                                      // 2250
			};                                                                                                                  // 2251
		}),                                                                                                                  // 2252
                                                                                                                       // 2253
		// Miscellaneous                                                                                                     // 2254
		"target": function( elem ) {                                                                                         // 2255
			var hash = window.location && window.location.hash;                                                                 // 2256
			return hash && hash.slice( 1 ) === elem.id;                                                                         // 2257
		},                                                                                                                   // 2258
                                                                                                                       // 2259
		"root": function( elem ) {                                                                                           // 2260
			return elem === docElem;                                                                                            // 2261
		},                                                                                                                   // 2262
                                                                                                                       // 2263
		"focus": function( elem ) {                                                                                          // 2264
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},                                                                                                                   // 2266
                                                                                                                       // 2267
		// Boolean properties                                                                                                // 2268
		"enabled": function( elem ) {                                                                                        // 2269
			return elem.disabled === false;                                                                                     // 2270
		},                                                                                                                   // 2271
                                                                                                                       // 2272
		"disabled": function( elem ) {                                                                                       // 2273
			return elem.disabled === true;                                                                                      // 2274
		},                                                                                                                   // 2275
                                                                                                                       // 2276
		"checked": function( elem ) {                                                                                        // 2277
			// In CSS3, :checked should return both checked and selected elements                                               // 2278
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                   // 2279
			var nodeName = elem.nodeName.toLowerCase();                                                                         // 2280
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);                      // 2281
		},                                                                                                                   // 2282
                                                                                                                       // 2283
		"selected": function( elem ) {                                                                                       // 2284
			// Accessing this property makes selected-by-default                                                                // 2285
			// options in Safari work properly                                                                                  // 2286
			if ( elem.parentNode ) {                                                                                            // 2287
				elem.parentNode.selectedIndex;                                                                                     // 2288
			}                                                                                                                   // 2289
                                                                                                                       // 2290
			return elem.selected === true;                                                                                      // 2291
		},                                                                                                                   // 2292
                                                                                                                       // 2293
		// Contents                                                                                                          // 2294
		"empty": function( elem ) {                                                                                          // 2295
			// http://www.w3.org/TR/selectors/#empty-pseudo                                                                     // 2296
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),                         // 2297
			//   not comment, processing instructions, or others                                                                // 2298
			// Thanks to Diego Perini for the nodeName shortcut                                                                 // 2299
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")                            // 2300
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                     // 2301
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {                                         // 2302
					return false;                                                                                                     // 2303
				}                                                                                                                  // 2304
			}                                                                                                                   // 2305
			return true;                                                                                                        // 2306
		},                                                                                                                   // 2307
                                                                                                                       // 2308
		"parent": function( elem ) {                                                                                         // 2309
			return !Expr.pseudos["empty"]( elem );                                                                              // 2310
		},                                                                                                                   // 2311
                                                                                                                       // 2312
		// Element/input types                                                                                               // 2313
		"header": function( elem ) {                                                                                         // 2314
			return rheader.test( elem.nodeName );                                                                               // 2315
		},                                                                                                                   // 2316
                                                                                                                       // 2317
		"input": function( elem ) {                                                                                          // 2318
			return rinputs.test( elem.nodeName );                                                                               // 2319
		},                                                                                                                   // 2320
                                                                                                                       // 2321
		"button": function( elem ) {                                                                                         // 2322
			var name = elem.nodeName.toLowerCase();                                                                             // 2323
			return name === "input" && elem.type === "button" || name === "button";                                             // 2324
		},                                                                                                                   // 2325
                                                                                                                       // 2326
		"text": function( elem ) {                                                                                           // 2327
			var attr;                                                                                                           // 2328
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)                                         // 2329
			// use getAttribute instead to test this case                                                                       // 2330
			return elem.nodeName.toLowerCase() === "input" &&                                                                   // 2331
				elem.type === "text" &&                                                                                            // 2332
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );                                // 2333
		},                                                                                                                   // 2334
                                                                                                                       // 2335
		// Position-in-collection                                                                                            // 2336
		"first": createPositionalPseudo(function() {                                                                         // 2337
			return [ 0 ];                                                                                                       // 2338
		}),                                                                                                                  // 2339
                                                                                                                       // 2340
		"last": createPositionalPseudo(function( matchIndexes, length ) {                                                    // 2341
			return [ length - 1 ];                                                                                              // 2342
		}),                                                                                                                  // 2343
                                                                                                                       // 2344
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {                                            // 2345
			return [ argument < 0 ? argument + length : argument ];                                                             // 2346
		}),                                                                                                                  // 2347
                                                                                                                       // 2348
		"even": createPositionalPseudo(function( matchIndexes, length ) {                                                    // 2349
			var i = 0;                                                                                                          // 2350
			for ( ; i < length; i += 2 ) {                                                                                      // 2351
				matchIndexes.push( i );                                                                                            // 2352
			}                                                                                                                   // 2353
			return matchIndexes;                                                                                                // 2354
		}),                                                                                                                  // 2355
                                                                                                                       // 2356
		"odd": createPositionalPseudo(function( matchIndexes, length ) {                                                     // 2357
			var i = 1;                                                                                                          // 2358
			for ( ; i < length; i += 2 ) {                                                                                      // 2359
				matchIndexes.push( i );                                                                                            // 2360
			}                                                                                                                   // 2361
			return matchIndexes;                                                                                                // 2362
		}),                                                                                                                  // 2363
                                                                                                                       // 2364
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                            // 2365
			var i = argument < 0 ? argument + length : argument;                                                                // 2366
			for ( ; --i >= 0; ) {                                                                                               // 2367
				matchIndexes.push( i );                                                                                            // 2368
			}                                                                                                                   // 2369
			return matchIndexes;                                                                                                // 2370
		}),                                                                                                                  // 2371
                                                                                                                       // 2372
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                            // 2373
			var i = argument < 0 ? argument + length : argument;                                                                // 2374
			for ( ; ++i < length; ) {                                                                                           // 2375
				matchIndexes.push( i );                                                                                            // 2376
			}                                                                                                                   // 2377
			return matchIndexes;                                                                                                // 2378
		})                                                                                                                   // 2379
	}                                                                                                                     // 2380
};                                                                                                                     // 2381
                                                                                                                       // 2382
Expr.pseudos["nth"] = Expr.pseudos["eq"];                                                                              // 2383
                                                                                                                       // 2384
// Add button/input type pseudos                                                                                       // 2385
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {                                // 2386
	Expr.pseudos[ i ] = createInputPseudo( i );                                                                           // 2387
}                                                                                                                      // 2388
for ( i in { submit: true, reset: true } ) {                                                                           // 2389
	Expr.pseudos[ i ] = createButtonPseudo( i );                                                                          // 2390
}                                                                                                                      // 2391
                                                                                                                       // 2392
// Easy API for creating new setFilters                                                                                // 2393
function setFilters() {}                                                                                               // 2394
setFilters.prototype = Expr.filters = Expr.pseudos;                                                                    // 2395
Expr.setFilters = new setFilters();                                                                                    // 2396
                                                                                                                       // 2397
function tokenize( selector, parseOnly ) {                                                                             // 2398
	var matched, match, tokens, type,                                                                                     // 2399
		soFar, groups, preFilters,                                                                                           // 2400
		cached = tokenCache[ selector + " " ];                                                                               // 2401
                                                                                                                       // 2402
	if ( cached ) {                                                                                                       // 2403
		return parseOnly ? 0 : cached.slice( 0 );                                                                            // 2404
	}                                                                                                                     // 2405
                                                                                                                       // 2406
	soFar = selector;                                                                                                     // 2407
	groups = [];                                                                                                          // 2408
	preFilters = Expr.preFilter;                                                                                          // 2409
                                                                                                                       // 2410
	while ( soFar ) {                                                                                                     // 2411
                                                                                                                       // 2412
		// Comma and first run                                                                                               // 2413
		if ( !matched || (match = rcomma.exec( soFar )) ) {                                                                  // 2414
			if ( match ) {                                                                                                      // 2415
				// Don't consume trailing commas as valid                                                                          // 2416
				soFar = soFar.slice( match[0].length ) || soFar;                                                                   // 2417
			}                                                                                                                   // 2418
			groups.push( tokens = [] );                                                                                         // 2419
		}                                                                                                                    // 2420
                                                                                                                       // 2421
		matched = false;                                                                                                     // 2422
                                                                                                                       // 2423
		// Combinators                                                                                                       // 2424
		if ( (match = rcombinators.exec( soFar )) ) {                                                                        // 2425
			matched = match.shift();                                                                                            // 2426
			tokens.push({                                                                                                       // 2427
				value: matched,                                                                                                    // 2428
				// Cast descendant combinators to space                                                                            // 2429
				type: match[0].replace( rtrim, " " )                                                                               // 2430
			});                                                                                                                 // 2431
			soFar = soFar.slice( matched.length );                                                                              // 2432
		}                                                                                                                    // 2433
                                                                                                                       // 2434
		// Filters                                                                                                           // 2435
		for ( type in Expr.filter ) {                                                                                        // 2436
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||                                           // 2437
				(match = preFilters[ type ]( match ))) ) {                                                                         // 2438
				matched = match.shift();                                                                                           // 2439
				tokens.push({                                                                                                      // 2440
					value: matched,                                                                                                   // 2441
					type: type,                                                                                                       // 2442
					matches: match                                                                                                    // 2443
				});                                                                                                                // 2444
				soFar = soFar.slice( matched.length );                                                                             // 2445
			}                                                                                                                   // 2446
		}                                                                                                                    // 2447
                                                                                                                       // 2448
		if ( !matched ) {                                                                                                    // 2449
			break;                                                                                                              // 2450
		}                                                                                                                    // 2451
	}                                                                                                                     // 2452
                                                                                                                       // 2453
	// Return the length of the invalid excess                                                                            // 2454
	// if we're just parsing                                                                                              // 2455
	// Otherwise, throw an error or return tokens                                                                         // 2456
	return parseOnly ?                                                                                                    // 2457
		soFar.length :                                                                                                       // 2458
		soFar ?                                                                                                              // 2459
			Sizzle.error( selector ) :                                                                                          // 2460
			// Cache the tokens                                                                                                 // 2461
			tokenCache( selector, groups ).slice( 0 );                                                                          // 2462
}                                                                                                                      // 2463
                                                                                                                       // 2464
function toSelector( tokens ) {                                                                                        // 2465
	var i = 0,                                                                                                            // 2466
		len = tokens.length,                                                                                                 // 2467
		selector = "";                                                                                                       // 2468
	for ( ; i < len; i++ ) {                                                                                              // 2469
		selector += tokens[i].value;                                                                                         // 2470
	}                                                                                                                     // 2471
	return selector;                                                                                                      // 2472
}                                                                                                                      // 2473
                                                                                                                       // 2474
function addCombinator( matcher, combinator, base ) {                                                                  // 2475
	var dir = combinator.dir,                                                                                             // 2476
		checkNonElements = base && dir === "parentNode",                                                                     // 2477
		doneName = done++;                                                                                                   // 2478
                                                                                                                       // 2479
	return combinator.first ?                                                                                             // 2480
		// Check against closest ancestor/preceding element                                                                  // 2481
		function( elem, context, xml ) {                                                                                     // 2482
			while ( (elem = elem[ dir ]) ) {                                                                                    // 2483
				if ( elem.nodeType === 1 || checkNonElements ) {                                                                   // 2484
					return matcher( elem, context, xml );                                                                             // 2485
				}                                                                                                                  // 2486
			}                                                                                                                   // 2487
		} :                                                                                                                  // 2488
                                                                                                                       // 2489
		// Check against all ancestor/preceding elements                                                                     // 2490
		function( elem, context, xml ) {                                                                                     // 2491
			var data, cache, outerCache,                                                                                        // 2492
				dirkey = dirruns + " " + doneName;                                                                                 // 2493
                                                                                                                       // 2494
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching                                 // 2495
			if ( xml ) {                                                                                                        // 2496
				while ( (elem = elem[ dir ]) ) {                                                                                   // 2497
					if ( elem.nodeType === 1 || checkNonElements ) {                                                                  // 2498
						if ( matcher( elem, context, xml ) ) {                                                                           // 2499
							return true;                                                                                                    // 2500
						}                                                                                                                // 2501
					}                                                                                                                 // 2502
				}                                                                                                                  // 2503
			} else {                                                                                                            // 2504
				while ( (elem = elem[ dir ]) ) {                                                                                   // 2505
					if ( elem.nodeType === 1 || checkNonElements ) {                                                                  // 2506
						outerCache = elem[ expando ] || (elem[ expando ] = {});                                                          // 2507
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {                                                      // 2508
							if ( (data = cache[1]) === true || data === cachedruns ) {                                                      // 2509
								return data === true;                                                                                          // 2510
							}                                                                                                               // 2511
						} else {                                                                                                         // 2512
							cache = outerCache[ dir ] = [ dirkey ];                                                                         // 2513
							cache[1] = matcher( elem, context, xml ) || cachedruns;                                                         // 2514
							if ( cache[1] === true ) {                                                                                      // 2515
								return true;                                                                                                   // 2516
							}                                                                                                               // 2517
						}                                                                                                                // 2518
					}                                                                                                                 // 2519
				}                                                                                                                  // 2520
			}                                                                                                                   // 2521
		};                                                                                                                   // 2522
}                                                                                                                      // 2523
                                                                                                                       // 2524
function elementMatcher( matchers ) {                                                                                  // 2525
	return matchers.length > 1 ?                                                                                          // 2526
		function( elem, context, xml ) {                                                                                     // 2527
			var i = matchers.length;                                                                                            // 2528
			while ( i-- ) {                                                                                                     // 2529
				if ( !matchers[i]( elem, context, xml ) ) {                                                                        // 2530
					return false;                                                                                                     // 2531
				}                                                                                                                  // 2532
			}                                                                                                                   // 2533
			return true;                                                                                                        // 2534
		} :                                                                                                                  // 2535
		matchers[0];                                                                                                         // 2536
}                                                                                                                      // 2537
                                                                                                                       // 2538
function condense( unmatched, map, filter, context, xml ) {                                                            // 2539
	var elem,                                                                                                             // 2540
		newUnmatched = [],                                                                                                   // 2541
		i = 0,                                                                                                               // 2542
		len = unmatched.length,                                                                                              // 2543
		mapped = map != null;                                                                                                // 2544
                                                                                                                       // 2545
	for ( ; i < len; i++ ) {                                                                                              // 2546
		if ( (elem = unmatched[i]) ) {                                                                                       // 2547
			if ( !filter || filter( elem, context, xml ) ) {                                                                    // 2548
				newUnmatched.push( elem );                                                                                         // 2549
				if ( mapped ) {                                                                                                    // 2550
					map.push( i );                                                                                                    // 2551
				}                                                                                                                  // 2552
			}                                                                                                                   // 2553
		}                                                                                                                    // 2554
	}                                                                                                                     // 2555
                                                                                                                       // 2556
	return newUnmatched;                                                                                                  // 2557
}                                                                                                                      // 2558
                                                                                                                       // 2559
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {                            // 2560
	if ( postFilter && !postFilter[ expando ] ) {                                                                         // 2561
		postFilter = setMatcher( postFilter );                                                                               // 2562
	}                                                                                                                     // 2563
	if ( postFinder && !postFinder[ expando ] ) {                                                                         // 2564
		postFinder = setMatcher( postFinder, postSelector );                                                                 // 2565
	}                                                                                                                     // 2566
	return markFunction(function( seed, results, context, xml ) {                                                         // 2567
		var temp, i, elem,                                                                                                   // 2568
			preMap = [],                                                                                                        // 2569
			postMap = [],                                                                                                       // 2570
			preexisting = results.length,                                                                                       // 2571
                                                                                                                       // 2572
			// Get initial elements from seed or context                                                                        // 2573
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),                  // 2574
                                                                                                                       // 2575
			// Prefilter to get matcher input, preserving a map for seed-results synchronization                                // 2576
			matcherIn = preFilter && ( seed || !selector ) ?                                                                    // 2577
				condense( elems, preMap, preFilter, context, xml ) :                                                               // 2578
				elems,                                                                                                             // 2579
                                                                                                                       // 2580
			matcherOut = matcher ?                                                                                              // 2581
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,                       // 2582
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?                                                   // 2583
                                                                                                                       // 2584
					// ...intermediate processing is necessary                                                                        // 2585
					[] :                                                                                                              // 2586
                                                                                                                       // 2587
					// ...otherwise use results directly                                                                              // 2588
					results :                                                                                                         // 2589
				matcherIn;                                                                                                         // 2590
                                                                                                                       // 2591
		// Find primary matches                                                                                              // 2592
		if ( matcher ) {                                                                                                     // 2593
			matcher( matcherIn, matcherOut, context, xml );                                                                     // 2594
		}                                                                                                                    // 2595
                                                                                                                       // 2596
		// Apply postFilter                                                                                                  // 2597
		if ( postFilter ) {                                                                                                  // 2598
			temp = condense( matcherOut, postMap );                                                                             // 2599
			postFilter( temp, [], context, xml );                                                                               // 2600
                                                                                                                       // 2601
			// Un-match failing elements by moving them back to matcherIn                                                       // 2602
			i = temp.length;                                                                                                    // 2603
			while ( i-- ) {                                                                                                     // 2604
				if ( (elem = temp[i]) ) {                                                                                          // 2605
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);                                                     // 2606
				}                                                                                                                  // 2607
			}                                                                                                                   // 2608
		}                                                                                                                    // 2609
                                                                                                                       // 2610
		if ( seed ) {                                                                                                        // 2611
			if ( postFinder || preFilter ) {                                                                                    // 2612
				if ( postFinder ) {                                                                                                // 2613
					// Get the final matcherOut by condensing this intermediate into postFinder contexts                              // 2614
					temp = [];                                                                                                        // 2615
					i = matcherOut.length;                                                                                            // 2616
					while ( i-- ) {                                                                                                   // 2617
						if ( (elem = matcherOut[i]) ) {                                                                                  // 2618
							// Restore matcherIn since elem is not yet a final match                                                        // 2619
							temp.push( (matcherIn[i] = elem) );                                                                             // 2620
						}                                                                                                                // 2621
					}                                                                                                                 // 2622
					postFinder( null, (matcherOut = []), temp, xml );                                                                 // 2623
				}                                                                                                                  // 2624
                                                                                                                       // 2625
				// Move matched elements from seed to results to keep them synchronized                                            // 2626
				i = matcherOut.length;                                                                                             // 2627
				while ( i-- ) {                                                                                                    // 2628
					if ( (elem = matcherOut[i]) &&                                                                                    // 2629
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {                                            // 2630
                                                                                                                       // 2631
						seed[temp] = !(results[temp] = elem);                                                                            // 2632
					}                                                                                                                 // 2633
				}                                                                                                                  // 2634
			}                                                                                                                   // 2635
                                                                                                                       // 2636
		// Add elements to results, through postFinder if defined                                                            // 2637
		} else {                                                                                                             // 2638
			matcherOut = condense(                                                                                              // 2639
				matcherOut === results ?                                                                                           // 2640
					matcherOut.splice( preexisting, matcherOut.length ) :                                                             // 2641
					matcherOut                                                                                                        // 2642
			);                                                                                                                  // 2643
			if ( postFinder ) {                                                                                                 // 2644
				postFinder( null, results, matcherOut, xml );                                                                      // 2645
			} else {                                                                                                            // 2646
				push.apply( results, matcherOut );                                                                                 // 2647
			}                                                                                                                   // 2648
		}                                                                                                                    // 2649
	});                                                                                                                   // 2650
}                                                                                                                      // 2651
                                                                                                                       // 2652
function matcherFromTokens( tokens ) {                                                                                 // 2653
	var checkContext, matcher, j,                                                                                         // 2654
		len = tokens.length,                                                                                                 // 2655
		leadingRelative = Expr.relative[ tokens[0].type ],                                                                   // 2656
		implicitRelative = leadingRelative || Expr.relative[" "],                                                            // 2657
		i = leadingRelative ? 1 : 0,                                                                                         // 2658
                                                                                                                       // 2659
		// The foundational matcher ensures that elements are reachable from top-level context(s)                            // 2660
		matchContext = addCombinator( function( elem ) {                                                                     // 2661
			return elem === checkContext;                                                                                       // 2662
		}, implicitRelative, true ),                                                                                         // 2663
		matchAnyContext = addCombinator( function( elem ) {                                                                  // 2664
			return indexOf.call( checkContext, elem ) > -1;                                                                     // 2665
		}, implicitRelative, true ),                                                                                         // 2666
		matchers = [ function( elem, context, xml ) {                                                                        // 2667
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (                                         // 2668
				(checkContext = context).nodeType ?                                                                                // 2669
					matchContext( elem, context, xml ) :                                                                              // 2670
					matchAnyContext( elem, context, xml ) );                                                                          // 2671
		} ];                                                                                                                 // 2672
                                                                                                                       // 2673
	for ( ; i < len; i++ ) {                                                                                              // 2674
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {                                                                 // 2675
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];                                                  // 2676
		} else {                                                                                                             // 2677
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );                                           // 2678
                                                                                                                       // 2679
			// Return special upon seeing a positional matcher                                                                  // 2680
			if ( matcher[ expando ] ) {                                                                                         // 2681
				// Find the next relative operator (if any) for proper handling                                                    // 2682
				j = ++i;                                                                                                           // 2683
				for ( ; j < len; j++ ) {                                                                                           // 2684
					if ( Expr.relative[ tokens[j].type ] ) {                                                                          // 2685
						break;                                                                                                           // 2686
					}                                                                                                                 // 2687
				}                                                                                                                  // 2688
				return setMatcher(                                                                                                 // 2689
					i > 1 && elementMatcher( matchers ),                                                                              // 2690
					i > 1 && toSelector(                                                                                              // 2691
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`                        // 2692
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })                              // 2693
					).replace( rtrim, "$1" ),                                                                                         // 2694
					matcher,                                                                                                          // 2695
					i < j && matcherFromTokens( tokens.slice( i, j ) ),                                                               // 2696
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),                                                     // 2697
					j < len && toSelector( tokens )                                                                                   // 2698
				);                                                                                                                 // 2699
			}                                                                                                                   // 2700
			matchers.push( matcher );                                                                                           // 2701
		}                                                                                                                    // 2702
	}                                                                                                                     // 2703
                                                                                                                       // 2704
	return elementMatcher( matchers );                                                                                    // 2705
}                                                                                                                      // 2706
                                                                                                                       // 2707
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {                                                    // 2708
	// A counter to specify which element is currently being matched                                                      // 2709
	var matcherCachedRuns = 0,                                                                                            // 2710
		bySet = setMatchers.length > 0,                                                                                      // 2711
		byElement = elementMatchers.length > 0,                                                                              // 2712
		superMatcher = function( seed, context, xml, results, expandContext ) {                                              // 2713
			var elem, j, matcher,                                                                                               // 2714
				setMatched = [],                                                                                                   // 2715
				matchedCount = 0,                                                                                                  // 2716
				i = "0",                                                                                                           // 2717
				unmatched = seed && [],                                                                                            // 2718
				outermost = expandContext != null,                                                                                 // 2719
				contextBackup = outermostContext,                                                                                  // 2720
				// We must always have either seed elements or context                                                             // 2721
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),              // 2722
				// Use integer dirruns iff this is the outermost matcher                                                           // 2723
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);                                     // 2724
                                                                                                                       // 2725
			if ( outermost ) {                                                                                                  // 2726
				outermostContext = context !== document && context;                                                                // 2727
				cachedruns = matcherCachedRuns;                                                                                    // 2728
			}                                                                                                                   // 2729
                                                                                                                       // 2730
			// Add elements passing elementMatchers directly to results                                                         // 2731
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below                                  // 2732
			for ( ; (elem = elems[i]) != null; i++ ) {                                                                          // 2733
				if ( byElement && elem ) {                                                                                         // 2734
					j = 0;                                                                                                            // 2735
					while ( (matcher = elementMatchers[j++]) ) {                                                                      // 2736
						if ( matcher( elem, context, xml ) ) {                                                                           // 2737
							results.push( elem );                                                                                           // 2738
							break;                                                                                                          // 2739
						}                                                                                                                // 2740
					}                                                                                                                 // 2741
					if ( outermost ) {                                                                                                // 2742
						dirruns = dirrunsUnique;                                                                                         // 2743
						cachedruns = ++matcherCachedRuns;                                                                                // 2744
					}                                                                                                                 // 2745
				}                                                                                                                  // 2746
                                                                                                                       // 2747
				// Track unmatched elements for set filters                                                                        // 2748
				if ( bySet ) {                                                                                                     // 2749
					// They will have gone through all possible matchers                                                              // 2750
					if ( (elem = !matcher && elem) ) {                                                                                // 2751
						matchedCount--;                                                                                                  // 2752
					}                                                                                                                 // 2753
                                                                                                                       // 2754
					// Lengthen the array for every element, matched or not                                                           // 2755
					if ( seed ) {                                                                                                     // 2756
						unmatched.push( elem );                                                                                          // 2757
					}                                                                                                                 // 2758
				}                                                                                                                  // 2759
			}                                                                                                                   // 2760
                                                                                                                       // 2761
			// Apply set filters to unmatched elements                                                                          // 2762
			matchedCount += i;                                                                                                  // 2763
			if ( bySet && i !== matchedCount ) {                                                                                // 2764
				j = 0;                                                                                                             // 2765
				while ( (matcher = setMatchers[j++]) ) {                                                                           // 2766
					matcher( unmatched, setMatched, context, xml );                                                                   // 2767
				}                                                                                                                  // 2768
                                                                                                                       // 2769
				if ( seed ) {                                                                                                      // 2770
					// Reintegrate element matches to eliminate the need for sorting                                                  // 2771
					if ( matchedCount > 0 ) {                                                                                         // 2772
						while ( i-- ) {                                                                                                  // 2773
							if ( !(unmatched[i] || setMatched[i]) ) {                                                                       // 2774
								setMatched[i] = pop.call( results );                                                                           // 2775
							}                                                                                                               // 2776
						}                                                                                                                // 2777
					}                                                                                                                 // 2778
                                                                                                                       // 2779
					// Discard index placeholder values to get only actual matches                                                    // 2780
					setMatched = condense( setMatched );                                                                              // 2781
				}                                                                                                                  // 2782
                                                                                                                       // 2783
				// Add matches to results                                                                                          // 2784
				push.apply( results, setMatched );                                                                                 // 2785
                                                                                                                       // 2786
				// Seedless set matches succeeding multiple successful matchers stipulate sorting                                  // 2787
				if ( outermost && !seed && setMatched.length > 0 &&                                                                // 2788
					( matchedCount + setMatchers.length ) > 1 ) {                                                                     // 2789
                                                                                                                       // 2790
					Sizzle.uniqueSort( results );                                                                                     // 2791
				}                                                                                                                  // 2792
			}                                                                                                                   // 2793
                                                                                                                       // 2794
			// Override manipulation of globals by nested matchers                                                              // 2795
			if ( outermost ) {                                                                                                  // 2796
				dirruns = dirrunsUnique;                                                                                           // 2797
				outermostContext = contextBackup;                                                                                  // 2798
			}                                                                                                                   // 2799
                                                                                                                       // 2800
			return unmatched;                                                                                                   // 2801
		};                                                                                                                   // 2802
                                                                                                                       // 2803
	return bySet ?                                                                                                        // 2804
		markFunction( superMatcher ) :                                                                                       // 2805
		superMatcher;                                                                                                        // 2806
}                                                                                                                      // 2807
                                                                                                                       // 2808
compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {                                       // 2809
	var i,                                                                                                                // 2810
		setMatchers = [],                                                                                                    // 2811
		elementMatchers = [],                                                                                                // 2812
		cached = compilerCache[ selector + " " ];                                                                            // 2813
                                                                                                                       // 2814
	if ( !cached ) {                                                                                                      // 2815
		// Generate a function of recursive functions that can be used to check each element                                 // 2816
		if ( !group ) {                                                                                                      // 2817
			group = tokenize( selector );                                                                                       // 2818
		}                                                                                                                    // 2819
		i = group.length;                                                                                                    // 2820
		while ( i-- ) {                                                                                                      // 2821
			cached = matcherFromTokens( group[i] );                                                                             // 2822
			if ( cached[ expando ] ) {                                                                                          // 2823
				setMatchers.push( cached );                                                                                        // 2824
			} else {                                                                                                            // 2825
				elementMatchers.push( cached );                                                                                    // 2826
			}                                                                                                                   // 2827
		}                                                                                                                    // 2828
                                                                                                                       // 2829
		// Cache the compiled function                                                                                       // 2830
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );                        // 2831
	}                                                                                                                     // 2832
	return cached;                                                                                                        // 2833
};                                                                                                                     // 2834
                                                                                                                       // 2835
function multipleContexts( selector, contexts, results ) {                                                             // 2836
	var i = 0,                                                                                                            // 2837
		len = contexts.length;                                                                                               // 2838
	for ( ; i < len; i++ ) {                                                                                              // 2839
		Sizzle( selector, contexts[i], results );                                                                            // 2840
	}                                                                                                                     // 2841
	return results;                                                                                                       // 2842
}                                                                                                                      // 2843
                                                                                                                       // 2844
function select( selector, context, results, seed ) {                                                                  // 2845
	var i, tokens, token, type, find,                                                                                     // 2846
		match = tokenize( selector );                                                                                        // 2847
                                                                                                                       // 2848
	if ( !seed ) {                                                                                                        // 2849
		// Try to minimize operations if there is only one group                                                             // 2850
		if ( match.length === 1 ) {                                                                                          // 2851
                                                                                                                       // 2852
			// Take a shortcut and set the context if the root selector is an ID                                                // 2853
			tokens = match[0] = match[0].slice( 0 );                                                                            // 2854
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&                                                      // 2855
					support.getById && context.nodeType === 9 && documentIsHTML &&                                                    // 2856
					Expr.relative[ tokens[1].type ] ) {                                                                               // 2857
                                                                                                                       // 2858
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];                 // 2859
				if ( !context ) {                                                                                                  // 2860
					return results;                                                                                                   // 2861
				}                                                                                                                  // 2862
				selector = selector.slice( tokens.shift().value.length );                                                          // 2863
			}                                                                                                                   // 2864
                                                                                                                       // 2865
			// Fetch a seed set for right-to-left matching                                                                      // 2866
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;                                                 // 2867
			while ( i-- ) {                                                                                                     // 2868
				token = tokens[i];                                                                                                 // 2869
                                                                                                                       // 2870
				// Abort if we hit a combinator                                                                                    // 2871
				if ( Expr.relative[ (type = token.type) ] ) {                                                                      // 2872
					break;                                                                                                            // 2873
				}                                                                                                                  // 2874
				if ( (find = Expr.find[ type ]) ) {                                                                                // 2875
					// Search, expanding context for leading sibling combinators                                                      // 2876
					if ( (seed = find(                                                                                                // 2877
						token.matches[0].replace( runescape, funescape ),                                                                // 2878
						rsibling.test( tokens[0].type ) && context.parentNode || context                                                 // 2879
					)) ) {                                                                                                            // 2880
                                                                                                                       // 2881
						// If seed is empty or no tokens remain, we can return early                                                     // 2882
						tokens.splice( i, 1 );                                                                                           // 2883
						selector = seed.length && toSelector( tokens );                                                                  // 2884
						if ( !selector ) {                                                                                               // 2885
							push.apply( results, seed );                                                                                    // 2886
							return results;                                                                                                 // 2887
						}                                                                                                                // 2888
                                                                                                                       // 2889
						break;                                                                                                           // 2890
					}                                                                                                                 // 2891
				}                                                                                                                  // 2892
			}                                                                                                                   // 2893
		}                                                                                                                    // 2894
	}                                                                                                                     // 2895
                                                                                                                       // 2896
	// Compile and execute a filtering function                                                                           // 2897
	// Provide `match` to avoid retokenization if we modified the selector above                                          // 2898
	compile( selector, match )(                                                                                           // 2899
		seed,                                                                                                                // 2900
		context,                                                                                                             // 2901
		!documentIsHTML,                                                                                                     // 2902
		results,                                                                                                             // 2903
		rsibling.test( selector )                                                                                            // 2904
	);                                                                                                                    // 2905
	return results;                                                                                                       // 2906
}                                                                                                                      // 2907
                                                                                                                       // 2908
// One-time assignments                                                                                                // 2909
                                                                                                                       // 2910
// Sort stability                                                                                                      // 2911
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;                                         // 2912
                                                                                                                       // 2913
// Support: Chrome<14                                                                                                  // 2914
// Always assume duplicates if they aren't passed to the comparison function                                           // 2915
support.detectDuplicates = hasDuplicate;                                                                               // 2916
                                                                                                                       // 2917
// Initialize against the default document                                                                             // 2918
setDocument();                                                                                                         // 2919
                                                                                                                       // 2920
// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)                                                // 2921
// Detached nodes confoundingly follow *each other*                                                                    // 2922
support.sortDetached = assert(function( div1 ) {                                                                       // 2923
	// Should return 1, but returns 4 (following)                                                                         // 2924
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;                                             // 2925
});                                                                                                                    // 2926
                                                                                                                       // 2927
// Support: IE<8                                                                                                       // 2928
// Prevent attribute/property "interpolation"                                                                          // 2929
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                    // 2930
if ( !assert(function( div ) {                                                                                         // 2931
	div.innerHTML = "<a href='#'></a>";                                                                                   // 2932
	return div.firstChild.getAttribute("href") === "#" ;                                                                  // 2933
}) ) {                                                                                                                 // 2934
	addHandle( "type|href|height|width", function( elem, name, isXML ) {                                                  // 2935
		if ( !isXML ) {                                                                                                      // 2936
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );                                            // 2937
		}                                                                                                                    // 2938
	});                                                                                                                   // 2939
}                                                                                                                      // 2940
                                                                                                                       // 2941
// Support: IE<9                                                                                                       // 2942
// Use defaultValue in place of getAttribute("value")                                                                  // 2943
if ( !support.attributes || !assert(function( div ) {                                                                  // 2944
	div.innerHTML = "<input/>";                                                                                           // 2945
	div.firstChild.setAttribute( "value", "" );                                                                           // 2946
	return div.firstChild.getAttribute( "value" ) === "";                                                                 // 2947
}) ) {                                                                                                                 // 2948
	addHandle( "value", function( elem, name, isXML ) {                                                                   // 2949
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {                                                           // 2950
			return elem.defaultValue;                                                                                           // 2951
		}                                                                                                                    // 2952
	});                                                                                                                   // 2953
}                                                                                                                      // 2954
                                                                                                                       // 2955
// Support: IE<9                                                                                                       // 2956
// Use getAttributeNode to fetch booleans when getAttribute lies                                                       // 2957
if ( !assert(function( div ) {                                                                                         // 2958
	return div.getAttribute("disabled") == null;                                                                          // 2959
}) ) {                                                                                                                 // 2960
	addHandle( booleans, function( elem, name, isXML ) {                                                                  // 2961
		var val;                                                                                                             // 2962
		if ( !isXML ) {                                                                                                      // 2963
			return (val = elem.getAttributeNode( name )) && val.specified ?                                                     // 2964
				val.value :                                                                                                        // 2965
				elem[ name ] === true ? name.toLowerCase() : null;                                                                 // 2966
		}                                                                                                                    // 2967
	});                                                                                                                   // 2968
}                                                                                                                      // 2969
                                                                                                                       // 2970
jQuery.find = Sizzle;                                                                                                  // 2971
jQuery.expr = Sizzle.selectors;                                                                                        // 2972
jQuery.expr[":"] = jQuery.expr.pseudos;                                                                                // 2973
jQuery.unique = Sizzle.uniqueSort;                                                                                     // 2974
jQuery.text = Sizzle.getText;                                                                                          // 2975
jQuery.isXMLDoc = Sizzle.isXML;                                                                                        // 2976
jQuery.contains = Sizzle.contains;                                                                                     // 2977
                                                                                                                       // 2978
                                                                                                                       // 2979
})( window );                                                                                                          // 2980
// String to Object options format cache                                                                               // 2981
var optionsCache = {};                                                                                                 // 2982
                                                                                                                       // 2983
// Convert String-formatted options into Object-formatted ones and store in cache                                      // 2984
function createOptions( options ) {                                                                                    // 2985
	var object = optionsCache[ options ] = {};                                                                            // 2986
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {                                             // 2987
		object[ flag ] = true;                                                                                               // 2988
	});                                                                                                                   // 2989
	return object;                                                                                                        // 2990
}                                                                                                                      // 2991
                                                                                                                       // 2992
/*                                                                                                                     // 2993
 * Create a callback list using the following parameters:                                                              // 2994
 *                                                                                                                     // 2995
 *	options: an optional list of space-separated options that will change how                                           // 2996
 *			the callback list behaves or a more traditional option object                                                     // 2997
 *                                                                                                                     // 2998
 * By default a callback list will act like an event callback list and can be                                          // 2999
 * "fired" multiple times.                                                                                             // 3000
 *                                                                                                                     // 3001
 * Possible options:                                                                                                   // 3002
 *                                                                                                                     // 3003
 *	once:			will ensure the callback list can only be fired once (like a Deferred)                                      // 3004
 *                                                                                                                     // 3005
 *	memory:			will keep track of previous values and will call any callback added                                       // 3006
 *					after the list has been fired right away with the latest "memorized"                                            // 3007
 *					values (like a Deferred)                                                                                        // 3008
 *                                                                                                                     // 3009
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)                                  // 3010
 *                                                                                                                     // 3011
 *	stopOnFalse:	interrupt callings when a callback returns false                                                       // 3012
 *                                                                                                                     // 3013
 */                                                                                                                    // 3014
jQuery.Callbacks = function( options ) {                                                                               // 3015
                                                                                                                       // 3016
	// Convert options from String-formatted to Object-formatted if needed                                                // 3017
	// (we check in cache first)                                                                                          // 3018
	options = typeof options === "string" ?                                                                               // 3019
		( optionsCache[ options ] || createOptions( options ) ) :                                                            // 3020
		jQuery.extend( {}, options );                                                                                        // 3021
                                                                                                                       // 3022
	var // Flag to know if list is currently firing                                                                       // 3023
		firing,                                                                                                              // 3024
		// Last fire value (for non-forgettable lists)                                                                       // 3025
		memory,                                                                                                              // 3026
		// Flag to know if list was already fired                                                                            // 3027
		fired,                                                                                                               // 3028
		// End of the loop when firing                                                                                       // 3029
		firingLength,                                                                                                        // 3030
		// Index of currently firing callback (modified by remove if needed)                                                 // 3031
		firingIndex,                                                                                                         // 3032
		// First callback to fire (used internally by add and fireWith)                                                      // 3033
		firingStart,                                                                                                         // 3034
		// Actual callback list                                                                                              // 3035
		list = [],                                                                                                           // 3036
		// Stack of fire calls for repeatable lists                                                                          // 3037
		stack = !options.once && [],                                                                                         // 3038
		// Fire callbacks                                                                                                    // 3039
		fire = function( data ) {                                                                                            // 3040
			memory = options.memory && data;                                                                                    // 3041
			fired = true;                                                                                                       // 3042
			firingIndex = firingStart || 0;                                                                                     // 3043
			firingStart = 0;                                                                                                    // 3044
			firingLength = list.length;                                                                                         // 3045
			firing = true;                                                                                                      // 3046
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {                                                       // 3047
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {                        // 3048
					memory = false; // To prevent further calls using add                                                             // 3049
					break;                                                                                                            // 3050
				}                                                                                                                  // 3051
			}                                                                                                                   // 3052
			firing = false;                                                                                                     // 3053
			if ( list ) {                                                                                                       // 3054
				if ( stack ) {                                                                                                     // 3055
					if ( stack.length ) {                                                                                             // 3056
						fire( stack.shift() );                                                                                           // 3057
					}                                                                                                                 // 3058
				} else if ( memory ) {                                                                                             // 3059
					list = [];                                                                                                        // 3060
				} else {                                                                                                           // 3061
					self.disable();                                                                                                   // 3062
				}                                                                                                                  // 3063
			}                                                                                                                   // 3064
		},                                                                                                                   // 3065
		// Actual Callbacks object                                                                                           // 3066
		self = {                                                                                                             // 3067
			// Add a callback or a collection of callbacks to the list                                                          // 3068
			add: function() {                                                                                                   // 3069
				if ( list ) {                                                                                                      // 3070
					// First, we save the current length                                                                              // 3071
					var start = list.length;                                                                                          // 3072
					(function add( args ) {                                                                                           // 3073
						jQuery.each( args, function( _, arg ) {                                                                          // 3074
							var type = jQuery.type( arg );                                                                                  // 3075
							if ( type === "function" ) {                                                                                    // 3076
								if ( !options.unique || !self.has( arg ) ) {                                                                   // 3077
									list.push( arg );                                                                                             // 3078
								}                                                                                                              // 3079
							} else if ( arg && arg.length && type !== "string" ) {                                                          // 3080
								// Inspect recursively                                                                                         // 3081
								add( arg );                                                                                                    // 3082
							}                                                                                                               // 3083
						});                                                                                                              // 3084
					})( arguments );                                                                                                  // 3085
					// Do we need to add the callbacks to the                                                                         // 3086
					// current firing batch?                                                                                          // 3087
					if ( firing ) {                                                                                                   // 3088
						firingLength = list.length;                                                                                      // 3089
					// With memory, if we're not firing then                                                                          // 3090
					// we should call right away                                                                                      // 3091
					} else if ( memory ) {                                                                                            // 3092
						firingStart = start;                                                                                             // 3093
						fire( memory );                                                                                                  // 3094
					}                                                                                                                 // 3095
				}                                                                                                                  // 3096
				return this;                                                                                                       // 3097
			},                                                                                                                  // 3098
			// Remove a callback from the list                                                                                  // 3099
			remove: function() {                                                                                                // 3100
				if ( list ) {                                                                                                      // 3101
					jQuery.each( arguments, function( _, arg ) {                                                                      // 3102
						var index;                                                                                                       // 3103
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {                                                   // 3104
							list.splice( index, 1 );                                                                                        // 3105
							// Handle firing indexes                                                                                        // 3106
							if ( firing ) {                                                                                                 // 3107
								if ( index <= firingLength ) {                                                                                 // 3108
									firingLength--;                                                                                               // 3109
								}                                                                                                              // 3110
								if ( index <= firingIndex ) {                                                                                  // 3111
									firingIndex--;                                                                                                // 3112
								}                                                                                                              // 3113
							}                                                                                                               // 3114
						}                                                                                                                // 3115
					});                                                                                                               // 3116
				}                                                                                                                  // 3117
				return this;                                                                                                       // 3118
			},                                                                                                                  // 3119
			// Check if a given callback is in the list.                                                                        // 3120
			// If no argument is given, return whether or not list has callbacks attached.                                      // 3121
			has: function( fn ) {                                                                                               // 3122
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );                                           // 3123
			},                                                                                                                  // 3124
			// Remove all callbacks from the list                                                                               // 3125
			empty: function() {                                                                                                 // 3126
				list = [];                                                                                                         // 3127
				firingLength = 0;                                                                                                  // 3128
				return this;                                                                                                       // 3129
			},                                                                                                                  // 3130
			// Have the list do nothing anymore                                                                                 // 3131
			disable: function() {                                                                                               // 3132
				list = stack = memory = undefined;                                                                                 // 3133
				return this;                                                                                                       // 3134
			},                                                                                                                  // 3135
			// Is it disabled?                                                                                                  // 3136
			disabled: function() {                                                                                              // 3137
				return !list;                                                                                                      // 3138
			},                                                                                                                  // 3139
			// Lock the list in its current state                                                                               // 3140
			lock: function() {                                                                                                  // 3141
				stack = undefined;                                                                                                 // 3142
				if ( !memory ) {                                                                                                   // 3143
					self.disable();                                                                                                   // 3144
				}                                                                                                                  // 3145
				return this;                                                                                                       // 3146
			},                                                                                                                  // 3147
			// Is it locked?                                                                                                    // 3148
			locked: function() {                                                                                                // 3149
				return !stack;                                                                                                     // 3150
			},                                                                                                                  // 3151
			// Call all callbacks with the given context and arguments                                                          // 3152
			fireWith: function( context, args ) {                                                                               // 3153
				if ( list && ( !fired || stack ) ) {                                                                               // 3154
					args = args || [];                                                                                                // 3155
					args = [ context, args.slice ? args.slice() : args ];                                                             // 3156
					if ( firing ) {                                                                                                   // 3157
						stack.push( args );                                                                                              // 3158
					} else {                                                                                                          // 3159
						fire( args );                                                                                                    // 3160
					}                                                                                                                 // 3161
				}                                                                                                                  // 3162
				return this;                                                                                                       // 3163
			},                                                                                                                  // 3164
			// Call all the callbacks with the given arguments                                                                  // 3165
			fire: function() {                                                                                                  // 3166
				self.fireWith( this, arguments );                                                                                  // 3167
				return this;                                                                                                       // 3168
			},                                                                                                                  // 3169
			// To know if the callbacks have already been called at least once                                                  // 3170
			fired: function() {                                                                                                 // 3171
				return !!fired;                                                                                                    // 3172
			}                                                                                                                   // 3173
		};                                                                                                                   // 3174
                                                                                                                       // 3175
	return self;                                                                                                          // 3176
};                                                                                                                     // 3177
jQuery.extend({                                                                                                        // 3178
                                                                                                                       // 3179
	Deferred: function( func ) {                                                                                          // 3180
		var tuples = [                                                                                                       // 3181
				// action, add listener, listener list, final state                                                                // 3182
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],                                                // 3183
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],                                                 // 3184
				[ "notify", "progress", jQuery.Callbacks("memory") ]                                                               // 3185
			],                                                                                                                  // 3186
			state = "pending",                                                                                                  // 3187
			promise = {                                                                                                         // 3188
				state: function() {                                                                                                // 3189
					return state;                                                                                                     // 3190
				},                                                                                                                 // 3191
				always: function() {                                                                                               // 3192
					deferred.done( arguments ).fail( arguments );                                                                     // 3193
					return this;                                                                                                      // 3194
				},                                                                                                                 // 3195
				then: function( /* fnDone, fnFail, fnProgress */ ) {                                                               // 3196
					var fns = arguments;                                                                                              // 3197
					return jQuery.Deferred(function( newDefer ) {                                                                     // 3198
						jQuery.each( tuples, function( i, tuple ) {                                                                      // 3199
							var action = tuple[ 0 ],                                                                                        // 3200
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];                                                                // 3201
							// deferred[ done | fail | progress ] for forwarding actions to newDefer                                        // 3202
							deferred[ tuple[1] ](function() {                                                                               // 3203
								var returned = fn && fn.apply( this, arguments );                                                              // 3204
								if ( returned && jQuery.isFunction( returned.promise ) ) {                                                     // 3205
									returned.promise()                                                                                            // 3206
										.done( newDefer.resolve )                                                                                    // 3207
										.fail( newDefer.reject )                                                                                     // 3208
										.progress( newDefer.notify );                                                                                // 3209
								} else {                                                                                                       // 3210
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );   // 3211
								}                                                                                                              // 3212
							});                                                                                                             // 3213
						});                                                                                                              // 3214
						fns = null;                                                                                                      // 3215
					}).promise();                                                                                                     // 3216
				},                                                                                                                 // 3217
				// Get a promise for this deferred                                                                                 // 3218
				// If obj is provided, the promise aspect is added to the object                                                   // 3219
				promise: function( obj ) {                                                                                         // 3220
					return obj != null ? jQuery.extend( obj, promise ) : promise;                                                     // 3221
				}                                                                                                                  // 3222
			},                                                                                                                  // 3223
			deferred = {};                                                                                                      // 3224
                                                                                                                       // 3225
		// Keep pipe for back-compat                                                                                         // 3226
		promise.pipe = promise.then;                                                                                         // 3227
                                                                                                                       // 3228
		// Add list-specific methods                                                                                         // 3229
		jQuery.each( tuples, function( i, tuple ) {                                                                          // 3230
			var list = tuple[ 2 ],                                                                                              // 3231
				stateString = tuple[ 3 ];                                                                                          // 3232
                                                                                                                       // 3233
			// promise[ done | fail | progress ] = list.add                                                                     // 3234
			promise[ tuple[1] ] = list.add;                                                                                     // 3235
                                                                                                                       // 3236
			// Handle state                                                                                                     // 3237
			if ( stateString ) {                                                                                                // 3238
				list.add(function() {                                                                                              // 3239
					// state = [ resolved | rejected ]                                                                                // 3240
					state = stateString;                                                                                              // 3241
                                                                                                                       // 3242
				// [ reject_list | resolve_list ].disable; progress_list.lock                                                      // 3243
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );                                                          // 3244
			}                                                                                                                   // 3245
                                                                                                                       // 3246
			// deferred[ resolve | reject | notify ]                                                                            // 3247
			deferred[ tuple[0] ] = function() {                                                                                 // 3248
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );                                    // 3249
				return this;                                                                                                       // 3250
			};                                                                                                                  // 3251
			deferred[ tuple[0] + "With" ] = list.fireWith;                                                                      // 3252
		});                                                                                                                  // 3253
                                                                                                                       // 3254
		// Make the deferred a promise                                                                                       // 3255
		promise.promise( deferred );                                                                                         // 3256
                                                                                                                       // 3257
		// Call given func if any                                                                                            // 3258
		if ( func ) {                                                                                                        // 3259
			func.call( deferred, deferred );                                                                                    // 3260
		}                                                                                                                    // 3261
                                                                                                                       // 3262
		// All done!                                                                                                         // 3263
		return deferred;                                                                                                     // 3264
	},                                                                                                                    // 3265
                                                                                                                       // 3266
	// Deferred helper                                                                                                    // 3267
	when: function( subordinate /* , ..., subordinateN */ ) {                                                             // 3268
		var i = 0,                                                                                                           // 3269
			resolveValues = core_slice.call( arguments ),                                                                       // 3270
			length = resolveValues.length,                                                                                      // 3271
                                                                                                                       // 3272
			// the count of uncompleted subordinates                                                                            // 3273
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,               // 3274
                                                                                                                       // 3275
			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.                          // 3276
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),                                                       // 3277
                                                                                                                       // 3278
			// Update function for both resolve and progress values                                                             // 3279
			updateFunc = function( i, contexts, values ) {                                                                      // 3280
				return function( value ) {                                                                                         // 3281
					contexts[ i ] = this;                                                                                             // 3282
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;                                        // 3283
					if( values === progressValues ) {                                                                                 // 3284
						deferred.notifyWith( contexts, values );                                                                         // 3285
					} else if ( !( --remaining ) ) {                                                                                  // 3286
						deferred.resolveWith( contexts, values );                                                                        // 3287
					}                                                                                                                 // 3288
				};                                                                                                                 // 3289
			},                                                                                                                  // 3290
                                                                                                                       // 3291
			progressValues, progressContexts, resolveContexts;                                                                  // 3292
                                                                                                                       // 3293
		// add listeners to Deferred subordinates; treat others as resolved                                                  // 3294
		if ( length > 1 ) {                                                                                                  // 3295
			progressValues = new Array( length );                                                                               // 3296
			progressContexts = new Array( length );                                                                             // 3297
			resolveContexts = new Array( length );                                                                              // 3298
			for ( ; i < length; i++ ) {                                                                                         // 3299
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {                                     // 3300
					resolveValues[ i ].promise()                                                                                      // 3301
						.done( updateFunc( i, resolveContexts, resolveValues ) )                                                         // 3302
						.fail( deferred.reject )                                                                                         // 3303
						.progress( updateFunc( i, progressContexts, progressValues ) );                                                  // 3304
				} else {                                                                                                           // 3305
					--remaining;                                                                                                      // 3306
				}                                                                                                                  // 3307
			}                                                                                                                   // 3308
		}                                                                                                                    // 3309
                                                                                                                       // 3310
		// if we're not waiting on anything, resolve the master                                                              // 3311
		if ( !remaining ) {                                                                                                  // 3312
			deferred.resolveWith( resolveContexts, resolveValues );                                                             // 3313
		}                                                                                                                    // 3314
                                                                                                                       // 3315
		return deferred.promise();                                                                                           // 3316
	}                                                                                                                     // 3317
});                                                                                                                    // 3318
jQuery.support = (function( support ) {                                                                                // 3319
                                                                                                                       // 3320
	var all, a, input, select, fragment, opt, eventName, isSupported, i,                                                  // 3321
		div = document.createElement("div");                                                                                 // 3322
                                                                                                                       // 3323
	// Setup                                                                                                              // 3324
	div.setAttribute( "className", "t" );                                                                                 // 3325
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                                 // 3326
                                                                                                                       // 3327
	// Finish early in limited (non-browser) environments                                                                 // 3328
	all = div.getElementsByTagName("*") || [];                                                                            // 3329
	a = div.getElementsByTagName("a")[ 0 ];                                                                               // 3330
	if ( !a || !a.style || !all.length ) {                                                                                // 3331
		return support;                                                                                                      // 3332
	}                                                                                                                     // 3333
                                                                                                                       // 3334
	// First batch of tests                                                                                               // 3335
	select = document.createElement("select");                                                                            // 3336
	opt = select.appendChild( document.createElement("option") );                                                         // 3337
	input = div.getElementsByTagName("input")[ 0 ];                                                                       // 3338
                                                                                                                       // 3339
	a.style.cssText = "top:1px;float:left;opacity:.5";                                                                    // 3340
                                                                                                                       // 3341
	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)           // 3342
	support.getSetAttribute = div.className !== "t";                                                                      // 3343
                                                                                                                       // 3344
	// IE strips leading whitespace when .innerHTML is used                                                               // 3345
	support.leadingWhitespace = div.firstChild.nodeType === 3;                                                            // 3346
                                                                                                                       // 3347
	// Make sure that tbody elements aren't automatically inserted                                                        // 3348
	// IE will insert them into empty tables                                                                              // 3349
	support.tbody = !div.getElementsByTagName("tbody").length;                                                            // 3350
                                                                                                                       // 3351
	// Make sure that link elements get serialized correctly by innerHTML                                                 // 3352
	// This requires a wrapper element in IE                                                                              // 3353
	support.htmlSerialize = !!div.getElementsByTagName("link").length;                                                    // 3354
                                                                                                                       // 3355
	// Get the style information from getAttribute                                                                        // 3356
	// (IE uses .cssText instead)                                                                                         // 3357
	support.style = /top/.test( a.getAttribute("style") );                                                                // 3358
                                                                                                                       // 3359
	// Make sure that URLs aren't manipulated                                                                             // 3360
	// (IE normalizes it by default)                                                                                      // 3361
	support.hrefNormalized = a.getAttribute("href") === "/a";                                                             // 3362
                                                                                                                       // 3363
	// Make sure that element opacity exists                                                                              // 3364
	// (IE uses filter instead)                                                                                           // 3365
	// Use a regex to work around a WebKit issue. See #5145                                                               // 3366
	support.opacity = /^0.5/.test( a.style.opacity );                                                                     // 3367
                                                                                                                       // 3368
	// Verify style float existence                                                                                       // 3369
	// (IE uses styleFloat instead of cssFloat)                                                                           // 3370
	support.cssFloat = !!a.style.cssFloat;                                                                                // 3371
                                                                                                                       // 3372
	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)                                              // 3373
	support.checkOn = !!input.value;                                                                                      // 3374
                                                                                                                       // 3375
	// Make sure that a selected-by-default option has a working selected property.                                       // 3376
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)                                         // 3377
	support.optSelected = opt.selected;                                                                                   // 3378
                                                                                                                       // 3379
	// Tests for enctype support on a form (#6743)                                                                        // 3380
	support.enctype = !!document.createElement("form").enctype;                                                           // 3381
                                                                                                                       // 3382
	// Makes sure cloning an html5 element does not cause problems                                                        // 3383
	// Where outerHTML is undefined, this still works                                                                     // 3384
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";                   // 3385
                                                                                                                       // 3386
	// Will be defined later                                                                                              // 3387
	support.inlineBlockNeedsLayout = false;                                                                               // 3388
	support.shrinkWrapBlocks = false;                                                                                     // 3389
	support.pixelPosition = false;                                                                                        // 3390
	support.deleteExpando = true;                                                                                         // 3391
	support.noCloneEvent = true;                                                                                          // 3392
	support.reliableMarginRight = true;                                                                                   // 3393
	support.boxSizingReliable = true;                                                                                     // 3394
                                                                                                                       // 3395
	// Make sure checked status is properly cloned                                                                        // 3396
	input.checked = true;                                                                                                 // 3397
	support.noCloneChecked = input.cloneNode( true ).checked;                                                             // 3398
                                                                                                                       // 3399
	// Make sure that the options inside disabled selects aren't marked as disabled                                       // 3400
	// (WebKit marks them as disabled)                                                                                    // 3401
	select.disabled = true;                                                                                               // 3402
	support.optDisabled = !opt.disabled;                                                                                  // 3403
                                                                                                                       // 3404
	// Support: IE<9                                                                                                      // 3405
	try {                                                                                                                 // 3406
		delete div.test;                                                                                                     // 3407
	} catch( e ) {                                                                                                        // 3408
		support.deleteExpando = false;                                                                                       // 3409
	}                                                                                                                     // 3410
                                                                                                                       // 3411
	// Check if we can trust getAttribute("value")                                                                        // 3412
	input = document.createElement("input");                                                                              // 3413
	input.setAttribute( "value", "" );                                                                                    // 3414
	support.input = input.getAttribute( "value" ) === "";                                                                 // 3415
                                                                                                                       // 3416
	// Check if an input maintains its value after becoming a radio                                                       // 3417
	input.value = "t";                                                                                                    // 3418
	input.setAttribute( "type", "radio" );                                                                                // 3419
	support.radioValue = input.value === "t";                                                                             // 3420
                                                                                                                       // 3421
	// #11217 - WebKit loses check when the name is after the checked attribute                                           // 3422
	input.setAttribute( "checked", "t" );                                                                                 // 3423
	input.setAttribute( "name", "t" );                                                                                    // 3424
                                                                                                                       // 3425
	fragment = document.createDocumentFragment();                                                                         // 3426
	fragment.appendChild( input );                                                                                        // 3427
                                                                                                                       // 3428
	// Check if a disconnected checkbox will retain its checked                                                           // 3429
	// value of true after appended to the DOM (IE6/7)                                                                    // 3430
	support.appendChecked = input.checked;                                                                                // 3431
                                                                                                                       // 3432
	// WebKit doesn't clone checked state correctly in fragments                                                          // 3433
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;                                  // 3434
                                                                                                                       // 3435
	// Support: IE<9                                                                                                      // 3436
	// Opera does not clone events (and typeof div.attachEvent === undefined).                                            // 3437
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()                                   // 3438
	if ( div.attachEvent ) {                                                                                              // 3439
		div.attachEvent( "onclick", function() {                                                                             // 3440
			support.noCloneEvent = false;                                                                                       // 3441
		});                                                                                                                  // 3442
                                                                                                                       // 3443
		div.cloneNode( true ).click();                                                                                       // 3444
	}                                                                                                                     // 3445
                                                                                                                       // 3446
	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)                                        // 3447
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)                                         // 3448
	for ( i in { submit: true, change: true, focusin: true }) {                                                           // 3449
		div.setAttribute( eventName = "on" + i, "t" );                                                                       // 3450
                                                                                                                       // 3451
		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;                     // 3452
	}                                                                                                                     // 3453
                                                                                                                       // 3454
	div.style.backgroundClip = "content-box";                                                                             // 3455
	div.cloneNode( true ).style.backgroundClip = "";                                                                      // 3456
	support.clearCloneStyle = div.style.backgroundClip === "content-box";                                                 // 3457
                                                                                                                       // 3458
	// Support: IE<9                                                                                                      // 3459
	// Iteration over object's inherited properties before its own.                                                       // 3460
	for ( i in jQuery( support ) ) {                                                                                      // 3461
		break;                                                                                                               // 3462
	}                                                                                                                     // 3463
	support.ownLast = i !== "0";                                                                                          // 3464
                                                                                                                       // 3465
	// Run tests that need a body at doc ready                                                                            // 3466
	jQuery(function() {                                                                                                   // 3467
		var container, marginDiv, tds,                                                                                       // 3468
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];                                                                    // 3470
                                                                                                                       // 3471
		if ( !body ) {                                                                                                       // 3472
			// Return for frameset docs that don't have a body                                                                  // 3473
			return;                                                                                                             // 3474
		}                                                                                                                    // 3475
                                                                                                                       // 3476
		container = document.createElement("div");                                                                           // 3477
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";           // 3478
                                                                                                                       // 3479
		body.appendChild( container ).appendChild( div );                                                                    // 3480
                                                                                                                       // 3481
		// Support: IE8                                                                                                      // 3482
		// Check if table cells still have offsetWidth/Height when they are set                                              // 3483
		// to display:none and there are still other visible table cells in a                                                // 3484
		// table row; if so, offsetWidth/Height are not reliable for use when                                                // 3485
		// determining if an element has been hidden directly using                                                          // 3486
		// display:none (it is still safe to use offsets if a parent element is                                              // 3487
		// hidden; don safety goggles and see bug #4512 for more information).                                               // 3488
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";                                                       // 3489
		tds = div.getElementsByTagName("td");                                                                                // 3490
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";                                                 // 3491
		isSupported = ( tds[ 0 ].offsetHeight === 0 );                                                                       // 3492
                                                                                                                       // 3493
		tds[ 0 ].style.display = "";                                                                                         // 3494
		tds[ 1 ].style.display = "none";                                                                                     // 3495
                                                                                                                       // 3496
		// Support: IE8                                                                                                      // 3497
		// Check if empty table cells still have offsetWidth/Height                                                          // 3498
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );                                      // 3499
                                                                                                                       // 3500
		// Check box-sizing and margin behavior.                                                                             // 3501
		div.innerHTML = "";                                                                                                  // 3502
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
                                                                                                                       // 3504
		// Workaround failing boxSizing test due to offsetWidth returning wrong value                                        // 3505
		// with some non-1 values of body zoom, ticket #13543                                                                // 3506
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {                                          // 3507
			support.boxSizing = div.offsetWidth === 4;                                                                          // 3508
		});                                                                                                                  // 3509
                                                                                                                       // 3510
		// Use window.getComputedStyle because jsdom on node.js will break without it.                                       // 3511
		if ( window.getComputedStyle ) {                                                                                     // 3512
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";                                // 3513
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";           // 3514
                                                                                                                       // 3515
			// Check if div with explicit width and no margin-right incorrectly                                                 // 3516
			// gets computed margin-right based on width of container. (#3333)                                                  // 3517
			// Fails in WebKit before Feb 2011 nightlies                                                                        // 3518
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                         // 3519
			marginDiv = div.appendChild( document.createElement("div") );                                                       // 3520
			marginDiv.style.cssText = div.style.cssText = divReset;                                                             // 3521
			marginDiv.style.marginRight = marginDiv.style.width = "0";                                                          // 3522
			div.style.width = "1px";                                                                                            // 3523
                                                                                                                       // 3524
			support.reliableMarginRight =                                                                                       // 3525
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );                                   // 3526
		}                                                                                                                    // 3527
                                                                                                                       // 3528
		if ( typeof div.style.zoom !== core_strundefined ) {                                                                 // 3529
			// Support: IE<8                                                                                                    // 3530
			// Check if natively block-level elements act like inline-block                                                     // 3531
			// elements when setting their display to 'inline' and giving                                                       // 3532
			// them layout                                                                                                      // 3533
			div.innerHTML = "";                                                                                                 // 3534
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";                                       // 3535
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );                                                         // 3536
                                                                                                                       // 3537
			// Support: IE6                                                                                                     // 3538
			// Check if elements with layout shrink-wrap their children                                                         // 3539
			div.style.display = "block";                                                                                        // 3540
			div.innerHTML = "<div></div>";                                                                                      // 3541
			div.firstChild.style.width = "5px";                                                                                 // 3542
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );                                                               // 3543
                                                                                                                       // 3544
			if ( support.inlineBlockNeedsLayout ) {                                                                             // 3545
				// Prevent IE 6 from affecting layout for positioned elements #11048                                               // 3546
				// Prevent IE from shrinking the body in IE 7 mode #12869                                                          // 3547
				// Support: IE<8                                                                                                   // 3548
				body.style.zoom = 1;                                                                                               // 3549
			}                                                                                                                   // 3550
		}                                                                                                                    // 3551
                                                                                                                       // 3552
		body.removeChild( container );                                                                                       // 3553
                                                                                                                       // 3554
		// Null elements to avoid leaks in IE                                                                                // 3555
		container = div = tds = marginDiv = null;                                                                            // 3556
	});                                                                                                                   // 3557
                                                                                                                       // 3558
	// Null elements to avoid leaks in IE                                                                                 // 3559
	all = select = fragment = opt = a = input = null;                                                                     // 3560
                                                                                                                       // 3561
	return support;                                                                                                       // 3562
})({});                                                                                                                // 3563
                                                                                                                       // 3564
var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,                                                                           // 3565
	rmultiDash = /([A-Z])/g;                                                                                              // 3566
                                                                                                                       // 3567
function internalData( elem, name, data, pvt /* Internal Use Only */ ){                                                // 3568
	if ( !jQuery.acceptData( elem ) ) {                                                                                   // 3569
		return;                                                                                                              // 3570
	}                                                                                                                     // 3571
                                                                                                                       // 3572
	var ret, thisCache,                                                                                                   // 3573
		internalKey = jQuery.expando,                                                                                        // 3574
                                                                                                                       // 3575
		// We have to handle DOM nodes and JS objects differently because IE6-7                                              // 3576
		// can't GC object references properly across the DOM-JS boundary                                                    // 3577
		isNode = elem.nodeType,                                                                                              // 3578
                                                                                                                       // 3579
		// Only DOM nodes need the global jQuery cache; JS object data is                                                    // 3580
		// attached directly to the object so GC can occur automatically                                                     // 3581
		cache = isNode ? jQuery.cache : elem,                                                                                // 3582
                                                                                                                       // 3583
		// Only defining an ID for JS objects if its cache already exists allows                                             // 3584
		// the code to shortcut on the same path as a DOM node with no cache                                                 // 3585
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;                                              // 3586
                                                                                                                       // 3587
	// Avoid doing any more work than we need to when trying to get data on an                                            // 3588
	// object that has no data at all                                                                                     // 3589
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {           // 3590
		return;                                                                                                              // 3591
	}                                                                                                                     // 3592
                                                                                                                       // 3593
	if ( !id ) {                                                                                                          // 3594
		// Only DOM nodes need a new unique ID for each element since their data                                             // 3595
		// ends up in the global cache                                                                                       // 3596
		if ( isNode ) {                                                                                                      // 3597
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;                                                  // 3598
		} else {                                                                                                             // 3599
			id = internalKey;                                                                                                   // 3600
		}                                                                                                                    // 3601
	}                                                                                                                     // 3602
                                                                                                                       // 3603
	if ( !cache[ id ] ) {                                                                                                 // 3604
		// Avoid exposing jQuery metadata on plain JS objects when the object                                                // 3605
		// is serialized using JSON.stringify                                                                                // 3606
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };                                                                 // 3607
	}                                                                                                                     // 3608
                                                                                                                       // 3609
	// An object can be passed to jQuery.data instead of a key/value pair; this gets                                      // 3610
	// shallow copied over onto the existing cache                                                                        // 3611
	if ( typeof name === "object" || typeof name === "function" ) {                                                       // 3612
		if ( pvt ) {                                                                                                         // 3613
			cache[ id ] = jQuery.extend( cache[ id ], name );                                                                   // 3614
		} else {                                                                                                             // 3615
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );                                                         // 3616
		}                                                                                                                    // 3617
	}                                                                                                                     // 3618
                                                                                                                       // 3619
	thisCache = cache[ id ];                                                                                              // 3620
                                                                                                                       // 3621
	// jQuery data() is stored in a separate object inside the object's internal data                                     // 3622
	// cache in order to avoid key collisions between internal data and user-defined                                      // 3623
	// data.                                                                                                              // 3624
	if ( !pvt ) {                                                                                                         // 3625
		if ( !thisCache.data ) {                                                                                             // 3626
			thisCache.data = {};                                                                                                // 3627
		}                                                                                                                    // 3628
                                                                                                                       // 3629
		thisCache = thisCache.data;                                                                                          // 3630
	}                                                                                                                     // 3631
                                                                                                                       // 3632
	if ( data !== undefined ) {                                                                                           // 3633
		thisCache[ jQuery.camelCase( name ) ] = data;                                                                        // 3634
	}                                                                                                                     // 3635
                                                                                                                       // 3636
	// Check for both converted-to-camel and non-converted data property names                                            // 3637
	// If a data property was specified                                                                                   // 3638
	if ( typeof name === "string" ) {                                                                                     // 3639
                                                                                                                       // 3640
		// First Try to find as-is property data                                                                             // 3641
		ret = thisCache[ name ];                                                                                             // 3642
                                                                                                                       // 3643
		// Test for null|undefined property data                                                                             // 3644
		if ( ret == null ) {                                                                                                 // 3645
                                                                                                                       // 3646
			// Try to find the camelCased property                                                                              // 3647
			ret = thisCache[ jQuery.camelCase( name ) ];                                                                        // 3648
		}                                                                                                                    // 3649
	} else {                                                                                                              // 3650
		ret = thisCache;                                                                                                     // 3651
	}                                                                                                                     // 3652
                                                                                                                       // 3653
	return ret;                                                                                                           // 3654
}                                                                                                                      // 3655
                                                                                                                       // 3656
function internalRemoveData( elem, name, pvt ) {                                                                       // 3657
	if ( !jQuery.acceptData( elem ) ) {                                                                                   // 3658
		return;                                                                                                              // 3659
	}                                                                                                                     // 3660
                                                                                                                       // 3661
	var thisCache, i,                                                                                                     // 3662
		isNode = elem.nodeType,                                                                                              // 3663
                                                                                                                       // 3664
		// See jQuery.data for more information                                                                              // 3665
		cache = isNode ? jQuery.cache : elem,                                                                                // 3666
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;                                                               // 3667
                                                                                                                       // 3668
	// If there is already no cache entry for this object, there is no                                                    // 3669
	// purpose in continuing                                                                                              // 3670
	if ( !cache[ id ] ) {                                                                                                 // 3671
		return;                                                                                                              // 3672
	}                                                                                                                     // 3673
                                                                                                                       // 3674
	if ( name ) {                                                                                                         // 3675
                                                                                                                       // 3676
		thisCache = pvt ? cache[ id ] : cache[ id ].data;                                                                    // 3677
                                                                                                                       // 3678
		if ( thisCache ) {                                                                                                   // 3679
                                                                                                                       // 3680
			// Support array or space separated string names for data keys                                                      // 3681
			if ( !jQuery.isArray( name ) ) {                                                                                    // 3682
                                                                                                                       // 3683
				// try the string as a key before any manipulation                                                                 // 3684
				if ( name in thisCache ) {                                                                                         // 3685
					name = [ name ];                                                                                                  // 3686
				} else {                                                                                                           // 3687
                                                                                                                       // 3688
					// split the camel cased version by spaces unless a key with the spaces exists                                    // 3689
					name = jQuery.camelCase( name );                                                                                  // 3690
					if ( name in thisCache ) {                                                                                        // 3691
						name = [ name ];                                                                                                 // 3692
					} else {                                                                                                          // 3693
						name = name.split(" ");                                                                                          // 3694
					}                                                                                                                 // 3695
				}                                                                                                                  // 3696
			} else {                                                                                                            // 3697
				// If "name" is an array of keys...                                                                                // 3698
				// When data is initially created, via ("key", "val") signature,                                                   // 3699
				// keys will be converted to camelCase.                                                                            // 3700
				// Since there is no way to tell _how_ a key was added, remove                                                     // 3701
				// both plain key and camelCase key. #12786                                                                        // 3702
				// This will only penalize the array argument path.                                                                // 3703
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );                                                        // 3704
			}                                                                                                                   // 3705
                                                                                                                       // 3706
			i = name.length;                                                                                                    // 3707
			while ( i-- ) {                                                                                                     // 3708
				delete thisCache[ name[i] ];                                                                                       // 3709
			}                                                                                                                   // 3710
                                                                                                                       // 3711
			// If there is no data left in the cache, we want to continue                                                       // 3712
			// and let the cache object itself get destroyed                                                                    // 3713
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {                                     // 3714
				return;                                                                                                            // 3715
			}                                                                                                                   // 3716
		}                                                                                                                    // 3717
	}                                                                                                                     // 3718
                                                                                                                       // 3719
	// See jQuery.data for more information                                                                               // 3720
	if ( !pvt ) {                                                                                                         // 3721
		delete cache[ id ].data;                                                                                             // 3722
                                                                                                                       // 3723
		// Don't destroy the parent cache unless the internal data object                                                    // 3724
		// had been the only thing left in it                                                                                // 3725
		if ( !isEmptyDataObject( cache[ id ] ) ) {                                                                           // 3726
			return;                                                                                                             // 3727
		}                                                                                                                    // 3728
	}                                                                                                                     // 3729
                                                                                                                       // 3730
	// Destroy the cache                                                                                                  // 3731
	if ( isNode ) {                                                                                                       // 3732
		jQuery.cleanData( [ elem ], true );                                                                                  // 3733
                                                                                                                       // 3734
	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)                            // 3735
	/* jshint eqeqeq: false */                                                                                            // 3736
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {                                                 // 3737
		/* jshint eqeqeq: true */                                                                                            // 3738
		delete cache[ id ];                                                                                                  // 3739
                                                                                                                       // 3740
	// When all else fails, null                                                                                          // 3741
	} else {                                                                                                              // 3742
		cache[ id ] = null;                                                                                                  // 3743
	}                                                                                                                     // 3744
}                                                                                                                      // 3745
                                                                                                                       // 3746
jQuery.extend({                                                                                                        // 3747
	cache: {},                                                                                                            // 3748
                                                                                                                       // 3749
	// The following elements throw uncatchable exceptions if you                                                         // 3750
	// attempt to add expando properties to them.                                                                         // 3751
	noData: {                                                                                                             // 3752
		"applet": true,                                                                                                      // 3753
		"embed": true,                                                                                                       // 3754
		// Ban all objects except for Flash (which handle expandos)                                                          // 3755
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"                                                               // 3756
	},                                                                                                                    // 3757
                                                                                                                       // 3758
	hasData: function( elem ) {                                                                                           // 3759
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];                                // 3760
		return !!elem && !isEmptyDataObject( elem );                                                                         // 3761
	},                                                                                                                    // 3762
                                                                                                                       // 3763
	data: function( elem, name, data ) {                                                                                  // 3764
		return internalData( elem, name, data );                                                                             // 3765
	},                                                                                                                    // 3766
                                                                                                                       // 3767
	removeData: function( elem, name ) {                                                                                  // 3768
		return internalRemoveData( elem, name );                                                                             // 3769
	},                                                                                                                    // 3770
                                                                                                                       // 3771
	// For internal use only.                                                                                             // 3772
	_data: function( elem, name, data ) {                                                                                 // 3773
		return internalData( elem, name, data, true );                                                                       // 3774
	},                                                                                                                    // 3775
                                                                                                                       // 3776
	_removeData: function( elem, name ) {                                                                                 // 3777
		return internalRemoveData( elem, name, true );                                                                       // 3778
	},                                                                                                                    // 3779
                                                                                                                       // 3780
	// A method for determining if a DOM node can handle the data expando                                                 // 3781
	acceptData: function( elem ) {                                                                                        // 3782
		// Do not set data on non-element because it will not be cleared (#8335).                                            // 3783
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {                                                 // 3784
			return false;                                                                                                       // 3785
		}                                                                                                                    // 3786
                                                                                                                       // 3787
		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];                                          // 3788
                                                                                                                       // 3789
		// nodes accept data unless otherwise specified; rejection can be conditional                                        // 3790
		return !noData || noData !== true && elem.getAttribute("classid") === noData;                                        // 3791
	}                                                                                                                     // 3792
});                                                                                                                    // 3793
                                                                                                                       // 3794
jQuery.fn.extend({                                                                                                     // 3795
	data: function( key, value ) {                                                                                        // 3796
		var attrs, name,                                                                                                     // 3797
			data = null,                                                                                                        // 3798
			i = 0,                                                                                                              // 3799
			elem = this[0];                                                                                                     // 3800
                                                                                                                       // 3801
		// Special expections of .data basically thwart jQuery.access,                                                       // 3802
		// so implement the relevant behavior ourselves                                                                      // 3803
                                                                                                                       // 3804
		// Gets all values                                                                                                   // 3805
		if ( key === undefined ) {                                                                                           // 3806
			if ( this.length ) {                                                                                                // 3807
				data = jQuery.data( elem );                                                                                        // 3808
                                                                                                                       // 3809
				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {                                               // 3810
					attrs = elem.attributes;                                                                                          // 3811
					for ( ; i < attrs.length; i++ ) {                                                                                 // 3812
						name = attrs[i].name;                                                                                            // 3813
                                                                                                                       // 3814
						if ( name.indexOf("data-") === 0 ) {                                                                             // 3815
							name = jQuery.camelCase( name.slice(5) );                                                                       // 3816
                                                                                                                       // 3817
							dataAttr( elem, name, data[ name ] );                                                                           // 3818
						}                                                                                                                // 3819
					}                                                                                                                 // 3820
					jQuery._data( elem, "parsedAttrs", true );                                                                        // 3821
				}                                                                                                                  // 3822
			}                                                                                                                   // 3823
                                                                                                                       // 3824
			return data;                                                                                                        // 3825
		}                                                                                                                    // 3826
                                                                                                                       // 3827
		// Sets multiple values                                                                                              // 3828
		if ( typeof key === "object" ) {                                                                                     // 3829
			return this.each(function() {                                                                                       // 3830
				jQuery.data( this, key );                                                                                          // 3831
			});                                                                                                                 // 3832
		}                                                                                                                    // 3833
                                                                                                                       // 3834
		return arguments.length > 1 ?                                                                                        // 3835
                                                                                                                       // 3836
			// Sets one value                                                                                                   // 3837
			this.each(function() {                                                                                              // 3838
				jQuery.data( this, key, value );                                                                                   // 3839
			}) :                                                                                                                // 3840
                                                                                                                       // 3841
			// Gets one value                                                                                                   // 3842
			// Try to fetch any internally stored data first                                                                    // 3843
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;                                                      // 3844
	},                                                                                                                    // 3845
                                                                                                                       // 3846
	removeData: function( key ) {                                                                                         // 3847
		return this.each(function() {                                                                                        // 3848
			jQuery.removeData( this, key );                                                                                     // 3849
		});                                                                                                                  // 3850
	}                                                                                                                     // 3851
});                                                                                                                    // 3852
                                                                                                                       // 3853
function dataAttr( elem, key, data ) {                                                                                 // 3854
	// If nothing was found internally, try to fetch any                                                                  // 3855
	// data from the HTML5 data-* attribute                                                                               // 3856
	if ( data === undefined && elem.nodeType === 1 ) {                                                                    // 3857
                                                                                                                       // 3858
		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();                                                 // 3859
                                                                                                                       // 3860
		data = elem.getAttribute( name );                                                                                    // 3861
                                                                                                                       // 3862
		if ( typeof data === "string" ) {                                                                                    // 3863
			try {                                                                                                               // 3864
				data = data === "true" ? true :                                                                                    // 3865
					data === "false" ? false :                                                                                        // 3866
					data === "null" ? null :                                                                                          // 3867
					// Only convert to a number if it doesn't change the string                                                       // 3868
					+data + "" === data ? +data :                                                                                     // 3869
					rbrace.test( data ) ? jQuery.parseJSON( data ) :                                                                  // 3870
						data;                                                                                                            // 3871
			} catch( e ) {}                                                                                                     // 3872
                                                                                                                       // 3873
			// Make sure we set the data so it isn't changed later                                                              // 3874
			jQuery.data( elem, key, data );                                                                                     // 3875
                                                                                                                       // 3876
		} else {                                                                                                             // 3877
			data = undefined;                                                                                                   // 3878
		}                                                                                                                    // 3879
	}                                                                                                                     // 3880
                                                                                                                       // 3881
	return data;                                                                                                          // 3882
}                                                                                                                      // 3883
                                                                                                                       // 3884
// checks a cache object for emptiness                                                                                 // 3885
function isEmptyDataObject( obj ) {                                                                                    // 3886
	var name;                                                                                                             // 3887
	for ( name in obj ) {                                                                                                 // 3888
                                                                                                                       // 3889
		// if the public data object is empty, the private is still empty                                                    // 3890
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {                                                        // 3891
			continue;                                                                                                           // 3892
		}                                                                                                                    // 3893
		if ( name !== "toJSON" ) {                                                                                           // 3894
			return false;                                                                                                       // 3895
		}                                                                                                                    // 3896
	}                                                                                                                     // 3897
                                                                                                                       // 3898
	return true;                                                                                                          // 3899
}                                                                                                                      // 3900
jQuery.extend({                                                                                                        // 3901
	queue: function( elem, type, data ) {                                                                                 // 3902
		var queue;                                                                                                           // 3903
                                                                                                                       // 3904
		if ( elem ) {                                                                                                        // 3905
			type = ( type || "fx" ) + "queue";                                                                                  // 3906
			queue = jQuery._data( elem, type );                                                                                 // 3907
                                                                                                                       // 3908
			// Speed up dequeue by getting out quickly if this is just a lookup                                                 // 3909
			if ( data ) {                                                                                                       // 3910
				if ( !queue || jQuery.isArray(data) ) {                                                                            // 3911
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );                                                       // 3912
				} else {                                                                                                           // 3913
					queue.push( data );                                                                                               // 3914
				}                                                                                                                  // 3915
			}                                                                                                                   // 3916
			return queue || [];                                                                                                 // 3917
		}                                                                                                                    // 3918
	},                                                                                                                    // 3919
                                                                                                                       // 3920
	dequeue: function( elem, type ) {                                                                                     // 3921
		type = type || "fx";                                                                                                 // 3922
                                                                                                                       // 3923
		var queue = jQuery.queue( elem, type ),                                                                              // 3924
			startLength = queue.length,                                                                                         // 3925
			fn = queue.shift(),                                                                                                 // 3926
			hooks = jQuery._queueHooks( elem, type ),                                                                           // 3927
			next = function() {                                                                                                 // 3928
				jQuery.dequeue( elem, type );                                                                                      // 3929
			};                                                                                                                  // 3930
                                                                                                                       // 3931
		// If the fx queue is dequeued, always remove the progress sentinel                                                  // 3932
		if ( fn === "inprogress" ) {                                                                                         // 3933
			fn = queue.shift();                                                                                                 // 3934
			startLength--;                                                                                                      // 3935
		}                                                                                                                    // 3936
                                                                                                                       // 3937
		if ( fn ) {                                                                                                          // 3938
                                                                                                                       // 3939
			// Add a progress sentinel to prevent the fx queue from being                                                       // 3940
			// automatically dequeued                                                                                           // 3941
			if ( type === "fx" ) {                                                                                              // 3942
				queue.unshift( "inprogress" );                                                                                     // 3943
			}                                                                                                                   // 3944
                                                                                                                       // 3945
			// clear up the last queue stop function                                                                            // 3946
			delete hooks.stop;                                                                                                  // 3947
			fn.call( elem, next, hooks );                                                                                       // 3948
		}                                                                                                                    // 3949
                                                                                                                       // 3950
		if ( !startLength && hooks ) {                                                                                       // 3951
			hooks.empty.fire();                                                                                                 // 3952
		}                                                                                                                    // 3953
	},                                                                                                                    // 3954
                                                                                                                       // 3955
	// not intended for public consumption - generates a queueHooks object, or returns the current one                    // 3956
	_queueHooks: function( elem, type ) {                                                                                 // 3957
		var key = type + "queueHooks";                                                                                       // 3958
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {                                                       // 3959
			empty: jQuery.Callbacks("once memory").add(function() {                                                             // 3960
				jQuery._removeData( elem, type + "queue" );                                                                        // 3961
				jQuery._removeData( elem, key );                                                                                   // 3962
			})                                                                                                                  // 3963
		});                                                                                                                  // 3964
	}                                                                                                                     // 3965
});                                                                                                                    // 3966
                                                                                                                       // 3967
jQuery.fn.extend({                                                                                                     // 3968
	queue: function( type, data ) {                                                                                       // 3969
		var setter = 2;                                                                                                      // 3970
                                                                                                                       // 3971
		if ( typeof type !== "string" ) {                                                                                    // 3972
			data = type;                                                                                                        // 3973
			type = "fx";                                                                                                        // 3974
			setter--;                                                                                                           // 3975
		}                                                                                                                    // 3976
                                                                                                                       // 3977
		if ( arguments.length < setter ) {                                                                                   // 3978
			return jQuery.queue( this[0], type );                                                                               // 3979
		}                                                                                                                    // 3980
                                                                                                                       // 3981
		return data === undefined ?                                                                                          // 3982
			this :                                                                                                              // 3983
			this.each(function() {                                                                                              // 3984
				var queue = jQuery.queue( this, type, data );                                                                      // 3985
                                                                                                                       // 3986
				// ensure a hooks for this queue                                                                                   // 3987
				jQuery._queueHooks( this, type );                                                                                  // 3988
                                                                                                                       // 3989
				if ( type === "fx" && queue[0] !== "inprogress" ) {                                                                // 3990
					jQuery.dequeue( this, type );                                                                                     // 3991
				}                                                                                                                  // 3992
			});                                                                                                                 // 3993
	},                                                                                                                    // 3994
	dequeue: function( type ) {                                                                                           // 3995
		return this.each(function() {                                                                                        // 3996
			jQuery.dequeue( this, type );                                                                                       // 3997
		});                                                                                                                  // 3998
	},                                                                                                                    // 3999
	// Based off of the plugin by Clint Helfers, with permission.                                                         // 4000
	// http://blindsignals.com/index.php/2009/07/jquery-delay/                                                            // 4001
	delay: function( time, type ) {                                                                                       // 4002
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;                                                          // 4003
		type = type || "fx";                                                                                                 // 4004
                                                                                                                       // 4005
		return this.queue( type, function( next, hooks ) {                                                                   // 4006
			var timeout = setTimeout( next, time );                                                                             // 4007
			hooks.stop = function() {                                                                                           // 4008
				clearTimeout( timeout );                                                                                           // 4009
			};                                                                                                                  // 4010
		});                                                                                                                  // 4011
	},                                                                                                                    // 4012
	clearQueue: function( type ) {                                                                                        // 4013
		return this.queue( type || "fx", [] );                                                                               // 4014
	},                                                                                                                    // 4015
	// Get a promise resolved when queues of a certain type                                                               // 4016
	// are emptied (fx is the type by default)                                                                            // 4017
	promise: function( type, obj ) {                                                                                      // 4018
		var tmp,                                                                                                             // 4019
			count = 1,                                                                                                          // 4020
			defer = jQuery.Deferred(),                                                                                          // 4021
			elements = this,                                                                                                    // 4022
			i = this.length,                                                                                                    // 4023
			resolve = function() {                                                                                              // 4024
				if ( !( --count ) ) {                                                                                              // 4025
					defer.resolveWith( elements, [ elements ] );                                                                      // 4026
				}                                                                                                                  // 4027
			};                                                                                                                  // 4028
                                                                                                                       // 4029
		if ( typeof type !== "string" ) {                                                                                    // 4030
			obj = type;                                                                                                         // 4031
			type = undefined;                                                                                                   // 4032
		}                                                                                                                    // 4033
		type = type || "fx";                                                                                                 // 4034
                                                                                                                       // 4035
		while( i-- ) {                                                                                                       // 4036
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );                                                           // 4037
			if ( tmp && tmp.empty ) {                                                                                           // 4038
				count++;                                                                                                           // 4039
				tmp.empty.add( resolve );                                                                                          // 4040
			}                                                                                                                   // 4041
		}                                                                                                                    // 4042
		resolve();                                                                                                           // 4043
		return defer.promise( obj );                                                                                         // 4044
	}                                                                                                                     // 4045
});                                                                                                                    // 4046
var nodeHook, boolHook,                                                                                                // 4047
	rclass = /[\t\r\n\f]/g,                                                                                               // 4048
	rreturn = /\r/g,                                                                                                      // 4049
	rfocusable = /^(?:input|select|textarea|button|object)$/i,                                                            // 4050
	rclickable = /^(?:a|area)$/i,                                                                                         // 4051
	ruseDefault = /^(?:checked|selected)$/i,                                                                              // 4052
	getSetAttribute = jQuery.support.getSetAttribute,                                                                     // 4053
	getSetInput = jQuery.support.input;                                                                                   // 4054
                                                                                                                       // 4055
jQuery.fn.extend({                                                                                                     // 4056
	attr: function( name, value ) {                                                                                       // 4057
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );                                        // 4058
	},                                                                                                                    // 4059
                                                                                                                       // 4060
	removeAttr: function( name ) {                                                                                        // 4061
		return this.each(function() {                                                                                        // 4062
			jQuery.removeAttr( this, name );                                                                                    // 4063
		});                                                                                                                  // 4064
	},                                                                                                                    // 4065
                                                                                                                       // 4066
	prop: function( name, value ) {                                                                                       // 4067
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );                                        // 4068
	},                                                                                                                    // 4069
                                                                                                                       // 4070
	removeProp: function( name ) {                                                                                        // 4071
		name = jQuery.propFix[ name ] || name;                                                                               // 4072
		return this.each(function() {                                                                                        // 4073
			// try/catch handles cases where IE balks (such as removing a property on window)                                   // 4074
			try {                                                                                                               // 4075
				this[ name ] = undefined;                                                                                          // 4076
				delete this[ name ];                                                                                               // 4077
			} catch( e ) {}                                                                                                     // 4078
		});                                                                                                                  // 4079
	},                                                                                                                    // 4080
                                                                                                                       // 4081
	addClass: function( value ) {                                                                                         // 4082
		var classes, elem, cur, clazz, j,                                                                                    // 4083
			i = 0,                                                                                                              // 4084
			len = this.length,                                                                                                  // 4085
			proceed = typeof value === "string" && value;                                                                       // 4086
                                                                                                                       // 4087
		if ( jQuery.isFunction( value ) ) {                                                                                  // 4088
			return this.each(function( j ) {                                                                                    // 4089
				jQuery( this ).addClass( value.call( this, j, this.className ) );                                                  // 4090
			});                                                                                                                 // 4091
		}                                                                                                                    // 4092
                                                                                                                       // 4093
		if ( proceed ) {                                                                                                     // 4094
			// The disjunction here is for better compressibility (see removeClass)                                             // 4095
			classes = ( value || "" ).match( core_rnotwhite ) || [];                                                            // 4096
                                                                                                                       // 4097
			for ( ; i < len; i++ ) {                                                                                            // 4098
				elem = this[ i ];                                                                                                  // 4099
				cur = elem.nodeType === 1 && ( elem.className ?                                                                    // 4100
					( " " + elem.className + " " ).replace( rclass, " " ) :                                                           // 4101
					" "                                                                                                               // 4102
				);                                                                                                                 // 4103
                                                                                                                       // 4104
				if ( cur ) {                                                                                                       // 4105
					j = 0;                                                                                                            // 4106
					while ( (clazz = classes[j++]) ) {                                                                                // 4107
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {                                                                    // 4108
							cur += clazz + " ";                                                                                             // 4109
						}                                                                                                                // 4110
					}                                                                                                                 // 4111
					elem.className = jQuery.trim( cur );                                                                              // 4112
                                                                                                                       // 4113
				}                                                                                                                  // 4114
			}                                                                                                                   // 4115
		}                                                                                                                    // 4116
                                                                                                                       // 4117
		return this;                                                                                                         // 4118
	},                                                                                                                    // 4119
                                                                                                                       // 4120
	removeClass: function( value ) {                                                                                      // 4121
		var classes, elem, cur, clazz, j,                                                                                    // 4122
			i = 0,                                                                                                              // 4123
			len = this.length,                                                                                                  // 4124
			proceed = arguments.length === 0 || typeof value === "string" && value;                                             // 4125
                                                                                                                       // 4126
		if ( jQuery.isFunction( value ) ) {                                                                                  // 4127
			return this.each(function( j ) {                                                                                    // 4128
				jQuery( this ).removeClass( value.call( this, j, this.className ) );                                               // 4129
			});                                                                                                                 // 4130
		}                                                                                                                    // 4131
		if ( proceed ) {                                                                                                     // 4132
			classes = ( value || "" ).match( core_rnotwhite ) || [];                                                            // 4133
                                                                                                                       // 4134
			for ( ; i < len; i++ ) {                                                                                            // 4135
				elem = this[ i ];                                                                                                  // 4136
				// This expression is here for better compressibility (see addClass)                                               // 4137
				cur = elem.nodeType === 1 && ( elem.className ?                                                                    // 4138
					( " " + elem.className + " " ).replace( rclass, " " ) :                                                           // 4139
					""                                                                                                                // 4140
				);                                                                                                                 // 4141
                                                                                                                       // 4142
				if ( cur ) {                                                                                                       // 4143
					j = 0;                                                                                                            // 4144
					while ( (clazz = classes[j++]) ) {                                                                                // 4145
						// Remove *all* instances                                                                                        // 4146
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {                                                                // 4147
							cur = cur.replace( " " + clazz + " ", " " );                                                                    // 4148
						}                                                                                                                // 4149
					}                                                                                                                 // 4150
					elem.className = value ? jQuery.trim( cur ) : "";                                                                 // 4151
				}                                                                                                                  // 4152
			}                                                                                                                   // 4153
		}                                                                                                                    // 4154
                                                                                                                       // 4155
		return this;                                                                                                         // 4156
	},                                                                                                                    // 4157
                                                                                                                       // 4158
	toggleClass: function( value, stateVal ) {                                                                            // 4159
		var type = typeof value;                                                                                             // 4160
                                                                                                                       // 4161
		if ( typeof stateVal === "boolean" && type === "string" ) {                                                          // 4162
			return stateVal ? this.addClass( value ) : this.removeClass( value );                                               // 4163
		}                                                                                                                    // 4164
                                                                                                                       // 4165
		if ( jQuery.isFunction( value ) ) {                                                                                  // 4166
			return this.each(function( i ) {                                                                                    // 4167
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );                             // 4168
			});                                                                                                                 // 4169
		}                                                                                                                    // 4170
                                                                                                                       // 4171
		return this.each(function() {                                                                                        // 4172
			if ( type === "string" ) {                                                                                          // 4173
				// toggle individual class names                                                                                   // 4174
				var className,                                                                                                     // 4175
					i = 0,                                                                                                            // 4176
					self = jQuery( this ),                                                                                            // 4177
					classNames = value.match( core_rnotwhite ) || [];                                                                 // 4178
                                                                                                                       // 4179
				while ( (className = classNames[ i++ ]) ) {                                                                        // 4180
					// check each className given, space separated list                                                               // 4181
					if ( self.hasClass( className ) ) {                                                                               // 4182
						self.removeClass( className );                                                                                   // 4183
					} else {                                                                                                          // 4184
						self.addClass( className );                                                                                      // 4185
					}                                                                                                                 // 4186
				}                                                                                                                  // 4187
                                                                                                                       // 4188
			// Toggle whole class name                                                                                          // 4189
			} else if ( type === core_strundefined || type === "boolean" ) {                                                    // 4190
				if ( this.className ) {                                                                                            // 4191
					// store className if set                                                                                         // 4192
					jQuery._data( this, "__className__", this.className );                                                            // 4193
				}                                                                                                                  // 4194
                                                                                                                       // 4195
				// If the element has a class name or if we're passed "false",                                                     // 4196
				// then remove the whole classname (if there was one, the above saved it).                                         // 4197
				// Otherwise bring back whatever was previously saved (if anything),                                               // 4198
				// falling back to the empty string if nothing was stored.                                                         // 4199
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";             // 4200
			}                                                                                                                   // 4201
		});                                                                                                                  // 4202
	},                                                                                                                    // 4203
                                                                                                                       // 4204
	hasClass: function( selector ) {                                                                                      // 4205
		var className = " " + selector + " ",                                                                                // 4206
			i = 0,                                                                                                              // 4207
			l = this.length;                                                                                                    // 4208
		for ( ; i < l; i++ ) {                                                                                               // 4209
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {   // 4210
				return true;                                                                                                       // 4211
			}                                                                                                                   // 4212
		}                                                                                                                    // 4213
                                                                                                                       // 4214
		return false;                                                                                                        // 4215
	},                                                                                                                    // 4216
                                                                                                                       // 4217
	val: function( value ) {                                                                                              // 4218
		var ret, hooks, isFunction,                                                                                          // 4219
			elem = this[0];                                                                                                     // 4220
                                                                                                                       // 4221
		if ( !arguments.length ) {                                                                                           // 4222
			if ( elem ) {                                                                                                       // 4223
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];                            // 4224
                                                                                                                       // 4225
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {                               // 4226
					return ret;                                                                                                       // 4227
				}                                                                                                                  // 4228
                                                                                                                       // 4229
				ret = elem.value;                                                                                                  // 4230
                                                                                                                       // 4231
				return typeof ret === "string" ?                                                                                   // 4232
					// handle most common string cases                                                                                // 4233
					ret.replace(rreturn, "") :                                                                                        // 4234
					// handle cases where value is null/undef or number                                                               // 4235
					ret == null ? "" : ret;                                                                                           // 4236
			}                                                                                                                   // 4237
                                                                                                                       // 4238
			return;                                                                                                             // 4239
		}                                                                                                                    // 4240
                                                                                                                       // 4241
		isFunction = jQuery.isFunction( value );                                                                             // 4242
                                                                                                                       // 4243
		return this.each(function( i ) {                                                                                     // 4244
			var val;                                                                                                            // 4245
                                                                                                                       // 4246
			if ( this.nodeType !== 1 ) {                                                                                        // 4247
				return;                                                                                                            // 4248
			}                                                                                                                   // 4249
                                                                                                                       // 4250
			if ( isFunction ) {                                                                                                 // 4251
				val = value.call( this, i, jQuery( this ).val() );                                                                 // 4252
			} else {                                                                                                            // 4253
				val = value;                                                                                                       // 4254
			}                                                                                                                   // 4255
                                                                                                                       // 4256
			// Treat null/undefined as ""; convert numbers to string                                                            // 4257
			if ( val == null ) {                                                                                                // 4258
				val = "";                                                                                                          // 4259
			} else if ( typeof val === "number" ) {                                                                             // 4260
				val += "";                                                                                                         // 4261
			} else if ( jQuery.isArray( val ) ) {                                                                               // 4262
				val = jQuery.map(val, function ( value ) {                                                                         // 4263
					return value == null ? "" : value + "";                                                                           // 4264
				});                                                                                                                // 4265
			}                                                                                                                   // 4266
                                                                                                                       // 4267
			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];                             // 4268
                                                                                                                       // 4269
			// If set returns undefined, fall back to normal setting                                                            // 4270
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {                               // 4271
				this.value = val;                                                                                                  // 4272
			}                                                                                                                   // 4273
		});                                                                                                                  // 4274
	}                                                                                                                     // 4275
});                                                                                                                    // 4276
                                                                                                                       // 4277
jQuery.extend({                                                                                                        // 4278
	valHooks: {                                                                                                           // 4279
		option: {                                                                                                            // 4280
			get: function( elem ) {                                                                                             // 4281
				// Use proper attribute retrieval(#6932, #12072)                                                                   // 4282
				var val = jQuery.find.attr( elem, "value" );                                                                       // 4283
				return val != null ?                                                                                               // 4284
					val :                                                                                                             // 4285
					elem.text;                                                                                                        // 4286
			}                                                                                                                   // 4287
		},                                                                                                                   // 4288
		select: {                                                                                                            // 4289
			get: function( elem ) {                                                                                             // 4290
				var value, option,                                                                                                 // 4291
					options = elem.options,                                                                                           // 4292
					index = elem.selectedIndex,                                                                                       // 4293
					one = elem.type === "select-one" || index < 0,                                                                    // 4294
					values = one ? null : [],                                                                                         // 4295
					max = one ? index + 1 : options.length,                                                                           // 4296
					i = index < 0 ?                                                                                                   // 4297
						max :                                                                                                            // 4298
						one ? index : 0;                                                                                                 // 4299
                                                                                                                       // 4300
				// Loop through all the selected options                                                                           // 4301
				for ( ; i < max; i++ ) {                                                                                           // 4302
					option = options[ i ];                                                                                            // 4303
                                                                                                                       // 4304
					// oldIE doesn't update selected after form reset (#2551)                                                         // 4305
					if ( ( option.selected || i === index ) &&                                                                        // 4306
							// Don't return options that are disabled or in a disabled optgroup                                             // 4307
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&                 // 4308
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {                        // 4309
                                                                                                                       // 4310
						// Get the specific value for the option                                                                         // 4311
						value = jQuery( option ).val();                                                                                  // 4312
                                                                                                                       // 4313
						// We don't need an array for one selects                                                                        // 4314
						if ( one ) {                                                                                                     // 4315
							return value;                                                                                                   // 4316
						}                                                                                                                // 4317
                                                                                                                       // 4318
						// Multi-Selects return an array                                                                                 // 4319
						values.push( value );                                                                                            // 4320
					}                                                                                                                 // 4321
				}                                                                                                                  // 4322
                                                                                                                       // 4323
				return values;                                                                                                     // 4324
			},                                                                                                                  // 4325
                                                                                                                       // 4326
			set: function( elem, value ) {                                                                                      // 4327
				var optionSet, option,                                                                                             // 4328
					options = elem.options,                                                                                           // 4329
					values = jQuery.makeArray( value ),                                                                               // 4330
					i = options.length;                                                                                               // 4331
                                                                                                                       // 4332
				while ( i-- ) {                                                                                                    // 4333
					option = options[ i ];                                                                                            // 4334
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {                                  // 4335
						optionSet = true;                                                                                                // 4336
					}                                                                                                                 // 4337
				}                                                                                                                  // 4338
                                                                                                                       // 4339
				// force browsers to behave consistently when non-matching value is set                                            // 4340
				if ( !optionSet ) {                                                                                                // 4341
					elem.selectedIndex = -1;                                                                                          // 4342
				}                                                                                                                  // 4343
				return values;                                                                                                     // 4344
			}                                                                                                                   // 4345
		}                                                                                                                    // 4346
	},                                                                                                                    // 4347
                                                                                                                       // 4348
	attr: function( elem, name, value ) {                                                                                 // 4349
		var hooks, ret,                                                                                                      // 4350
			nType = elem.nodeType;                                                                                              // 4351
                                                                                                                       // 4352
		// don't get/set attributes on text, comment and attribute nodes                                                     // 4353
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                          // 4354
			return;                                                                                                             // 4355
		}                                                                                                                    // 4356
                                                                                                                       // 4357
		// Fallback to prop when attributes are not supported                                                                // 4358
		if ( typeof elem.getAttribute === core_strundefined ) {                                                              // 4359
			return jQuery.prop( elem, name, value );                                                                            // 4360
		}                                                                                                                    // 4361
                                                                                                                       // 4362
		// All attributes are lowercase                                                                                      // 4363
		// Grab necessary hook if one is defined                                                                             // 4364
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {                                                                     // 4365
			name = name.toLowerCase();                                                                                          // 4366
			hooks = jQuery.attrHooks[ name ] ||                                                                                 // 4367
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );                                                     // 4368
		}                                                                                                                    // 4369
                                                                                                                       // 4370
		if ( value !== undefined ) {                                                                                         // 4371
                                                                                                                       // 4372
			if ( value === null ) {                                                                                             // 4373
				jQuery.removeAttr( elem, name );                                                                                   // 4374
                                                                                                                       // 4375
			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {                     // 4376
				return ret;                                                                                                        // 4377
                                                                                                                       // 4378
			} else {                                                                                                            // 4379
				elem.setAttribute( name, value + "" );                                                                             // 4380
				return value;                                                                                                      // 4381
			}                                                                                                                   // 4382
                                                                                                                       // 4383
		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {                                  // 4384
			return ret;                                                                                                         // 4385
                                                                                                                       // 4386
		} else {                                                                                                             // 4387
			ret = jQuery.find.attr( elem, name );                                                                               // 4388
                                                                                                                       // 4389
			// Non-existent attributes return null, we normalize to undefined                                                   // 4390
			return ret == null ?                                                                                                // 4391
				undefined :                                                                                                        // 4392
				ret;                                                                                                               // 4393
		}                                                                                                                    // 4394
	},                                                                                                                    // 4395
                                                                                                                       // 4396
	removeAttr: function( elem, value ) {                                                                                 // 4397
		var name, propName,                                                                                                  // 4398
			i = 0,                                                                                                              // 4399
			attrNames = value && value.match( core_rnotwhite );                                                                 // 4400
                                                                                                                       // 4401
		if ( attrNames && elem.nodeType === 1 ) {                                                                            // 4402
			while ( (name = attrNames[i++]) ) {                                                                                 // 4403
				propName = jQuery.propFix[ name ] || name;                                                                         // 4404
                                                                                                                       // 4405
				// Boolean attributes get special treatment (#10870)                                                               // 4406
				if ( jQuery.expr.match.bool.test( name ) ) {                                                                       // 4407
					// Set corresponding property to false                                                                            // 4408
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                              // 4409
						elem[ propName ] = false;                                                                                        // 4410
					// Support: IE<9                                                                                                  // 4411
					// Also clear defaultChecked/defaultSelected (if appropriate)                                                     // 4412
					} else {                                                                                                          // 4413
						elem[ jQuery.camelCase( "default-" + name ) ] =                                                                  // 4414
							elem[ propName ] = false;                                                                                       // 4415
					}                                                                                                                 // 4416
                                                                                                                       // 4417
				// See #9699 for explanation of this approach (setting first, then removal)                                        // 4418
				} else {                                                                                                           // 4419
					jQuery.attr( elem, name, "" );                                                                                    // 4420
				}                                                                                                                  // 4421
                                                                                                                       // 4422
				elem.removeAttribute( getSetAttribute ? name : propName );                                                         // 4423
			}                                                                                                                   // 4424
		}                                                                                                                    // 4425
	},                                                                                                                    // 4426
                                                                                                                       // 4427
	attrHooks: {                                                                                                          // 4428
		type: {                                                                                                              // 4429
			set: function( elem, value ) {                                                                                      // 4430
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {                         // 4431
					// Setting the type on a radio button after the value resets the value in IE6-9                                   // 4432
					// Reset value to default in case type is set after value during creation                                         // 4433
					var val = elem.value;                                                                                             // 4434
					elem.setAttribute( "type", value );                                                                               // 4435
					if ( val ) {                                                                                                      // 4436
						elem.value = val;                                                                                                // 4437
					}                                                                                                                 // 4438
					return value;                                                                                                     // 4439
				}                                                                                                                  // 4440
			}                                                                                                                   // 4441
		}                                                                                                                    // 4442
	},                                                                                                                    // 4443
                                                                                                                       // 4444
	propFix: {                                                                                                            // 4445
		"for": "htmlFor",                                                                                                    // 4446
		"class": "className"                                                                                                 // 4447
	},                                                                                                                    // 4448
                                                                                                                       // 4449
	prop: function( elem, name, value ) {                                                                                 // 4450
		var ret, hooks, notxml,                                                                                              // 4451
			nType = elem.nodeType;                                                                                              // 4452
                                                                                                                       // 4453
		// don't get/set properties on text, comment and attribute nodes                                                     // 4454
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                          // 4455
			return;                                                                                                             // 4456
		}                                                                                                                    // 4457
                                                                                                                       // 4458
		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );                                                                    // 4459
                                                                                                                       // 4460
		if ( notxml ) {                                                                                                      // 4461
			// Fix name and attach hooks                                                                                        // 4462
			name = jQuery.propFix[ name ] || name;                                                                              // 4463
			hooks = jQuery.propHooks[ name ];                                                                                   // 4464
		}                                                                                                                    // 4465
                                                                                                                       // 4466
		if ( value !== undefined ) {                                                                                         // 4467
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?                            // 4468
				ret :                                                                                                              // 4469
				( elem[ name ] = value );                                                                                          // 4470
                                                                                                                       // 4471
		} else {                                                                                                             // 4472
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?                                        // 4473
				ret :                                                                                                              // 4474
				elem[ name ];                                                                                                      // 4475
		}                                                                                                                    // 4476
	},                                                                                                                    // 4477
                                                                                                                       // 4478
	propHooks: {                                                                                                          // 4479
		tabIndex: {                                                                                                          // 4480
			get: function( elem ) {                                                                                             // 4481
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set                        // 4482
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/           // 4483
				// Use proper attribute retrieval(#12072)                                                                          // 4484
				var tabindex = jQuery.find.attr( elem, "tabindex" );                                                               // 4485
                                                                                                                       // 4486
				return tabindex ?                                                                                                  // 4487
					parseInt( tabindex, 10 ) :                                                                                        // 4488
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?                               // 4489
						0 :                                                                                                              // 4490
						-1;                                                                                                              // 4491
			}                                                                                                                   // 4492
		}                                                                                                                    // 4493
	}                                                                                                                     // 4494
});                                                                                                                    // 4495
                                                                                                                       // 4496
// Hooks for boolean attributes                                                                                        // 4497
boolHook = {                                                                                                           // 4498
	set: function( elem, value, name ) {                                                                                  // 4499
		if ( value === false ) {                                                                                             // 4500
			// Remove boolean attributes when set to false                                                                      // 4501
			jQuery.removeAttr( elem, name );                                                                                    // 4502
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                          // 4503
			// IE<8 needs the *property* name                                                                                   // 4504
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );                                      // 4505
                                                                                                                       // 4506
		// Use defaultChecked and defaultSelected for oldIE                                                                  // 4507
		} else {                                                                                                             // 4508
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;                                                // 4509
		}                                                                                                                    // 4510
                                                                                                                       // 4511
		return name;                                                                                                         // 4512
	}                                                                                                                     // 4513
};                                                                                                                     // 4514
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {                                      // 4515
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;                                                      // 4516
                                                                                                                       // 4517
	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?                        // 4518
		function( elem, name, isXML ) {                                                                                      // 4519
			var fn = jQuery.expr.attrHandle[ name ],                                                                            // 4520
				ret = isXML ?                                                                                                      // 4521
					undefined :                                                                                                       // 4522
					/* jshint eqeqeq: false */                                                                                        // 4523
					(jQuery.expr.attrHandle[ name ] = undefined) !=                                                                   // 4524
						getter( elem, name, isXML ) ?                                                                                    // 4525
                                                                                                                       // 4526
						name.toLowerCase() :                                                                                             // 4527
						null;                                                                                                            // 4528
			jQuery.expr.attrHandle[ name ] = fn;                                                                                // 4529
			return ret;                                                                                                         // 4530
		} :                                                                                                                  // 4531
		function( elem, name, isXML ) {                                                                                      // 4532
			return isXML ?                                                                                                      // 4533
				undefined :                                                                                                        // 4534
				elem[ jQuery.camelCase( "default-" + name ) ] ?                                                                    // 4535
					name.toLowerCase() :                                                                                              // 4536
					null;                                                                                                             // 4537
		};                                                                                                                   // 4538
});                                                                                                                    // 4539
                                                                                                                       // 4540
// fix oldIE attroperties                                                                                              // 4541
if ( !getSetInput || !getSetAttribute ) {                                                                              // 4542
	jQuery.attrHooks.value = {                                                                                            // 4543
		set: function( elem, value, name ) {                                                                                 // 4544
			if ( jQuery.nodeName( elem, "input" ) ) {                                                                           // 4545
				// Does not return so that setAttribute is also used                                                               // 4546
				elem.defaultValue = value;                                                                                         // 4547
			} else {                                                                                                            // 4548
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine                                                 // 4549
				return nodeHook && nodeHook.set( elem, value, name );                                                              // 4550
			}                                                                                                                   // 4551
		}                                                                                                                    // 4552
	};                                                                                                                    // 4553
}                                                                                                                      // 4554
                                                                                                                       // 4555
// IE6/7 do not support getting/setting some attributes with get/setAttribute                                          // 4556
if ( !getSetAttribute ) {                                                                                              // 4557
                                                                                                                       // 4558
	// Use this for any attribute in IE6/7                                                                                // 4559
	// This fixes almost every IE6/7 issue                                                                                // 4560
	nodeHook = {                                                                                                          // 4561
		set: function( elem, value, name ) {                                                                                 // 4562
			// Set the existing or create a new attribute node                                                                  // 4563
			var ret = elem.getAttributeNode( name );                                                                            // 4564
			if ( !ret ) {                                                                                                       // 4565
				elem.setAttributeNode(                                                                                             // 4566
					(ret = elem.ownerDocument.createAttribute( name ))                                                                // 4567
				);                                                                                                                 // 4568
			}                                                                                                                   // 4569
                                                                                                                       // 4570
			ret.value = value += "";                                                                                            // 4571
                                                                                                                       // 4572
			// Break association with cloned elements by also using setAttribute (#9646)                                        // 4573
			return name === "value" || value === elem.getAttribute( name ) ?                                                    // 4574
				value :                                                                                                            // 4575
				undefined;                                                                                                         // 4576
		}                                                                                                                    // 4577
	};                                                                                                                    // 4578
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =                             // 4579
		// Some attributes are constructed with empty-string values when not defined                                         // 4580
		function( elem, name, isXML ) {                                                                                      // 4581
			var ret;                                                                                                            // 4582
			return isXML ?                                                                                                      // 4583
				undefined :                                                                                                        // 4584
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?                                                        // 4585
					ret.value :                                                                                                       // 4586
					null;                                                                                                             // 4587
		};                                                                                                                   // 4588
	jQuery.valHooks.button = {                                                                                            // 4589
		get: function( elem, name ) {                                                                                        // 4590
			var ret = elem.getAttributeNode( name );                                                                            // 4591
			return ret && ret.specified ?                                                                                       // 4592
				ret.value :                                                                                                        // 4593
				undefined;                                                                                                         // 4594
		},                                                                                                                   // 4595
		set: nodeHook.set                                                                                                    // 4596
	};                                                                                                                    // 4597
                                                                                                                       // 4598
	// Set contenteditable to false on removals(#10429)                                                                   // 4599
	// Setting to empty string throws an error as an invalid value                                                        // 4600
	jQuery.attrHooks.contenteditable = {                                                                                  // 4601
		set: function( elem, value, name ) {                                                                                 // 4602
			nodeHook.set( elem, value === "" ? false : value, name );                                                           // 4603
		}                                                                                                                    // 4604
	};                                                                                                                    // 4605
                                                                                                                       // 4606
	// Set width and height to auto instead of 0 on empty string( Bug #8150 )                                             // 4607
	// This is for removals                                                                                               // 4608
	jQuery.each([ "width", "height" ], function( i, name ) {                                                              // 4609
		jQuery.attrHooks[ name ] = {                                                                                         // 4610
			set: function( elem, value ) {                                                                                      // 4611
				if ( value === "" ) {                                                                                              // 4612
					elem.setAttribute( name, "auto" );                                                                                // 4613
					return value;                                                                                                     // 4614
				}                                                                                                                  // 4615
			}                                                                                                                   // 4616
		};                                                                                                                   // 4617
	});                                                                                                                   // 4618
}                                                                                                                      // 4619
                                                                                                                       // 4620
                                                                                                                       // 4621
// Some attributes require a special call on IE                                                                        // 4622
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                    // 4623
if ( !jQuery.support.hrefNormalized ) {                                                                                // 4624
	// href/src property should get the full normalized URL (#10299/#12915)                                               // 4625
	jQuery.each([ "href", "src" ], function( i, name ) {                                                                  // 4626
		jQuery.propHooks[ name ] = {                                                                                         // 4627
			get: function( elem ) {                                                                                             // 4628
				return elem.getAttribute( name, 4 );                                                                               // 4629
			}                                                                                                                   // 4630
		};                                                                                                                   // 4631
	});                                                                                                                   // 4632
}                                                                                                                      // 4633
                                                                                                                       // 4634
if ( !jQuery.support.style ) {                                                                                         // 4635
	jQuery.attrHooks.style = {                                                                                            // 4636
		get: function( elem ) {                                                                                              // 4637
			// Return undefined in the case of empty string                                                                     // 4638
			// Note: IE uppercases css property names, but if we were to .toLowerCase()                                         // 4639
			// .cssText, that would destroy case senstitivity in URL's, like in "background"                                    // 4640
			return elem.style.cssText || undefined;                                                                             // 4641
		},                                                                                                                   // 4642
		set: function( elem, value ) {                                                                                       // 4643
			return ( elem.style.cssText = value + "" );                                                                         // 4644
		}                                                                                                                    // 4645
	};                                                                                                                    // 4646
}                                                                                                                      // 4647
                                                                                                                       // 4648
// Safari mis-reports the default selected property of an option                                                       // 4649
// Accessing the parent's selectedIndex property fixes it                                                              // 4650
if ( !jQuery.support.optSelected ) {                                                                                   // 4651
	jQuery.propHooks.selected = {                                                                                         // 4652
		get: function( elem ) {                                                                                              // 4653
			var parent = elem.parentNode;                                                                                       // 4654
                                                                                                                       // 4655
			if ( parent ) {                                                                                                     // 4656
				parent.selectedIndex;                                                                                              // 4657
                                                                                                                       // 4658
				// Make sure that it also works with optgroups, see #5701                                                          // 4659
				if ( parent.parentNode ) {                                                                                         // 4660
					parent.parentNode.selectedIndex;                                                                                  // 4661
				}                                                                                                                  // 4662
			}                                                                                                                   // 4663
			return null;                                                                                                        // 4664
		}                                                                                                                    // 4665
	};                                                                                                                    // 4666
}                                                                                                                      // 4667
                                                                                                                       // 4668
jQuery.each([                                                                                                          // 4669
	"tabIndex",                                                                                                           // 4670
	"readOnly",                                                                                                           // 4671
	"maxLength",                                                                                                          // 4672
	"cellSpacing",                                                                                                        // 4673
	"cellPadding",                                                                                                        // 4674
	"rowSpan",                                                                                                            // 4675
	"colSpan",                                                                                                            // 4676
	"useMap",                                                                                                             // 4677
	"frameBorder",                                                                                                        // 4678
	"contentEditable"                                                                                                     // 4679
], function() {                                                                                                        // 4680
	jQuery.propFix[ this.toLowerCase() ] = this;                                                                          // 4681
});                                                                                                                    // 4682
                                                                                                                       // 4683
// IE6/7 call enctype encoding                                                                                         // 4684
if ( !jQuery.support.enctype ) {                                                                                       // 4685
	jQuery.propFix.enctype = "encoding";                                                                                  // 4686
}                                                                                                                      // 4687
                                                                                                                       // 4688
// Radios and checkboxes getter/setter                                                                                 // 4689
jQuery.each([ "radio", "checkbox" ], function() {                                                                      // 4690
	jQuery.valHooks[ this ] = {                                                                                           // 4691
		set: function( elem, value ) {                                                                                       // 4692
			if ( jQuery.isArray( value ) ) {                                                                                    // 4693
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );                                        // 4694
			}                                                                                                                   // 4695
		}                                                                                                                    // 4696
	};                                                                                                                    // 4697
	if ( !jQuery.support.checkOn ) {                                                                                      // 4698
		jQuery.valHooks[ this ].get = function( elem ) {                                                                     // 4699
			// Support: Webkit                                                                                                  // 4700
			// "" is returned instead of "on" if a value isn't specified                                                        // 4701
			return elem.getAttribute("value") === null ? "on" : elem.value;                                                     // 4702
		};                                                                                                                   // 4703
	}                                                                                                                     // 4704
});                                                                                                                    // 4705
var rformElems = /^(?:input|select|textarea)$/i,                                                                       // 4706
	rkeyEvent = /^key/,                                                                                                   // 4707
	rmouseEvent = /^(?:mouse|contextmenu)|click/,                                                                         // 4708
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,                                                                      // 4709
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;                                                                              // 4710
                                                                                                                       // 4711
function returnTrue() {                                                                                                // 4712
	return true;                                                                                                          // 4713
}                                                                                                                      // 4714
                                                                                                                       // 4715
function returnFalse() {                                                                                               // 4716
	return false;                                                                                                         // 4717
}                                                                                                                      // 4718
                                                                                                                       // 4719
function safeActiveElement() {                                                                                         // 4720
	try {                                                                                                                 // 4721
		return document.activeElement;                                                                                       // 4722
	} catch ( err ) { }                                                                                                   // 4723
}                                                                                                                      // 4724
                                                                                                                       // 4725
/*                                                                                                                     // 4726
 * Helper functions for managing events -- not part of the public interface.                                           // 4727
 * Props to Dean Edwards' addEvent library for many of the ideas.                                                      // 4728
 */                                                                                                                    // 4729
jQuery.event = {                                                                                                       // 4730
                                                                                                                       // 4731
	global: {},                                                                                                           // 4732
                                                                                                                       // 4733
	add: function( elem, types, handler, data, selector ) {                                                               // 4734
		var tmp, events, t, handleObjIn,                                                                                     // 4735
			special, eventHandle, handleObj,                                                                                    // 4736
			handlers, type, namespaces, origType,                                                                               // 4737
			elemData = jQuery._data( elem );                                                                                    // 4738
                                                                                                                       // 4739
		// Don't attach events to noData or text/comment nodes (but allow plain objects)                                     // 4740
		if ( !elemData ) {                                                                                                   // 4741
			return;                                                                                                             // 4742
		}                                                                                                                    // 4743
                                                                                                                       // 4744
		// Caller can pass in an object of custom data in lieu of the handler                                                // 4745
		if ( handler.handler ) {                                                                                             // 4746
			handleObjIn = handler;                                                                                              // 4747
			handler = handleObjIn.handler;                                                                                      // 4748
			selector = handleObjIn.selector;                                                                                    // 4749
		}                                                                                                                    // 4750
                                                                                                                       // 4751
		// Make sure that the handler has a unique ID, used to find/remove it later                                          // 4752
		if ( !handler.guid ) {                                                                                               // 4753
			handler.guid = jQuery.guid++;                                                                                       // 4754
		}                                                                                                                    // 4755
                                                                                                                       // 4756
		// Init the element's event structure and main handler, if this is the first                                         // 4757
		if ( !(events = elemData.events) ) {                                                                                 // 4758
			events = elemData.events = {};                                                                                      // 4759
		}                                                                                                                    // 4760
		if ( !(eventHandle = elemData.handle) ) {                                                                            // 4761
			eventHandle = elemData.handle = function( e ) {                                                                     // 4762
				// Discard the second event of a jQuery.event.trigger() and                                                        // 4763
				// when an event is called after a page has unloaded                                                               // 4764
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?                          // 4765
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :                                                      // 4766
					undefined;                                                                                                        // 4767
			};                                                                                                                  // 4768
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events                       // 4769
			eventHandle.elem = elem;                                                                                            // 4770
		}                                                                                                                    // 4771
                                                                                                                       // 4772
		// Handle multiple events separated by a space                                                                       // 4773
		types = ( types || "" ).match( core_rnotwhite ) || [""];                                                             // 4774
		t = types.length;                                                                                                    // 4775
		while ( t-- ) {                                                                                                      // 4776
			tmp = rtypenamespace.exec( types[t] ) || [];                                                                        // 4777
			type = origType = tmp[1];                                                                                           // 4778
			namespaces = ( tmp[2] || "" ).split( "." ).sort();                                                                  // 4779
                                                                                                                       // 4780
			// There *must* be a type, no attaching namespace-only handlers                                                     // 4781
			if ( !type ) {                                                                                                      // 4782
				continue;                                                                                                          // 4783
			}                                                                                                                   // 4784
                                                                                                                       // 4785
			// If event changes its type, use the special event handlers for the changed type                                   // 4786
			special = jQuery.event.special[ type ] || {};                                                                       // 4787
                                                                                                                       // 4788
			// If selector defined, determine special event api type, otherwise given type                                      // 4789
			type = ( selector ? special.delegateType : special.bindType ) || type;                                              // 4790
                                                                                                                       // 4791
			// Update special based on newly reset type                                                                         // 4792
			special = jQuery.event.special[ type ] || {};                                                                       // 4793
                                                                                                                       // 4794
			// handleObj is passed to all event handlers                                                                        // 4795
			handleObj = jQuery.extend({                                                                                         // 4796
				type: type,                                                                                                        // 4797
				origType: origType,                                                                                                // 4798
				data: data,                                                                                                        // 4799
				handler: handler,                                                                                                  // 4800
				guid: handler.guid,                                                                                                // 4801
				selector: selector,                                                                                                // 4802
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),                                         // 4803
				namespace: namespaces.join(".")                                                                                    // 4804
			}, handleObjIn );                                                                                                   // 4805
                                                                                                                       // 4806
			// Init the event handler queue if we're the first                                                                  // 4807
			if ( !(handlers = events[ type ]) ) {                                                                               // 4808
				handlers = events[ type ] = [];                                                                                    // 4809
				handlers.delegateCount = 0;                                                                                        // 4810
                                                                                                                       // 4811
				// Only use addEventListener/attachEvent if the special events handler returns false                               // 4812
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {                     // 4813
					// Bind the global event handler to the element                                                                   // 4814
					if ( elem.addEventListener ) {                                                                                    // 4815
						elem.addEventListener( type, eventHandle, false );                                                               // 4816
                                                                                                                       // 4817
					} else if ( elem.attachEvent ) {                                                                                  // 4818
						elem.attachEvent( "on" + type, eventHandle );                                                                    // 4819
					}                                                                                                                 // 4820
				}                                                                                                                  // 4821
			}                                                                                                                   // 4822
                                                                                                                       // 4823
			if ( special.add ) {                                                                                                // 4824
				special.add.call( elem, handleObj );                                                                               // 4825
                                                                                                                       // 4826
				if ( !handleObj.handler.guid ) {                                                                                   // 4827
					handleObj.handler.guid = handler.guid;                                                                            // 4828
				}                                                                                                                  // 4829
			}                                                                                                                   // 4830
                                                                                                                       // 4831
			// Add to the element's handler list, delegates in front                                                            // 4832
			if ( selector ) {                                                                                                   // 4833
				handlers.splice( handlers.delegateCount++, 0, handleObj );                                                         // 4834
			} else {                                                                                                            // 4835
				handlers.push( handleObj );                                                                                        // 4836
			}                                                                                                                   // 4837
                                                                                                                       // 4838
			// Keep track of which events have ever been used, for event optimization                                           // 4839
			jQuery.event.global[ type ] = true;                                                                                 // 4840
		}                                                                                                                    // 4841
                                                                                                                       // 4842
		// Nullify elem to prevent memory leaks in IE                                                                        // 4843
		elem = null;                                                                                                         // 4844
	},                                                                                                                    // 4845
                                                                                                                       // 4846
	// Detach an event or set of events from an element                                                                   // 4847
	remove: function( elem, types, handler, selector, mappedTypes ) {                                                     // 4848
		var j, handleObj, tmp,                                                                                               // 4849
			origCount, t, events,                                                                                               // 4850
			special, handlers, type,                                                                                            // 4851
			namespaces, origType,                                                                                               // 4852
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );                                                          // 4853
                                                                                                                       // 4854
		if ( !elemData || !(events = elemData.events) ) {                                                                    // 4855
			return;                                                                                                             // 4856
		}                                                                                                                    // 4857
                                                                                                                       // 4858
		// Once for each type.namespace in types; type may be omitted                                                        // 4859
		types = ( types || "" ).match( core_rnotwhite ) || [""];                                                             // 4860
		t = types.length;                                                                                                    // 4861
		while ( t-- ) {                                                                                                      // 4862
			tmp = rtypenamespace.exec( types[t] ) || [];                                                                        // 4863
			type = origType = tmp[1];                                                                                           // 4864
			namespaces = ( tmp[2] || "" ).split( "." ).sort();                                                                  // 4865
                                                                                                                       // 4866
			// Unbind all events (on this namespace, if provided) for the element                                               // 4867
			if ( !type ) {                                                                                                      // 4868
				for ( type in events ) {                                                                                           // 4869
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );                                          // 4870
				}                                                                                                                  // 4871
				continue;                                                                                                          // 4872
			}                                                                                                                   // 4873
                                                                                                                       // 4874
			special = jQuery.event.special[ type ] || {};                                                                       // 4875
			type = ( selector ? special.delegateType : special.bindType ) || type;                                              // 4876
			handlers = events[ type ] || [];                                                                                    // 4877
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );                             // 4878
                                                                                                                       // 4879
			// Remove matching events                                                                                           // 4880
			origCount = j = handlers.length;                                                                                    // 4881
			while ( j-- ) {                                                                                                     // 4882
				handleObj = handlers[ j ];                                                                                         // 4883
                                                                                                                       // 4884
				if ( ( mappedTypes || origType === handleObj.origType ) &&                                                         // 4885
					( !handler || handler.guid === handleObj.guid ) &&                                                                // 4886
					( !tmp || tmp.test( handleObj.namespace ) ) &&                                                                    // 4887
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {                   // 4888
					handlers.splice( j, 1 );                                                                                          // 4889
                                                                                                                       // 4890
					if ( handleObj.selector ) {                                                                                       // 4891
						handlers.delegateCount--;                                                                                        // 4892
					}                                                                                                                 // 4893
					if ( special.remove ) {                                                                                           // 4894
						special.remove.call( elem, handleObj );                                                                          // 4895
					}                                                                                                                 // 4896
				}                                                                                                                  // 4897
			}                                                                                                                   // 4898
                                                                                                                       // 4899
			// Remove generic event handler if we removed something and no more handlers exist                                  // 4900
			// (avoids potential for endless recursion during removal of special event handlers)                                // 4901
			if ( origCount && !handlers.length ) {                                                                              // 4902
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {                 // 4903
					jQuery.removeEvent( elem, type, elemData.handle );                                                                // 4904
				}                                                                                                                  // 4905
                                                                                                                       // 4906
				delete events[ type ];                                                                                             // 4907
			}                                                                                                                   // 4908
		}                                                                                                                    // 4909
                                                                                                                       // 4910
		// Remove the expando if it's no longer used                                                                         // 4911
		if ( jQuery.isEmptyObject( events ) ) {                                                                              // 4912
			delete elemData.handle;                                                                                             // 4913
                                                                                                                       // 4914
			// removeData also checks for emptiness and clears the expando if empty                                             // 4915
			// so use it instead of delete                                                                                      // 4916
			jQuery._removeData( elem, "events" );                                                                               // 4917
		}                                                                                                                    // 4918
	},                                                                                                                    // 4919
                                                                                                                       // 4920
	trigger: function( event, data, elem, onlyHandlers ) {                                                                // 4921
		var handle, ontype, cur,                                                                                             // 4922
			bubbleType, special, tmp, i,                                                                                        // 4923
			eventPath = [ elem || document ],                                                                                   // 4924
			type = core_hasOwn.call( event, "type" ) ? event.type : event,                                                      // 4925
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];                              // 4926
                                                                                                                       // 4927
		cur = tmp = elem = elem || document;                                                                                 // 4928
                                                                                                                       // 4929
		// Don't do events on text and comment nodes                                                                         // 4930
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {                                                                  // 4931
			return;                                                                                                             // 4932
		}                                                                                                                    // 4933
                                                                                                                       // 4934
		// focus/blur morphs to focusin/out; ensure we're not firing them right now                                          // 4935
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {                                                           // 4936
			return;                                                                                                             // 4937
		}                                                                                                                    // 4938
                                                                                                                       // 4939
		if ( type.indexOf(".") >= 0 ) {                                                                                      // 4940
			// Namespaced trigger; create a regexp to match event type in handle()                                              // 4941
			namespaces = type.split(".");                                                                                       // 4942
			type = namespaces.shift();                                                                                          // 4943
			namespaces.sort();                                                                                                  // 4944
		}                                                                                                                    // 4945
		ontype = type.indexOf(":") < 0 && "on" + type;                                                                       // 4946
                                                                                                                       // 4947
		// Caller can pass in a jQuery.Event object, Object, or just an event type string                                    // 4948
		event = event[ jQuery.expando ] ?                                                                                    // 4949
			event :                                                                                                             // 4950
			new jQuery.Event( type, typeof event === "object" && event );                                                       // 4951
                                                                                                                       // 4952
		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)                                            // 4953
		event.isTrigger = onlyHandlers ? 2 : 3;                                                                              // 4954
		event.namespace = namespaces.join(".");                                                                              // 4955
		event.namespace_re = event.namespace ?                                                                               // 4956
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :                                            // 4957
			null;                                                                                                               // 4958
                                                                                                                       // 4959
		// Clean up the event in case it is being reused                                                                     // 4960
		event.result = undefined;                                                                                            // 4961
		if ( !event.target ) {                                                                                               // 4962
			event.target = elem;                                                                                                // 4963
		}                                                                                                                    // 4964
                                                                                                                       // 4965
		// Clone any incoming data and prepend the event, creating the handler arg list                                      // 4966
		data = data == null ?                                                                                                // 4967
			[ event ] :                                                                                                         // 4968
			jQuery.makeArray( data, [ event ] );                                                                                // 4969
                                                                                                                       // 4970
		// Allow special events to draw outside the lines                                                                    // 4971
		special = jQuery.event.special[ type ] || {};                                                                        // 4972
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {                           // 4973
			return;                                                                                                             // 4974
		}                                                                                                                    // 4975
                                                                                                                       // 4976
		// Determine event propagation path in advance, per W3C events spec (#9951)                                          // 4977
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)                               // 4978
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {                                              // 4979
                                                                                                                       // 4980
			bubbleType = special.delegateType || type;                                                                          // 4981
			if ( !rfocusMorph.test( bubbleType + type ) ) {                                                                     // 4982
				cur = cur.parentNode;                                                                                              // 4983
			}                                                                                                                   // 4984
			for ( ; cur; cur = cur.parentNode ) {                                                                               // 4985
				eventPath.push( cur );                                                                                             // 4986
				tmp = cur;                                                                                                         // 4987
			}                                                                                                                   // 4988
                                                                                                                       // 4989
			// Only add window if we got to document (e.g., not plain obj or detached DOM)                                      // 4990
			if ( tmp === (elem.ownerDocument || document) ) {                                                                   // 4991
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );                                                   // 4992
			}                                                                                                                   // 4993
		}                                                                                                                    // 4994
                                                                                                                       // 4995
		// Fire handlers on the event path                                                                                   // 4996
		i = 0;                                                                                                               // 4997
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {                                                  // 4998
                                                                                                                       // 4999
			event.type = i > 1 ?                                                                                                // 5000
				bubbleType :                                                                                                       // 5001
				special.bindType || type;                                                                                          // 5002
                                                                                                                       // 5003
			// jQuery handler                                                                                                   // 5004
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );                    // 5005
			if ( handle ) {                                                                                                     // 5006
				handle.apply( cur, data );                                                                                         // 5007
			}                                                                                                                   // 5008
                                                                                                                       // 5009
			// Native handler                                                                                                   // 5010
			handle = ontype && cur[ ontype ];                                                                                   // 5011
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {                  // 5012
				event.preventDefault();                                                                                            // 5013
			}                                                                                                                   // 5014
		}                                                                                                                    // 5015
		event.type = type;                                                                                                   // 5016
                                                                                                                       // 5017
		// If nobody prevented the default action, do it now                                                                 // 5018
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {                                                                // 5019
                                                                                                                       // 5020
			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&                            // 5021
				jQuery.acceptData( elem ) ) {                                                                                      // 5022
                                                                                                                       // 5023
				// Call a native DOM method on the target with the same name name as the event.                                    // 5024
				// Can't use an .isFunction() check here because IE6/7 fails that test.                                            // 5025
				// Don't do default actions on window, that's where global variables be (#6170)                                    // 5026
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {                                                        // 5027
                                                                                                                       // 5028
					// Don't re-trigger an onFOO event when we call its FOO() method                                                  // 5029
					tmp = elem[ ontype ];                                                                                             // 5030
                                                                                                                       // 5031
					if ( tmp ) {                                                                                                      // 5032
						elem[ ontype ] = null;                                                                                           // 5033
					}                                                                                                                 // 5034
                                                                                                                       // 5035
					// Prevent re-triggering of the same event, since we already bubbled it above                                     // 5036
					jQuery.event.triggered = type;                                                                                    // 5037
					try {                                                                                                             // 5038
						elem[ type ]();                                                                                                  // 5039
					} catch ( e ) {                                                                                                   // 5040
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)                                                      // 5041
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode                                                    // 5042
					}                                                                                                                 // 5043
					jQuery.event.triggered = undefined;                                                                               // 5044
                                                                                                                       // 5045
					if ( tmp ) {                                                                                                      // 5046
						elem[ ontype ] = tmp;                                                                                            // 5047
					}                                                                                                                 // 5048
				}                                                                                                                  // 5049
			}                                                                                                                   // 5050
		}                                                                                                                    // 5051
                                                                                                                       // 5052
		return event.result;                                                                                                 // 5053
	},                                                                                                                    // 5054
                                                                                                                       // 5055
	dispatch: function( event ) {                                                                                         // 5056
                                                                                                                       // 5057
		// Make a writable jQuery.Event from the native event object                                                         // 5058
		event = jQuery.event.fix( event );                                                                                   // 5059
                                                                                                                       // 5060
		var i, ret, handleObj, matched, j,                                                                                   // 5061
			handlerQueue = [],                                                                                                  // 5062
			args = core_slice.call( arguments ),                                                                                // 5063
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],                                            // 5064
			special = jQuery.event.special[ event.type ] || {};                                                                 // 5065
                                                                                                                       // 5066
		// Use the fix-ed jQuery.Event rather than the (read-only) native event                                              // 5067
		args[0] = event;                                                                                                     // 5068
		event.delegateTarget = this;                                                                                         // 5069
                                                                                                                       // 5070
		// Call the preDispatch hook for the mapped type, and let it bail if desired                                         // 5071
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {                                    // 5072
			return;                                                                                                             // 5073
		}                                                                                                                    // 5074
                                                                                                                       // 5075
		// Determine handlers                                                                                                // 5076
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );                                                  // 5077
                                                                                                                       // 5078
		// Run delegates first; they may want to stop propagation beneath us                                                 // 5079
		i = 0;                                                                                                               // 5080
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {                                         // 5081
			event.currentTarget = matched.elem;                                                                                 // 5082
                                                                                                                       // 5083
			j = 0;                                                                                                              // 5084
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {                         // 5085
                                                                                                                       // 5086
				// Triggered event must either 1) have no namespace, or                                                            // 5087
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).                // 5088
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {                                     // 5089
                                                                                                                       // 5090
					event.handleObj = handleObj;                                                                                      // 5091
					event.data = handleObj.data;                                                                                      // 5092
                                                                                                                       // 5093
					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )                          // 5094
							.apply( matched.elem, args );                                                                                   // 5095
                                                                                                                       // 5096
					if ( ret !== undefined ) {                                                                                        // 5097
						if ( (event.result = ret) === false ) {                                                                          // 5098
							event.preventDefault();                                                                                         // 5099
							event.stopPropagation();                                                                                        // 5100
						}                                                                                                                // 5101
					}                                                                                                                 // 5102
				}                                                                                                                  // 5103
			}                                                                                                                   // 5104
		}                                                                                                                    // 5105
                                                                                                                       // 5106
		// Call the postDispatch hook for the mapped type                                                                    // 5107
		if ( special.postDispatch ) {                                                                                        // 5108
			special.postDispatch.call( this, event );                                                                           // 5109
		}                                                                                                                    // 5110
                                                                                                                       // 5111
		return event.result;                                                                                                 // 5112
	},                                                                                                                    // 5113
                                                                                                                       // 5114
	handlers: function( event, handlers ) {                                                                               // 5115
		var sel, handleObj, matches, i,                                                                                      // 5116
			handlerQueue = [],                                                                                                  // 5117
			delegateCount = handlers.delegateCount,                                                                             // 5118
			cur = event.target;                                                                                                 // 5119
                                                                                                                       // 5120
		// Find delegate handlers                                                                                            // 5121
		// Black-hole SVG <use> instance trees (#13180)                                                                      // 5122
		// Avoid non-left-click bubbling in Firefox (#3861)                                                                  // 5123
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {                                  // 5124
                                                                                                                       // 5125
			/* jshint eqeqeq: false */                                                                                          // 5126
			for ( ; cur != this; cur = cur.parentNode || this ) {                                                               // 5127
				/* jshint eqeqeq: true */                                                                                          // 5128
                                                                                                                       // 5129
				// Don't check non-elements (#13208)                                                                               // 5130
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)                                        // 5131
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {                                   // 5132
					matches = [];                                                                                                     // 5133
					for ( i = 0; i < delegateCount; i++ ) {                                                                           // 5134
						handleObj = handlers[ i ];                                                                                       // 5135
                                                                                                                       // 5136
						// Don't conflict with Object.prototype properties (#13203)                                                      // 5137
						sel = handleObj.selector + " ";                                                                                  // 5138
                                                                                                                       // 5139
						if ( matches[ sel ] === undefined ) {                                                                            // 5140
							matches[ sel ] = handleObj.needsContext ?                                                                       // 5141
								jQuery( sel, this ).index( cur ) >= 0 :                                                                        // 5142
								jQuery.find( sel, this, null, [ cur ] ).length;                                                                // 5143
						}                                                                                                                // 5144
						if ( matches[ sel ] ) {                                                                                          // 5145
							matches.push( handleObj );                                                                                      // 5146
						}                                                                                                                // 5147
					}                                                                                                                 // 5148
					if ( matches.length ) {                                                                                           // 5149
						handlerQueue.push({ elem: cur, handlers: matches });                                                             // 5150
					}                                                                                                                 // 5151
				}                                                                                                                  // 5152
			}                                                                                                                   // 5153
		}                                                                                                                    // 5154
                                                                                                                       // 5155
		// Add the remaining (directly-bound) handlers                                                                       // 5156
		if ( delegateCount < handlers.length ) {                                                                             // 5157
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });                                       // 5158
		}                                                                                                                    // 5159
                                                                                                                       // 5160
		return handlerQueue;                                                                                                 // 5161
	},                                                                                                                    // 5162
                                                                                                                       // 5163
	fix: function( event ) {                                                                                              // 5164
		if ( event[ jQuery.expando ] ) {                                                                                     // 5165
			return event;                                                                                                       // 5166
		}                                                                                                                    // 5167
                                                                                                                       // 5168
		// Create a writable copy of the event object and normalize some properties                                          // 5169
		var i, prop, copy,                                                                                                   // 5170
			type = event.type,                                                                                                  // 5171
			originalEvent = event,                                                                                              // 5172
			fixHook = this.fixHooks[ type ];                                                                                    // 5173
                                                                                                                       // 5174
		if ( !fixHook ) {                                                                                                    // 5175
			this.fixHooks[ type ] = fixHook =                                                                                   // 5176
				rmouseEvent.test( type ) ? this.mouseHooks :                                                                       // 5177
				rkeyEvent.test( type ) ? this.keyHooks :                                                                           // 5178
				{};                                                                                                                // 5179
		}                                                                                                                    // 5180
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;                                              // 5181
                                                                                                                       // 5182
		event = new jQuery.Event( originalEvent );                                                                           // 5183
                                                                                                                       // 5184
		i = copy.length;                                                                                                     // 5185
		while ( i-- ) {                                                                                                      // 5186
			prop = copy[ i ];                                                                                                   // 5187
			event[ prop ] = originalEvent[ prop ];                                                                              // 5188
		}                                                                                                                    // 5189
                                                                                                                       // 5190
		// Support: IE<9                                                                                                     // 5191
		// Fix target property (#1925)                                                                                       // 5192
		if ( !event.target ) {                                                                                               // 5193
			event.target = originalEvent.srcElement || document;                                                                // 5194
		}                                                                                                                    // 5195
                                                                                                                       // 5196
		// Support: Chrome 23+, Safari?                                                                                      // 5197
		// Target should not be a text node (#504, #13143)                                                                   // 5198
		if ( event.target.nodeType === 3 ) {                                                                                 // 5199
			event.target = event.target.parentNode;                                                                             // 5200
		}                                                                                                                    // 5201
                                                                                                                       // 5202
		// Support: IE<9                                                                                                     // 5203
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)                                            // 5204
		event.metaKey = !!event.metaKey;                                                                                     // 5205
                                                                                                                       // 5206
		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;                                              // 5207
	},                                                                                                                    // 5208
                                                                                                                       // 5209
	// Includes some event props shared by KeyEvent and MouseEvent                                                        // 5210
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                                                                                                                       // 5212
	fixHooks: {},                                                                                                         // 5213
                                                                                                                       // 5214
	keyHooks: {                                                                                                           // 5215
		props: "char charCode key keyCode".split(" "),                                                                       // 5216
		filter: function( event, original ) {                                                                                // 5217
                                                                                                                       // 5218
			// Add which for key events                                                                                         // 5219
			if ( event.which == null ) {                                                                                        // 5220
				event.which = original.charCode != null ? original.charCode : original.keyCode;                                    // 5221
			}                                                                                                                   // 5222
                                                                                                                       // 5223
			return event;                                                                                                       // 5224
		}                                                                                                                    // 5225
	},                                                                                                                    // 5226
                                                                                                                       // 5227
	mouseHooks: {                                                                                                         // 5228
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {                                                                                // 5230
			var body, eventDoc, doc,                                                                                            // 5231
				button = original.button,                                                                                          // 5232
				fromElement = original.fromElement;                                                                                // 5233
                                                                                                                       // 5234
			// Calculate pageX/Y if missing and clientX/Y available                                                             // 5235
			if ( event.pageX == null && original.clientX != null ) {                                                            // 5236
				eventDoc = event.target.ownerDocument || document;                                                                 // 5237
				doc = eventDoc.documentElement;                                                                                    // 5238
				body = eventDoc.body;                                                                                              // 5239
                                                                                                                       // 5240
				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}                                                                                                                   // 5243
                                                                                                                       // 5244
			// Add relatedTarget, if necessary                                                                                  // 5245
			if ( !event.relatedTarget && fromElement ) {                                                                        // 5246
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;                             // 5247
			}                                                                                                                   // 5248
                                                                                                                       // 5249
			// Add which for click: 1 === left; 2 === middle; 3 === right                                                       // 5250
			// Note: button is not normalized, so don't use it                                                                  // 5251
			if ( !event.which && button !== undefined ) {                                                                       // 5252
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );                                    // 5253
			}                                                                                                                   // 5254
                                                                                                                       // 5255
			return event;                                                                                                       // 5256
		}                                                                                                                    // 5257
	},                                                                                                                    // 5258
                                                                                                                       // 5259
	special: {                                                                                                            // 5260
		load: {                                                                                                              // 5261
			// Prevent triggered image.load events from bubbling to window.load                                                 // 5262
			noBubble: true                                                                                                      // 5263
		},                                                                                                                   // 5264
		focus: {                                                                                                             // 5265
			// Fire native event if possible so blur/focus sequence is correct                                                  // 5266
			trigger: function() {                                                                                               // 5267
				if ( this !== safeActiveElement() && this.focus ) {                                                                // 5268
					try {                                                                                                             // 5269
						this.focus();                                                                                                    // 5270
						return false;                                                                                                    // 5271
					} catch ( e ) {                                                                                                   // 5272
						// Support: IE<9                                                                                                 // 5273
						// If we error on focus to hidden element (#1486, #12518),                                                       // 5274
						// let .trigger() run the handlers                                                                               // 5275
					}                                                                                                                 // 5276
				}                                                                                                                  // 5277
			},                                                                                                                  // 5278
			delegateType: "focusin"                                                                                             // 5279
		},                                                                                                                   // 5280
		blur: {                                                                                                              // 5281
			trigger: function() {                                                                                               // 5282
				if ( this === safeActiveElement() && this.blur ) {                                                                 // 5283
					this.blur();                                                                                                      // 5284
					return false;                                                                                                     // 5285
				}                                                                                                                  // 5286
			},                                                                                                                  // 5287
			delegateType: "focusout"                                                                                            // 5288
		},                                                                                                                   // 5289
		click: {                                                                                                             // 5290
			// For checkbox, fire native event so checked state will be right                                                   // 5291
			trigger: function() {                                                                                               // 5292
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {                                // 5293
					this.click();                                                                                                     // 5294
					return false;                                                                                                     // 5295
				}                                                                                                                  // 5296
			},                                                                                                                  // 5297
                                                                                                                       // 5298
			// For cross-browser consistency, don't fire native .click() on links                                               // 5299
			_default: function( event ) {                                                                                       // 5300
				return jQuery.nodeName( event.target, "a" );                                                                       // 5301
			}                                                                                                                   // 5302
		},                                                                                                                   // 5303
                                                                                                                       // 5304
		beforeunload: {                                                                                                      // 5305
			postDispatch: function( event ) {                                                                                   // 5306
                                                                                                                       // 5307
				// Even when returnValue equals to undefined Firefox will still show alert                                         // 5308
				if ( event.result !== undefined ) {                                                                                // 5309
					event.originalEvent.returnValue = event.result;                                                                   // 5310
				}                                                                                                                  // 5311
			}                                                                                                                   // 5312
		}                                                                                                                    // 5313
	},                                                                                                                    // 5314
                                                                                                                       // 5315
	simulate: function( type, elem, event, bubble ) {                                                                     // 5316
		// Piggyback on a donor event to simulate a different one.                                                           // 5317
		// Fake originalEvent to avoid donor's stopPropagation, but if the                                                   // 5318
		// simulated event prevents default then we do the same on the donor.                                                // 5319
		var e = jQuery.extend(                                                                                               // 5320
			new jQuery.Event(),                                                                                                 // 5321
			event,                                                                                                              // 5322
			{                                                                                                                   // 5323
				type: type,                                                                                                        // 5324
				isSimulated: true,                                                                                                 // 5325
				originalEvent: {}                                                                                                  // 5326
			}                                                                                                                   // 5327
		);                                                                                                                   // 5328
		if ( bubble ) {                                                                                                      // 5329
			jQuery.event.trigger( e, null, elem );                                                                              // 5330
		} else {                                                                                                             // 5331
			jQuery.event.dispatch.call( elem, e );                                                                              // 5332
		}                                                                                                                    // 5333
		if ( e.isDefaultPrevented() ) {                                                                                      // 5334
			event.preventDefault();                                                                                             // 5335
		}                                                                                                                    // 5336
	}                                                                                                                     // 5337
};                                                                                                                     // 5338
                                                                                                                       // 5339
jQuery.removeEvent = document.removeEventListener ?                                                                    // 5340
	function( elem, type, handle ) {                                                                                      // 5341
		if ( elem.removeEventListener ) {                                                                                    // 5342
			elem.removeEventListener( type, handle, false );                                                                    // 5343
		}                                                                                                                    // 5344
	} :                                                                                                                   // 5345
	function( elem, type, handle ) {                                                                                      // 5346
		var name = "on" + type;                                                                                              // 5347
                                                                                                                       // 5348
		if ( elem.detachEvent ) {                                                                                            // 5349
                                                                                                                       // 5350
			// #8545, #7054, preventing memory leaks for custom events in IE6-8                                                 // 5351
			// detachEvent needed property on element, by name of that event, to properly expose it to GC                       // 5352
			if ( typeof elem[ name ] === core_strundefined ) {                                                                  // 5353
				elem[ name ] = null;                                                                                               // 5354
			}                                                                                                                   // 5355
                                                                                                                       // 5356
			elem.detachEvent( name, handle );                                                                                   // 5357
		}                                                                                                                    // 5358
	};                                                                                                                    // 5359
                                                                                                                       // 5360
jQuery.Event = function( src, props ) {                                                                                // 5361
	// Allow instantiation without the 'new' keyword                                                                      // 5362
	if ( !(this instanceof jQuery.Event) ) {                                                                              // 5363
		return new jQuery.Event( src, props );                                                                               // 5364
	}                                                                                                                     // 5365
                                                                                                                       // 5366
	// Event object                                                                                                       // 5367
	if ( src && src.type ) {                                                                                              // 5368
		this.originalEvent = src;                                                                                            // 5369
		this.type = src.type;                                                                                                // 5370
                                                                                                                       // 5371
		// Events bubbling up the document may have been marked as prevented                                                 // 5372
		// by a handler lower down the tree; reflect the correct value.                                                      // 5373
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||                                     // 5374
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;                                      // 5375
                                                                                                                       // 5376
	// Event type                                                                                                         // 5377
	} else {                                                                                                              // 5378
		this.type = src;                                                                                                     // 5379
	}                                                                                                                     // 5380
                                                                                                                       // 5381
	// Put explicitly provided properties onto the event object                                                           // 5382
	if ( props ) {                                                                                                        // 5383
		jQuery.extend( this, props );                                                                                        // 5384
	}                                                                                                                     // 5385
                                                                                                                       // 5386
	// Create a timestamp if incoming event doesn't have one                                                              // 5387
	this.timeStamp = src && src.timeStamp || jQuery.now();                                                                // 5388
                                                                                                                       // 5389
	// Mark it as fixed                                                                                                   // 5390
	this[ jQuery.expando ] = true;                                                                                        // 5391
};                                                                                                                     // 5392
                                                                                                                       // 5393
// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding                                // 5394
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html                                   // 5395
jQuery.Event.prototype = {                                                                                             // 5396
	isDefaultPrevented: returnFalse,                                                                                      // 5397
	isPropagationStopped: returnFalse,                                                                                    // 5398
	isImmediatePropagationStopped: returnFalse,                                                                           // 5399
                                                                                                                       // 5400
	preventDefault: function() {                                                                                          // 5401
		var e = this.originalEvent;                                                                                          // 5402
                                                                                                                       // 5403
		this.isDefaultPrevented = returnTrue;                                                                                // 5404
		if ( !e ) {                                                                                                          // 5405
			return;                                                                                                             // 5406
		}                                                                                                                    // 5407
                                                                                                                       // 5408
		// If preventDefault exists, run it on the original event                                                            // 5409
		if ( e.preventDefault ) {                                                                                            // 5410
			e.preventDefault();                                                                                                 // 5411
                                                                                                                       // 5412
		// Support: IE                                                                                                       // 5413
		// Otherwise set the returnValue property of the original event to false                                             // 5414
		} else {                                                                                                             // 5415
			e.returnValue = false;                                                                                              // 5416
		}                                                                                                                    // 5417
	},                                                                                                                    // 5418
	stopPropagation: function() {                                                                                         // 5419
		var e = this.originalEvent;                                                                                          // 5420
                                                                                                                       // 5421
		this.isPropagationStopped = returnTrue;                                                                              // 5422
		if ( !e ) {                                                                                                          // 5423
			return;                                                                                                             // 5424
		}                                                                                                                    // 5425
		// If stopPropagation exists, run it on the original event                                                           // 5426
		if ( e.stopPropagation ) {                                                                                           // 5427
			e.stopPropagation();                                                                                                // 5428
		}                                                                                                                    // 5429
                                                                                                                       // 5430
		// Support: IE                                                                                                       // 5431
		// Set the cancelBubble property of the original event to true                                                       // 5432
		e.cancelBubble = true;                                                                                               // 5433
	},                                                                                                                    // 5434
	stopImmediatePropagation: function() {                                                                                // 5435
		this.isImmediatePropagationStopped = returnTrue;                                                                     // 5436
		this.stopPropagation();                                                                                              // 5437
	}                                                                                                                     // 5438
};                                                                                                                     // 5439
                                                                                                                       // 5440
// Create mouseenter/leave events using mouseover/out and event-time checks                                            // 5441
jQuery.each({                                                                                                          // 5442
	mouseenter: "mouseover",                                                                                              // 5443
	mouseleave: "mouseout"                                                                                                // 5444
}, function( orig, fix ) {                                                                                             // 5445
	jQuery.event.special[ orig ] = {                                                                                      // 5446
		delegateType: fix,                                                                                                   // 5447
		bindType: fix,                                                                                                       // 5448
                                                                                                                       // 5449
		handle: function( event ) {                                                                                          // 5450
			var ret,                                                                                                            // 5451
				target = this,                                                                                                     // 5452
				related = event.relatedTarget,                                                                                     // 5453
				handleObj = event.handleObj;                                                                                       // 5454
                                                                                                                       // 5455
			// For mousenter/leave call the handler if related is outside the target.                                           // 5456
			// NB: No relatedTarget if the mouse left/entered the browser window                                                // 5457
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {                                    // 5458
				event.type = handleObj.origType;                                                                                   // 5459
				ret = handleObj.handler.apply( this, arguments );                                                                  // 5460
				event.type = fix;                                                                                                  // 5461
			}                                                                                                                   // 5462
			return ret;                                                                                                         // 5463
		}                                                                                                                    // 5464
	};                                                                                                                    // 5465
});                                                                                                                    // 5466
                                                                                                                       // 5467
// IE submit delegation                                                                                                // 5468
if ( !jQuery.support.submitBubbles ) {                                                                                 // 5469
                                                                                                                       // 5470
	jQuery.event.special.submit = {                                                                                       // 5471
		setup: function() {                                                                                                  // 5472
			// Only need this for delegated form submit events                                                                  // 5473
			if ( jQuery.nodeName( this, "form" ) ) {                                                                            // 5474
				return false;                                                                                                      // 5475
			}                                                                                                                   // 5476
                                                                                                                       // 5477
			// Lazy-add a submit handler when a descendant form may potentially be submitted                                    // 5478
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {                                           // 5479
				// Node name check avoids a VML-related crash in IE (#9807)                                                        // 5480
				var elem = e.target,                                                                                               // 5481
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;             // 5482
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {                                                            // 5483
					jQuery.event.add( form, "submit._submit", function( event ) {                                                     // 5484
						event._submit_bubble = true;                                                                                     // 5485
					});                                                                                                               // 5486
					jQuery._data( form, "submitBubbles", true );                                                                      // 5487
				}                                                                                                                  // 5488
			});                                                                                                                 // 5489
			// return undefined since we don't need an event listener                                                           // 5490
		},                                                                                                                   // 5491
                                                                                                                       // 5492
		postDispatch: function( event ) {                                                                                    // 5493
			// If form was submitted by the user, bubble the event up the tree                                                  // 5494
			if ( event._submit_bubble ) {                                                                                       // 5495
				delete event._submit_bubble;                                                                                       // 5496
				if ( this.parentNode && !event.isTrigger ) {                                                                       // 5497
					jQuery.event.simulate( "submit", this.parentNode, event, true );                                                  // 5498
				}                                                                                                                  // 5499
			}                                                                                                                   // 5500
		},                                                                                                                   // 5501
                                                                                                                       // 5502
		teardown: function() {                                                                                               // 5503
			// Only need this for delegated form submit events                                                                  // 5504
			if ( jQuery.nodeName( this, "form" ) ) {                                                                            // 5505
				return false;                                                                                                      // 5506
			}                                                                                                                   // 5507
                                                                                                                       // 5508
			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above                             // 5509
			jQuery.event.remove( this, "._submit" );                                                                            // 5510
		}                                                                                                                    // 5511
	};                                                                                                                    // 5512
}                                                                                                                      // 5513
                                                                                                                       // 5514
// IE change delegation and checkbox/radio fix                                                                         // 5515
if ( !jQuery.support.changeBubbles ) {                                                                                 // 5516
                                                                                                                       // 5517
	jQuery.event.special.change = {                                                                                       // 5518
                                                                                                                       // 5519
		setup: function() {                                                                                                  // 5520
                                                                                                                       // 5521
			if ( rformElems.test( this.nodeName ) ) {                                                                           // 5522
				// IE doesn't fire change on a check/radio until blur; trigger it on click                                         // 5523
				// after a propertychange. Eat the blur-change in special.change.handle.                                           // 5524
				// This still fires onchange a second time for check/radio after blur.                                             // 5525
				if ( this.type === "checkbox" || this.type === "radio" ) {                                                         // 5526
					jQuery.event.add( this, "propertychange._change", function( event ) {                                             // 5527
						if ( event.originalEvent.propertyName === "checked" ) {                                                          // 5528
							this._just_changed = true;                                                                                      // 5529
						}                                                                                                                // 5530
					});                                                                                                               // 5531
					jQuery.event.add( this, "click._change", function( event ) {                                                      // 5532
						if ( this._just_changed && !event.isTrigger ) {                                                                  // 5533
							this._just_changed = false;                                                                                     // 5534
						}                                                                                                                // 5535
						// Allow triggered, simulated change events (#11500)                                                             // 5536
						jQuery.event.simulate( "change", this, event, true );                                                            // 5537
					});                                                                                                               // 5538
				}                                                                                                                  // 5539
				return false;                                                                                                      // 5540
			}                                                                                                                   // 5541
			// Delegated event; lazy-add a change handler on descendant inputs                                                  // 5542
			jQuery.event.add( this, "beforeactivate._change", function( e ) {                                                   // 5543
				var elem = e.target;                                                                                               // 5544
                                                                                                                       // 5545
				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {                                // 5546
					jQuery.event.add( elem, "change._change", function( event ) {                                                     // 5547
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {                                               // 5548
							jQuery.event.simulate( "change", this.parentNode, event, true );                                                // 5549
						}                                                                                                                // 5550
					});                                                                                                               // 5551
					jQuery._data( elem, "changeBubbles", true );                                                                      // 5552
				}                                                                                                                  // 5553
			});                                                                                                                 // 5554
		},                                                                                                                   // 5555
                                                                                                                       // 5556
		handle: function( event ) {                                                                                          // 5557
			var elem = event.target;                                                                                            // 5558
                                                                                                                       // 5559
			// Swallow native change events from checkbox/radio, we already triggered them above                                // 5560
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );                                                           // 5562
			}                                                                                                                   // 5563
		},                                                                                                                   // 5564
                                                                                                                       // 5565
		teardown: function() {                                                                                               // 5566
			jQuery.event.remove( this, "._change" );                                                                            // 5567
                                                                                                                       // 5568
			return !rformElems.test( this.nodeName );                                                                           // 5569
		}                                                                                                                    // 5570
	};                                                                                                                    // 5571
}                                                                                                                      // 5572
                                                                                                                       // 5573
// Create "bubbling" focus and blur events                                                                             // 5574
if ( !jQuery.support.focusinBubbles ) {                                                                                // 5575
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {                                           // 5576
                                                                                                                       // 5577
		// Attach a single capturing handler while someone wants focusin/focusout                                            // 5578
		var attaches = 0,                                                                                                    // 5579
			handler = function( event ) {                                                                                       // 5580
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );                                       // 5581
			};                                                                                                                  // 5582
                                                                                                                       // 5583
		jQuery.event.special[ fix ] = {                                                                                      // 5584
			setup: function() {                                                                                                 // 5585
				if ( attaches++ === 0 ) {                                                                                          // 5586
					document.addEventListener( orig, handler, true );                                                                 // 5587
				}                                                                                                                  // 5588
			},                                                                                                                  // 5589
			teardown: function() {                                                                                              // 5590
				if ( --attaches === 0 ) {                                                                                          // 5591
					document.removeEventListener( orig, handler, true );                                                              // 5592
				}                                                                                                                  // 5593
			}                                                                                                                   // 5594
		};                                                                                                                   // 5595
	});                                                                                                                   // 5596
}                                                                                                                      // 5597
                                                                                                                       // 5598
jQuery.fn.extend({                                                                                                     // 5599
                                                                                                                       // 5600
	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {                                                         // 5601
		var type, origFn;                                                                                                    // 5602
                                                                                                                       // 5603
		// Types can be a map of types/handlers                                                                              // 5604
		if ( typeof types === "object" ) {                                                                                   // 5605
			// ( types-Object, selector, data )                                                                                 // 5606
			if ( typeof selector !== "string" ) {                                                                               // 5607
				// ( types-Object, data )                                                                                          // 5608
				data = data || selector;                                                                                           // 5609
				selector = undefined;                                                                                              // 5610
			}                                                                                                                   // 5611
			for ( type in types ) {                                                                                             // 5612
				this.on( type, selector, data, types[ type ], one );                                                               // 5613
			}                                                                                                                   // 5614
			return this;                                                                                                        // 5615
		}                                                                                                                    // 5616
                                                                                                                       // 5617
		if ( data == null && fn == null ) {                                                                                  // 5618
			// ( types, fn )                                                                                                    // 5619
			fn = selector;                                                                                                      // 5620
			data = selector = undefined;                                                                                        // 5621
		} else if ( fn == null ) {                                                                                           // 5622
			if ( typeof selector === "string" ) {                                                                               // 5623
				// ( types, selector, fn )                                                                                         // 5624
				fn = data;                                                                                                         // 5625
				data = undefined;                                                                                                  // 5626
			} else {                                                                                                            // 5627
				// ( types, data, fn )                                                                                             // 5628
				fn = data;                                                                                                         // 5629
				data = selector;                                                                                                   // 5630
				selector = undefined;                                                                                              // 5631
			}                                                                                                                   // 5632
		}                                                                                                                    // 5633
		if ( fn === false ) {                                                                                                // 5634
			fn = returnFalse;                                                                                                   // 5635
		} else if ( !fn ) {                                                                                                  // 5636
			return this;                                                                                                        // 5637
		}                                                                                                                    // 5638
                                                                                                                       // 5639
		if ( one === 1 ) {                                                                                                   // 5640
			origFn = fn;                                                                                                        // 5641
			fn = function( event ) {                                                                                            // 5642
				// Can use an empty set, since event contains the info                                                             // 5643
				jQuery().off( event );                                                                                             // 5644
				return origFn.apply( this, arguments );                                                                            // 5645
			};                                                                                                                  // 5646
			// Use same guid so caller can remove using origFn                                                                  // 5647
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );                                                           // 5648
		}                                                                                                                    // 5649
		return this.each( function() {                                                                                       // 5650
			jQuery.event.add( this, types, fn, data, selector );                                                                // 5651
		});                                                                                                                  // 5652
	},                                                                                                                    // 5653
	one: function( types, selector, data, fn ) {                                                                          // 5654
		return this.on( types, selector, data, fn, 1 );                                                                      // 5655
	},                                                                                                                    // 5656
	off: function( types, selector, fn ) {                                                                                // 5657
		var handleObj, type;                                                                                                 // 5658
		if ( types && types.preventDefault && types.handleObj ) {                                                            // 5659
			// ( event )  dispatched jQuery.Event                                                                               // 5660
			handleObj = types.handleObj;                                                                                        // 5661
			jQuery( types.delegateTarget ).off(                                                                                 // 5662
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,                         // 5663
				handleObj.selector,                                                                                                // 5664
				handleObj.handler                                                                                                  // 5665
			);                                                                                                                  // 5666
			return this;                                                                                                        // 5667
		}                                                                                                                    // 5668
		if ( typeof types === "object" ) {                                                                                   // 5669
			// ( types-object [, selector] )                                                                                    // 5670
			for ( type in types ) {                                                                                             // 5671
				this.off( type, selector, types[ type ] );                                                                         // 5672
			}                                                                                                                   // 5673
			return this;                                                                                                        // 5674
		}                                                                                                                    // 5675
		if ( selector === false || typeof selector === "function" ) {                                                        // 5676
			// ( types [, fn] )                                                                                                 // 5677
			fn = selector;                                                                                                      // 5678
			selector = undefined;                                                                                               // 5679
		}                                                                                                                    // 5680
		if ( fn === false ) {                                                                                                // 5681
			fn = returnFalse;                                                                                                   // 5682
		}                                                                                                                    // 5683
		return this.each(function() {                                                                                        // 5684
			jQuery.event.remove( this, types, fn, selector );                                                                   // 5685
		});                                                                                                                  // 5686
	},                                                                                                                    // 5687
                                                                                                                       // 5688
	trigger: function( type, data ) {                                                                                     // 5689
		return this.each(function() {                                                                                        // 5690
			jQuery.event.trigger( type, data, this );                                                                           // 5691
		});                                                                                                                  // 5692
	},                                                                                                                    // 5693
	triggerHandler: function( type, data ) {                                                                              // 5694
		var elem = this[0];                                                                                                  // 5695
		if ( elem ) {                                                                                                        // 5696
			return jQuery.event.trigger( type, data, elem, true );                                                              // 5697
		}                                                                                                                    // 5698
	}                                                                                                                     // 5699
});                                                                                                                    // 5700
var isSimple = /^.[^:#\[\.,]*$/,                                                                                       // 5701
	rparentsprev = /^(?:parents|prev(?:Until|All))/,                                                                      // 5702
	rneedsContext = jQuery.expr.match.needsContext,                                                                       // 5703
	// methods guaranteed to produce a unique set when starting from a unique set                                         // 5704
	guaranteedUnique = {                                                                                                  // 5705
		children: true,                                                                                                      // 5706
		contents: true,                                                                                                      // 5707
		next: true,                                                                                                          // 5708
		prev: true                                                                                                           // 5709
	};                                                                                                                    // 5710
                                                                                                                       // 5711
jQuery.fn.extend({                                                                                                     // 5712
	find: function( selector ) {                                                                                          // 5713
		var i,                                                                                                               // 5714
			ret = [],                                                                                                           // 5715
			self = this,                                                                                                        // 5716
			len = self.length;                                                                                                  // 5717
                                                                                                                       // 5718
		if ( typeof selector !== "string" ) {                                                                                // 5719
			return this.pushStack( jQuery( selector ).filter(function() {                                                       // 5720
				for ( i = 0; i < len; i++ ) {                                                                                      // 5721
					if ( jQuery.contains( self[ i ], this ) ) {                                                                       // 5722
						return true;                                                                                                     // 5723
					}                                                                                                                 // 5724
				}                                                                                                                  // 5725
			}) );                                                                                                               // 5726
		}                                                                                                                    // 5727
                                                                                                                       // 5728
		for ( i = 0; i < len; i++ ) {                                                                                        // 5729
			jQuery.find( selector, self[ i ], ret );                                                                            // 5730
		}                                                                                                                    // 5731
                                                                                                                       // 5732
		// Needed because $( selector, context ) becomes $( context ).find( selector )                                       // 5733
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );                                                        // 5734
		ret.selector = this.selector ? this.selector + " " + selector : selector;                                            // 5735
		return ret;                                                                                                          // 5736
	},                                                                                                                    // 5737
                                                                                                                       // 5738
	has: function( target ) {                                                                                             // 5739
		var i,                                                                                                               // 5740
			targets = jQuery( target, this ),                                                                                   // 5741
			len = targets.length;                                                                                               // 5742
                                                                                                                       // 5743
		return this.filter(function() {                                                                                      // 5744
			for ( i = 0; i < len; i++ ) {                                                                                       // 5745
				if ( jQuery.contains( this, targets[i] ) ) {                                                                       // 5746
					return true;                                                                                                      // 5747
				}                                                                                                                  // 5748
			}                                                                                                                   // 5749
		});                                                                                                                  // 5750
	},                                                                                                                    // 5751
                                                                                                                       // 5752
	not: function( selector ) {                                                                                           // 5753
		return this.pushStack( winnow(this, selector || [], true) );                                                         // 5754
	},                                                                                                                    // 5755
                                                                                                                       // 5756
	filter: function( selector ) {                                                                                        // 5757
		return this.pushStack( winnow(this, selector || [], false) );                                                        // 5758
	},                                                                                                                    // 5759
                                                                                                                       // 5760
	is: function( selector ) {                                                                                            // 5761
		return !!winnow(                                                                                                     // 5762
			this,                                                                                                               // 5763
                                                                                                                       // 5764
			// If this is a positional/relative selector, check membership in the returned set                                  // 5765
			// so $("p:first").is("p:last") won't return true for a doc with two "p".                                           // 5766
			typeof selector === "string" && rneedsContext.test( selector ) ?                                                    // 5767
				jQuery( selector ) :                                                                                               // 5768
				selector || [],                                                                                                    // 5769
			false                                                                                                               // 5770
		).length;                                                                                                            // 5771
	},                                                                                                                    // 5772
                                                                                                                       // 5773
	closest: function( selectors, context ) {                                                                             // 5774
		var cur,                                                                                                             // 5775
			i = 0,                                                                                                              // 5776
			l = this.length,                                                                                                    // 5777
			ret = [],                                                                                                           // 5778
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?                                            // 5779
				jQuery( selectors, context || this.context ) :                                                                     // 5780
				0;                                                                                                                 // 5781
                                                                                                                       // 5782
		for ( ; i < l; i++ ) {                                                                                               // 5783
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {                                               // 5784
				// Always skip document fragments                                                                                  // 5785
				if ( cur.nodeType < 11 && (pos ?                                                                                   // 5786
					pos.index(cur) > -1 :                                                                                             // 5787
                                                                                                                       // 5788
					// Don't pass non-elements to Sizzle                                                                              // 5789
					cur.nodeType === 1 &&                                                                                             // 5790
						jQuery.find.matchesSelector(cur, selectors)) ) {                                                                 // 5791
                                                                                                                       // 5792
					cur = ret.push( cur );                                                                                            // 5793
					break;                                                                                                            // 5794
				}                                                                                                                  // 5795
			}                                                                                                                   // 5796
		}                                                                                                                    // 5797
                                                                                                                       // 5798
		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );                                                // 5799
	},                                                                                                                    // 5800
                                                                                                                       // 5801
	// Determine the position of an element within                                                                        // 5802
	// the matched set of elements                                                                                        // 5803
	index: function( elem ) {                                                                                             // 5804
                                                                                                                       // 5805
		// No argument, return index in parent                                                                               // 5806
		if ( !elem ) {                                                                                                       // 5807
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;                                      // 5808
		}                                                                                                                    // 5809
                                                                                                                       // 5810
		// index in selector                                                                                                 // 5811
		if ( typeof elem === "string" ) {                                                                                    // 5812
			return jQuery.inArray( this[0], jQuery( elem ) );                                                                   // 5813
		}                                                                                                                    // 5814
                                                                                                                       // 5815
		// Locate the position of the desired element                                                                        // 5816
		return jQuery.inArray(                                                                                               // 5817
			// If it receives a jQuery object, the first element is used                                                        // 5818
			elem.jquery ? elem[0] : elem, this );                                                                               // 5819
	},                                                                                                                    // 5820
                                                                                                                       // 5821
	add: function( selector, context ) {                                                                                  // 5822
		var set = typeof selector === "string" ?                                                                             // 5823
				jQuery( selector, context ) :                                                                                      // 5824
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),                                       // 5825
			all = jQuery.merge( this.get(), set );                                                                              // 5826
                                                                                                                       // 5827
		return this.pushStack( jQuery.unique(all) );                                                                         // 5828
	},                                                                                                                    // 5829
                                                                                                                       // 5830
	addBack: function( selector ) {                                                                                       // 5831
		return this.add( selector == null ?                                                                                  // 5832
			this.prevObject : this.prevObject.filter(selector)                                                                  // 5833
		);                                                                                                                   // 5834
	}                                                                                                                     // 5835
});                                                                                                                    // 5836
                                                                                                                       // 5837
function sibling( cur, dir ) {                                                                                         // 5838
	do {                                                                                                                  // 5839
		cur = cur[ dir ];                                                                                                    // 5840
	} while ( cur && cur.nodeType !== 1 );                                                                                // 5841
                                                                                                                       // 5842
	return cur;                                                                                                           // 5843
}                                                                                                                      // 5844
                                                                                                                       // 5845
jQuery.each({                                                                                                          // 5846
	parent: function( elem ) {                                                                                            // 5847
		var parent = elem.parentNode;                                                                                        // 5848
		return parent && parent.nodeType !== 11 ? parent : null;                                                             // 5849
	},                                                                                                                    // 5850
	parents: function( elem ) {                                                                                           // 5851
		return jQuery.dir( elem, "parentNode" );                                                                             // 5852
	},                                                                                                                    // 5853
	parentsUntil: function( elem, i, until ) {                                                                            // 5854
		return jQuery.dir( elem, "parentNode", until );                                                                      // 5855
	},                                                                                                                    // 5856
	next: function( elem ) {                                                                                              // 5857
		return sibling( elem, "nextSibling" );                                                                               // 5858
	},                                                                                                                    // 5859
	prev: function( elem ) {                                                                                              // 5860
		return sibling( elem, "previousSibling" );                                                                           // 5861
	},                                                                                                                    // 5862
	nextAll: function( elem ) {                                                                                           // 5863
		return jQuery.dir( elem, "nextSibling" );                                                                            // 5864
	},                                                                                                                    // 5865
	prevAll: function( elem ) {                                                                                           // 5866
		return jQuery.dir( elem, "previousSibling" );                                                                        // 5867
	},                                                                                                                    // 5868
	nextUntil: function( elem, i, until ) {                                                                               // 5869
		return jQuery.dir( elem, "nextSibling", until );                                                                     // 5870
	},                                                                                                                    // 5871
	prevUntil: function( elem, i, until ) {                                                                               // 5872
		return jQuery.dir( elem, "previousSibling", until );                                                                 // 5873
	},                                                                                                                    // 5874
	siblings: function( elem ) {                                                                                          // 5875
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );                                                 // 5876
	},                                                                                                                    // 5877
	children: function( elem ) {                                                                                          // 5878
		return jQuery.sibling( elem.firstChild );                                                                            // 5879
	},                                                                                                                    // 5880
	contents: function( elem ) {                                                                                          // 5881
		return jQuery.nodeName( elem, "iframe" ) ?                                                                           // 5882
			elem.contentDocument || elem.contentWindow.document :                                                               // 5883
			jQuery.merge( [], elem.childNodes );                                                                                // 5884
	}                                                                                                                     // 5885
}, function( name, fn ) {                                                                                              // 5886
	jQuery.fn[ name ] = function( until, selector ) {                                                                     // 5887
		var ret = jQuery.map( this, fn, until );                                                                             // 5888
                                                                                                                       // 5889
		if ( name.slice( -5 ) !== "Until" ) {                                                                                // 5890
			selector = until;                                                                                                   // 5891
		}                                                                                                                    // 5892
                                                                                                                       // 5893
		if ( selector && typeof selector === "string" ) {                                                                    // 5894
			ret = jQuery.filter( selector, ret );                                                                               // 5895
		}                                                                                                                    // 5896
                                                                                                                       // 5897
		if ( this.length > 1 ) {                                                                                             // 5898
			// Remove duplicates                                                                                                // 5899
			if ( !guaranteedUnique[ name ] ) {                                                                                  // 5900
				ret = jQuery.unique( ret );                                                                                        // 5901
			}                                                                                                                   // 5902
                                                                                                                       // 5903
			// Reverse order for parents* and prev-derivatives                                                                  // 5904
			if ( rparentsprev.test( name ) ) {                                                                                  // 5905
				ret = ret.reverse();                                                                                               // 5906
			}                                                                                                                   // 5907
		}                                                                                                                    // 5908
                                                                                                                       // 5909
		return this.pushStack( ret );                                                                                        // 5910
	};                                                                                                                    // 5911
});                                                                                                                    // 5912
                                                                                                                       // 5913
jQuery.extend({                                                                                                        // 5914
	filter: function( expr, elems, not ) {                                                                                // 5915
		var elem = elems[ 0 ];                                                                                               // 5916
                                                                                                                       // 5917
		if ( not ) {                                                                                                         // 5918
			expr = ":not(" + expr + ")";                                                                                        // 5919
		}                                                                                                                    // 5920
                                                                                                                       // 5921
		return elems.length === 1 && elem.nodeType === 1 ?                                                                   // 5922
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :                                                         // 5923
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {                                                   // 5924
				return elem.nodeType === 1;                                                                                        // 5925
			}));                                                                                                                // 5926
	},                                                                                                                    // 5927
                                                                                                                       // 5928
	dir: function( elem, dir, until ) {                                                                                   // 5929
		var matched = [],                                                                                                    // 5930
			cur = elem[ dir ];                                                                                                  // 5931
                                                                                                                       // 5932
		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {   // 5933
			if ( cur.nodeType === 1 ) {                                                                                         // 5934
				matched.push( cur );                                                                                               // 5935
			}                                                                                                                   // 5936
			cur = cur[dir];                                                                                                     // 5937
		}                                                                                                                    // 5938
		return matched;                                                                                                      // 5939
	},                                                                                                                    // 5940
                                                                                                                       // 5941
	sibling: function( n, elem ) {                                                                                        // 5942
		var r = [];                                                                                                          // 5943
                                                                                                                       // 5944
		for ( ; n; n = n.nextSibling ) {                                                                                     // 5945
			if ( n.nodeType === 1 && n !== elem ) {                                                                             // 5946
				r.push( n );                                                                                                       // 5947
			}                                                                                                                   // 5948
		}                                                                                                                    // 5949
                                                                                                                       // 5950
		return r;                                                                                                            // 5951
	}                                                                                                                     // 5952
});                                                                                                                    // 5953
                                                                                                                       // 5954
// Implement the identical functionality for filter and not                                                            // 5955
function winnow( elements, qualifier, not ) {                                                                          // 5956
	if ( jQuery.isFunction( qualifier ) ) {                                                                               // 5957
		return jQuery.grep( elements, function( elem, i ) {                                                                  // 5958
			/* jshint -W018 */                                                                                                  // 5959
			return !!qualifier.call( elem, i, elem ) !== not;                                                                   // 5960
		});                                                                                                                  // 5961
                                                                                                                       // 5962
	}                                                                                                                     // 5963
                                                                                                                       // 5964
	if ( qualifier.nodeType ) {                                                                                           // 5965
		return jQuery.grep( elements, function( elem ) {                                                                     // 5966
			return ( elem === qualifier ) !== not;                                                                              // 5967
		});                                                                                                                  // 5968
                                                                                                                       // 5969
	}                                                                                                                     // 5970
                                                                                                                       // 5971
	if ( typeof qualifier === "string" ) {                                                                                // 5972
		if ( isSimple.test( qualifier ) ) {                                                                                  // 5973
			return jQuery.filter( qualifier, elements, not );                                                                   // 5974
		}                                                                                                                    // 5975
                                                                                                                       // 5976
		qualifier = jQuery.filter( qualifier, elements );                                                                    // 5977
	}                                                                                                                     // 5978
                                                                                                                       // 5979
	return jQuery.grep( elements, function( elem ) {                                                                      // 5980
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;                                                           // 5981
	});                                                                                                                   // 5982
}                                                                                                                      // 5983
function createSafeFragment( document ) {                                                                              // 5984
	var list = nodeNames.split( "|" ),                                                                                    // 5985
		safeFrag = document.createDocumentFragment();                                                                        // 5986
                                                                                                                       // 5987
	if ( safeFrag.createElement ) {                                                                                       // 5988
		while ( list.length ) {                                                                                              // 5989
			safeFrag.createElement(                                                                                             // 5990
				list.pop()                                                                                                         // 5991
			);                                                                                                                  // 5992
		}                                                                                                                    // 5993
	}                                                                                                                     // 5994
	return safeFrag;                                                                                                      // 5995
}                                                                                                                      // 5996
                                                                                                                       // 5997
var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +                // 5998
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",                                           // 5999
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,                                                                         // 6000
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),                                                      // 6001
	rleadingWhitespace = /^\s+/,                                                                                          // 6002
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,                                // 6003
	rtagName = /<([\w:]+)/,                                                                                               // 6004
	rtbody = /<tbody/i,                                                                                                   // 6005
	rhtml = /<|&#?\w+;/,                                                                                                  // 6006
	rnoInnerhtml = /<(?:script|style|link)/i,                                                                             // 6007
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,                                                                // 6008
	// checked="checked" or checked                                                                                       // 6009
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,                                                                       // 6010
	rscriptType = /^$|\/(?:java|ecma)script/i,                                                                            // 6011
	rscriptTypeMasked = /^true\/(.*)/,                                                                                    // 6012
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,                                                            // 6013
                                                                                                                       // 6014
	// We have to close these tags to support XHTML (#13200)                                                              // 6015
	wrapMap = {                                                                                                           // 6016
		option: [ 1, "<select multiple='multiple'>", "</select>" ],                                                          // 6017
		legend: [ 1, "<fieldset>", "</fieldset>" ],                                                                          // 6018
		area: [ 1, "<map>", "</map>" ],                                                                                      // 6019
		param: [ 1, "<object>", "</object>" ],                                                                               // 6020
		thead: [ 1, "<table>", "</table>" ],                                                                                 // 6021
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],                                                                     // 6022
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],                                               // 6023
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],                                                            // 6024
                                                                                                                       // 6025
		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,                                           // 6026
		// unless wrapped in a div with non-breaking characters in front of it.                                              // 6027
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]                                  // 6028
	},                                                                                                                    // 6029
	safeFragment = createSafeFragment( document ),                                                                        // 6030
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );                                              // 6031
                                                                                                                       // 6032
wrapMap.optgroup = wrapMap.option;                                                                                     // 6033
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 6034
wrapMap.th = wrapMap.td;                                                                                               // 6035
                                                                                                                       // 6036
jQuery.fn.extend({                                                                                                     // 6037
	text: function( value ) {                                                                                             // 6038
		return jQuery.access( this, function( value ) {                                                                      // 6039
			return value === undefined ?                                                                                        // 6040
				jQuery.text( this ) :                                                                                              // 6041
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );                   // 6042
		}, null, value, arguments.length );                                                                                  // 6043
	},                                                                                                                    // 6044
                                                                                                                       // 6045
	append: function() {                                                                                                  // 6046
		return this.domManip( arguments, function( elem ) {                                                                  // 6047
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                         // 6048
				var target = manipulationTarget( this, elem );                                                                     // 6049
				target.appendChild( elem );                                                                                        // 6050
			}                                                                                                                   // 6051
		});                                                                                                                  // 6052
	},                                                                                                                    // 6053
                                                                                                                       // 6054
	prepend: function() {                                                                                                 // 6055
		return this.domManip( arguments, function( elem ) {                                                                  // 6056
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                         // 6057
				var target = manipulationTarget( this, elem );                                                                     // 6058
				target.insertBefore( elem, target.firstChild );                                                                    // 6059
			}                                                                                                                   // 6060
		});                                                                                                                  // 6061
	},                                                                                                                    // 6062
                                                                                                                       // 6063
	before: function() {                                                                                                  // 6064
		return this.domManip( arguments, function( elem ) {                                                                  // 6065
			if ( this.parentNode ) {                                                                                            // 6066
				this.parentNode.insertBefore( elem, this );                                                                        // 6067
			}                                                                                                                   // 6068
		});                                                                                                                  // 6069
	},                                                                                                                    // 6070
                                                                                                                       // 6071
	after: function() {                                                                                                   // 6072
		return this.domManip( arguments, function( elem ) {                                                                  // 6073
			if ( this.parentNode ) {                                                                                            // 6074
				this.parentNode.insertBefore( elem, this.nextSibling );                                                            // 6075
			}                                                                                                                   // 6076
		});                                                                                                                  // 6077
	},                                                                                                                    // 6078
                                                                                                                       // 6079
	// keepData is for internal use only--do not document                                                                 // 6080
	remove: function( selector, keepData ) {                                                                              // 6081
		var elem,                                                                                                            // 6082
			elems = selector ? jQuery.filter( selector, this ) : this,                                                          // 6083
			i = 0;                                                                                                              // 6084
                                                                                                                       // 6085
		for ( ; (elem = elems[i]) != null; i++ ) {                                                                           // 6086
                                                                                                                       // 6087
			if ( !keepData && elem.nodeType === 1 ) {                                                                           // 6088
				jQuery.cleanData( getAll( elem ) );                                                                                // 6089
			}                                                                                                                   // 6090
                                                                                                                       // 6091
			if ( elem.parentNode ) {                                                                                            // 6092
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {                                                   // 6093
					setGlobalEval( getAll( elem, "script" ) );                                                                        // 6094
				}                                                                                                                  // 6095
				elem.parentNode.removeChild( elem );                                                                               // 6096
			}                                                                                                                   // 6097
		}                                                                                                                    // 6098
                                                                                                                       // 6099
		return this;                                                                                                         // 6100
	},                                                                                                                    // 6101
                                                                                                                       // 6102
	empty: function() {                                                                                                   // 6103
		var elem,                                                                                                            // 6104
			i = 0;                                                                                                              // 6105
                                                                                                                       // 6106
		for ( ; (elem = this[i]) != null; i++ ) {                                                                            // 6107
			// Remove element nodes and prevent memory leaks                                                                    // 6108
			if ( elem.nodeType === 1 ) {                                                                                        // 6109
				jQuery.cleanData( getAll( elem, false ) );                                                                         // 6110
			}                                                                                                                   // 6111
                                                                                                                       // 6112
			// Remove any remaining nodes                                                                                       // 6113
			while ( elem.firstChild ) {                                                                                         // 6114
				elem.removeChild( elem.firstChild );                                                                               // 6115
			}                                                                                                                   // 6116
                                                                                                                       // 6117
			// If this is a select, ensure that it displays empty (#12336)                                                      // 6118
			// Support: IE<9                                                                                                    // 6119
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {                                                          // 6120
				elem.options.length = 0;                                                                                           // 6121
			}                                                                                                                   // 6122
		}                                                                                                                    // 6123
                                                                                                                       // 6124
		return this;                                                                                                         // 6125
	},                                                                                                                    // 6126
                                                                                                                       // 6127
	clone: function( dataAndEvents, deepDataAndEvents ) {                                                                 // 6128
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;                                                       // 6129
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;                                   // 6130
                                                                                                                       // 6131
		return this.map( function () {                                                                                       // 6132
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );                                                      // 6133
		});                                                                                                                  // 6134
	},                                                                                                                    // 6135
                                                                                                                       // 6136
	html: function( value ) {                                                                                             // 6137
		return jQuery.access( this, function( value ) {                                                                      // 6138
			var elem = this[0] || {},                                                                                           // 6139
				i = 0,                                                                                                             // 6140
				l = this.length;                                                                                                   // 6141
                                                                                                                       // 6142
			if ( value === undefined ) {                                                                                        // 6143
				return elem.nodeType === 1 ?                                                                                       // 6144
					elem.innerHTML.replace( rinlinejQuery, "" ) :                                                                     // 6145
					undefined;                                                                                                        // 6146
			}                                                                                                                   // 6147
                                                                                                                       // 6148
			// See if we can take a shortcut and just use innerHTML                                                             // 6149
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&                                                    // 6150
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&                                                // 6151
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&                                       // 6152
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {                                            // 6153
                                                                                                                       // 6154
				value = value.replace( rxhtmlTag, "<$1></$2>" );                                                                   // 6155
                                                                                                                       // 6156
				try {                                                                                                              // 6157
					for (; i < l; i++ ) {                                                                                             // 6158
						// Remove element nodes and prevent memory leaks                                                                 // 6159
						elem = this[i] || {};                                                                                            // 6160
						if ( elem.nodeType === 1 ) {                                                                                     // 6161
							jQuery.cleanData( getAll( elem, false ) );                                                                      // 6162
							elem.innerHTML = value;                                                                                         // 6163
						}                                                                                                                // 6164
					}                                                                                                                 // 6165
                                                                                                                       // 6166
					elem = 0;                                                                                                         // 6167
                                                                                                                       // 6168
				// If using innerHTML throws an exception, use the fallback method                                                 // 6169
				} catch(e) {}                                                                                                      // 6170
			}                                                                                                                   // 6171
                                                                                                                       // 6172
			if ( elem ) {                                                                                                       // 6173
				this.empty().append( value );                                                                                      // 6174
			}                                                                                                                   // 6175
		}, null, value, arguments.length );                                                                                  // 6176
	},                                                                                                                    // 6177
                                                                                                                       // 6178
	replaceWith: function() {                                                                                             // 6179
		var                                                                                                                  // 6180
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment                                   // 6181
			args = jQuery.map( this, function( elem ) {                                                                         // 6182
				return [ elem.nextSibling, elem.parentNode ];                                                                      // 6183
			}),                                                                                                                 // 6184
			i = 0;                                                                                                              // 6185
                                                                                                                       // 6186
		// Make the changes, replacing each context element with the new content                                             // 6187
		this.domManip( arguments, function( elem ) {                                                                         // 6188
			var next = args[ i++ ],                                                                                             // 6189
				parent = args[ i++ ];                                                                                              // 6190
                                                                                                                       // 6191
			if ( parent ) {                                                                                                     // 6192
				// Don't use the snapshot next if it has moved (#13810)                                                            // 6193
				if ( next && next.parentNode !== parent ) {                                                                        // 6194
					next = this.nextSibling;                                                                                          // 6195
				}                                                                                                                  // 6196
				jQuery( this ).remove();                                                                                           // 6197
				parent.insertBefore( elem, next );                                                                                 // 6198
			}                                                                                                                   // 6199
		// Allow new content to include elements from the context set                                                        // 6200
		}, true );                                                                                                           // 6201
                                                                                                                       // 6202
		// Force removal if there was no new content (e.g., from empty arguments)                                            // 6203
		return i ? this : this.remove();                                                                                     // 6204
	},                                                                                                                    // 6205
                                                                                                                       // 6206
	detach: function( selector ) {                                                                                        // 6207
		return this.remove( selector, true );                                                                                // 6208
	},                                                                                                                    // 6209
                                                                                                                       // 6210
	domManip: function( args, callback, allowIntersection ) {                                                             // 6211
                                                                                                                       // 6212
		// Flatten any nested arrays                                                                                         // 6213
		args = core_concat.apply( [], args );                                                                                // 6214
                                                                                                                       // 6215
		var first, node, hasScripts,                                                                                         // 6216
			scripts, doc, fragment,                                                                                             // 6217
			i = 0,                                                                                                              // 6218
			l = this.length,                                                                                                    // 6219
			set = this,                                                                                                         // 6220
			iNoClone = l - 1,                                                                                                   // 6221
			value = args[0],                                                                                                    // 6222
			isFunction = jQuery.isFunction( value );                                                                            // 6223
                                                                                                                       // 6224
		// We can't cloneNode fragments that contain checked, in WebKit                                                      // 6225
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {                                                                                // 6227
				var self = set.eq( index );                                                                                        // 6228
				if ( isFunction ) {                                                                                                // 6229
					args[0] = value.call( this, index, self.html() );                                                                 // 6230
				}                                                                                                                  // 6231
				self.domManip( args, callback, allowIntersection );                                                                // 6232
			});                                                                                                                 // 6233
		}                                                                                                                    // 6234
                                                                                                                       // 6235
		if ( l ) {                                                                                                           // 6236
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );                // 6237
			first = fragment.firstChild;                                                                                        // 6238
                                                                                                                       // 6239
			if ( fragment.childNodes.length === 1 ) {                                                                           // 6240
				fragment = first;                                                                                                  // 6241
			}                                                                                                                   // 6242
                                                                                                                       // 6243
			if ( first ) {                                                                                                      // 6244
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );                                               // 6245
				hasScripts = scripts.length;                                                                                       // 6246
                                                                                                                       // 6247
				// Use the original fragment for the last item instead of the first because it can end up                          // 6248
				// being emptied incorrectly in certain situations (#8070).                                                        // 6249
				for ( ; i < l; i++ ) {                                                                                             // 6250
					node = fragment;                                                                                                  // 6251
                                                                                                                       // 6252
					if ( i !== iNoClone ) {                                                                                           // 6253
						node = jQuery.clone( node, true, true );                                                                         // 6254
                                                                                                                       // 6255
						// Keep references to cloned scripts for later restoration                                                       // 6256
						if ( hasScripts ) {                                                                                              // 6257
							jQuery.merge( scripts, getAll( node, "script" ) );                                                              // 6258
						}                                                                                                                // 6259
					}                                                                                                                 // 6260
                                                                                                                       // 6261
					callback.call( this[i], node, i );                                                                                // 6262
				}                                                                                                                  // 6263
                                                                                                                       // 6264
				if ( hasScripts ) {                                                                                                // 6265
					doc = scripts[ scripts.length - 1 ].ownerDocument;                                                                // 6266
                                                                                                                       // 6267
					// Reenable scripts                                                                                               // 6268
					jQuery.map( scripts, restoreScript );                                                                             // 6269
                                                                                                                       // 6270
					// Evaluate executable scripts on first document insertion                                                        // 6271
					for ( i = 0; i < hasScripts; i++ ) {                                                                              // 6272
						node = scripts[ i ];                                                                                             // 6273
						if ( rscriptType.test( node.type || "" ) &&                                                                      // 6274
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {                                         // 6275
                                                                                                                       // 6276
							if ( node.src ) {                                                                                               // 6277
								// Hope ajax is available...                                                                                   // 6278
								jQuery._evalUrl( node.src );                                                                                   // 6279
							} else {                                                                                                        // 6280
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );    // 6281
							}                                                                                                               // 6282
						}                                                                                                                // 6283
					}                                                                                                                 // 6284
				}                                                                                                                  // 6285
                                                                                                                       // 6286
				// Fix #11809: Avoid leaking memory                                                                                // 6287
				fragment = first = null;                                                                                           // 6288
			}                                                                                                                   // 6289
		}                                                                                                                    // 6290
                                                                                                                       // 6291
		return this;                                                                                                         // 6292
	}                                                                                                                     // 6293
});                                                                                                                    // 6294
                                                                                                                       // 6295
// Support: IE<8                                                                                                       // 6296
// Manipulating tables requires a tbody                                                                                // 6297
function manipulationTarget( elem, content ) {                                                                         // 6298
	return jQuery.nodeName( elem, "table" ) &&                                                                            // 6299
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?                                     // 6300
                                                                                                                       // 6301
		elem.getElementsByTagName("tbody")[0] ||                                                                             // 6302
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :                                                     // 6303
		elem;                                                                                                                // 6304
}                                                                                                                      // 6305
                                                                                                                       // 6306
// Replace/restore the type attribute of script elements for safe DOM manipulation                                     // 6307
function disableScript( elem ) {                                                                                       // 6308
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;                                            // 6309
	return elem;                                                                                                          // 6310
}                                                                                                                      // 6311
function restoreScript( elem ) {                                                                                       // 6312
	var match = rscriptTypeMasked.exec( elem.type );                                                                      // 6313
	if ( match ) {                                                                                                        // 6314
		elem.type = match[1];                                                                                                // 6315
	} else {                                                                                                              // 6316
		elem.removeAttribute("type");                                                                                        // 6317
	}                                                                                                                     // 6318
	return elem;                                                                                                          // 6319
}                                                                                                                      // 6320
                                                                                                                       // 6321
// Mark scripts as having already been evaluated                                                                       // 6322
function setGlobalEval( elems, refElements ) {                                                                         // 6323
	var elem,                                                                                                             // 6324
		i = 0;                                                                                                               // 6325
	for ( ; (elem = elems[i]) != null; i++ ) {                                                                            // 6326
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );                    // 6327
	}                                                                                                                     // 6328
}                                                                                                                      // 6329
                                                                                                                       // 6330
function cloneCopyEvent( src, dest ) {                                                                                 // 6331
                                                                                                                       // 6332
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {                                                                // 6333
		return;                                                                                                              // 6334
	}                                                                                                                     // 6335
                                                                                                                       // 6336
	var type, i, l,                                                                                                       // 6337
		oldData = jQuery._data( src ),                                                                                       // 6338
		curData = jQuery._data( dest, oldData ),                                                                             // 6339
		events = oldData.events;                                                                                             // 6340
                                                                                                                       // 6341
	if ( events ) {                                                                                                       // 6342
		delete curData.handle;                                                                                               // 6343
		curData.events = {};                                                                                                 // 6344
                                                                                                                       // 6345
		for ( type in events ) {                                                                                             // 6346
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {                                                              // 6347
				jQuery.event.add( dest, type, events[ type ][ i ] );                                                               // 6348
			}                                                                                                                   // 6349
		}                                                                                                                    // 6350
	}                                                                                                                     // 6351
                                                                                                                       // 6352
	// make the cloned public data object a copy from the original                                                        // 6353
	if ( curData.data ) {                                                                                                 // 6354
		curData.data = jQuery.extend( {}, curData.data );                                                                    // 6355
	}                                                                                                                     // 6356
}                                                                                                                      // 6357
                                                                                                                       // 6358
function fixCloneNodeIssues( src, dest ) {                                                                             // 6359
	var nodeName, e, data;                                                                                                // 6360
                                                                                                                       // 6361
	// We do not need to do anything for non-Elements                                                                     // 6362
	if ( dest.nodeType !== 1 ) {                                                                                          // 6363
		return;                                                                                                              // 6364
	}                                                                                                                     // 6365
                                                                                                                       // 6366
	nodeName = dest.nodeName.toLowerCase();                                                                               // 6367
                                                                                                                       // 6368
	// IE6-8 copies events bound via attachEvent when using cloneNode.                                                    // 6369
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {                                                       // 6370
		data = jQuery._data( dest );                                                                                         // 6371
                                                                                                                       // 6372
		for ( e in data.events ) {                                                                                           // 6373
			jQuery.removeEvent( dest, e, data.handle );                                                                         // 6374
		}                                                                                                                    // 6375
                                                                                                                       // 6376
		// Event data gets referenced instead of copied if the expando gets copied too                                       // 6377
		dest.removeAttribute( jQuery.expando );                                                                              // 6378
	}                                                                                                                     // 6379
                                                                                                                       // 6380
	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text                                      // 6381
	if ( nodeName === "script" && dest.text !== src.text ) {                                                              // 6382
		disableScript( dest ).text = src.text;                                                                               // 6383
		restoreScript( dest );                                                                                               // 6384
                                                                                                                       // 6385
	// IE6-10 improperly clones children of object elements using classid.                                                // 6386
	// IE10 throws NoModificationAllowedError if parent is null, #12132.                                                  // 6387
	} else if ( nodeName === "object" ) {                                                                                 // 6388
		if ( dest.parentNode ) {                                                                                             // 6389
			dest.outerHTML = src.outerHTML;                                                                                     // 6390
		}                                                                                                                    // 6391
                                                                                                                       // 6392
		// This path appears unavoidable for IE9. When cloning an object                                                     // 6393
		// element in IE9, the outerHTML strategy above is not sufficient.                                                   // 6394
		// If the src has innerHTML and the destination does not,                                                            // 6395
		// copy the src.innerHTML into the dest.innerHTML. #10324                                                            // 6396
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {                              // 6397
			dest.innerHTML = src.innerHTML;                                                                                     // 6398
		}                                                                                                                    // 6399
                                                                                                                       // 6400
	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {                                  // 6401
		// IE6-8 fails to persist the checked state of a cloned checkbox                                                     // 6402
		// or radio button. Worse, IE6-7 fail to give the cloned element                                                     // 6403
		// a checked appearance if the defaultChecked value isn't also set                                                   // 6404
                                                                                                                       // 6405
		dest.defaultChecked = dest.checked = src.checked;                                                                    // 6406
                                                                                                                       // 6407
		// IE6-7 get confused and end up setting the value of a cloned                                                       // 6408
		// checkbox/radio button to an empty string instead of "on"                                                          // 6409
		if ( dest.value !== src.value ) {                                                                                    // 6410
			dest.value = src.value;                                                                                             // 6411
		}                                                                                                                    // 6412
                                                                                                                       // 6413
	// IE6-8 fails to return the selected option to the default selected                                                  // 6414
	// state when cloning options                                                                                         // 6415
	} else if ( nodeName === "option" ) {                                                                                 // 6416
		dest.defaultSelected = dest.selected = src.defaultSelected;                                                          // 6417
                                                                                                                       // 6418
	// IE6-8 fails to set the defaultValue to the correct value when                                                      // 6419
	// cloning other types of input fields                                                                                // 6420
	} else if ( nodeName === "input" || nodeName === "textarea" ) {                                                       // 6421
		dest.defaultValue = src.defaultValue;                                                                                // 6422
	}                                                                                                                     // 6423
}                                                                                                                      // 6424
                                                                                                                       // 6425
jQuery.each({                                                                                                          // 6426
	appendTo: "append",                                                                                                   // 6427
	prependTo: "prepend",                                                                                                 // 6428
	insertBefore: "before",                                                                                               // 6429
	insertAfter: "after",                                                                                                 // 6430
	replaceAll: "replaceWith"                                                                                             // 6431
}, function( name, original ) {                                                                                        // 6432
	jQuery.fn[ name ] = function( selector ) {                                                                            // 6433
		var elems,                                                                                                           // 6434
			i = 0,                                                                                                              // 6435
			ret = [],                                                                                                           // 6436
			insert = jQuery( selector ),                                                                                        // 6437
			last = insert.length - 1;                                                                                           // 6438
                                                                                                                       // 6439
		for ( ; i <= last; i++ ) {                                                                                           // 6440
			elems = i === last ? this : this.clone(true);                                                                       // 6441
			jQuery( insert[i] )[ original ]( elems );                                                                           // 6442
                                                                                                                       // 6443
			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()                                 // 6444
			core_push.apply( ret, elems.get() );                                                                                // 6445
		}                                                                                                                    // 6446
                                                                                                                       // 6447
		return this.pushStack( ret );                                                                                        // 6448
	};                                                                                                                    // 6449
});                                                                                                                    // 6450
                                                                                                                       // 6451
function getAll( context, tag ) {                                                                                      // 6452
	var elems, elem,                                                                                                      // 6453
		i = 0,                                                                                                               // 6454
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :     // 6455
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :                    // 6456
			undefined;                                                                                                          // 6457
                                                                                                                       // 6458
	if ( !found ) {                                                                                                       // 6459
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {                          // 6460
			if ( !tag || jQuery.nodeName( elem, tag ) ) {                                                                       // 6461
				found.push( elem );                                                                                                // 6462
			} else {                                                                                                            // 6463
				jQuery.merge( found, getAll( elem, tag ) );                                                                        // 6464
			}                                                                                                                   // 6465
		}                                                                                                                    // 6466
	}                                                                                                                     // 6467
                                                                                                                       // 6468
	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?                                                  // 6469
		jQuery.merge( [ context ], found ) :                                                                                 // 6470
		found;                                                                                                               // 6471
}                                                                                                                      // 6472
                                                                                                                       // 6473
// Used in buildFragment, fixes the defaultChecked property                                                            // 6474
function fixDefaultChecked( elem ) {                                                                                   // 6475
	if ( manipulation_rcheckableType.test( elem.type ) ) {                                                                // 6476
		elem.defaultChecked = elem.checked;                                                                                  // 6477
	}                                                                                                                     // 6478
}                                                                                                                      // 6479
                                                                                                                       // 6480
jQuery.extend({                                                                                                        // 6481
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {                                                           // 6482
		var destElements, node, clone, i, srcElements,                                                                       // 6483
			inPage = jQuery.contains( elem.ownerDocument, elem );                                                               // 6484
                                                                                                                       // 6485
		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {       // 6486
			clone = elem.cloneNode( true );                                                                                     // 6487
                                                                                                                       // 6488
		// IE<=8 does not properly clone detached, unknown element nodes                                                     // 6489
		} else {                                                                                                             // 6490
			fragmentDiv.innerHTML = elem.outerHTML;                                                                             // 6491
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );                                                          // 6492
		}                                                                                                                    // 6493
                                                                                                                       // 6494
		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&                                             // 6495
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {                                        // 6496
                                                                                                                       // 6497
			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2                              // 6498
			destElements = getAll( clone );                                                                                     // 6499
			srcElements = getAll( elem );                                                                                       // 6500
                                                                                                                       // 6501
			// Fix all IE cloning issues                                                                                        // 6502
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {                                                               // 6503
				// Ensure that the destination node is not null; Fixes #9587                                                       // 6504
				if ( destElements[i] ) {                                                                                           // 6505
					fixCloneNodeIssues( node, destElements[i] );                                                                      // 6506
				}                                                                                                                  // 6507
			}                                                                                                                   // 6508
		}                                                                                                                    // 6509
                                                                                                                       // 6510
		// Copy the events from the original to the clone                                                                    // 6511
		if ( dataAndEvents ) {                                                                                               // 6512
			if ( deepDataAndEvents ) {                                                                                          // 6513
				srcElements = srcElements || getAll( elem );                                                                       // 6514
				destElements = destElements || getAll( clone );                                                                    // 6515
                                                                                                                       // 6516
				for ( i = 0; (node = srcElements[i]) != null; i++ ) {                                                              // 6517
					cloneCopyEvent( node, destElements[i] );                                                                          // 6518
				}                                                                                                                  // 6519
			} else {                                                                                                            // 6520
				cloneCopyEvent( elem, clone );                                                                                     // 6521
			}                                                                                                                   // 6522
		}                                                                                                                    // 6523
                                                                                                                       // 6524
		// Preserve script evaluation history                                                                                // 6525
		destElements = getAll( clone, "script" );                                                                            // 6526
		if ( destElements.length > 0 ) {                                                                                     // 6527
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );                                                 // 6528
		}                                                                                                                    // 6529
                                                                                                                       // 6530
		destElements = srcElements = node = null;                                                                            // 6531
                                                                                                                       // 6532
		// Return the cloned set                                                                                             // 6533
		return clone;                                                                                                        // 6534
	},                                                                                                                    // 6535
                                                                                                                       // 6536
	buildFragment: function( elems, context, scripts, selection ) {                                                       // 6537
		var j, elem, contains,                                                                                               // 6538
			tmp, tag, tbody, wrap,                                                                                              // 6539
			l = elems.length,                                                                                                   // 6540
                                                                                                                       // 6541
			// Ensure a safe fragment                                                                                           // 6542
			safe = createSafeFragment( context ),                                                                               // 6543
                                                                                                                       // 6544
			nodes = [],                                                                                                         // 6545
			i = 0;                                                                                                              // 6546
                                                                                                                       // 6547
		for ( ; i < l; i++ ) {                                                                                               // 6548
			elem = elems[ i ];                                                                                                  // 6549
                                                                                                                       // 6550
			if ( elem || elem === 0 ) {                                                                                         // 6551
                                                                                                                       // 6552
				// Add nodes directly                                                                                              // 6553
				if ( jQuery.type( elem ) === "object" ) {                                                                          // 6554
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );                                                           // 6555
                                                                                                                       // 6556
				// Convert non-html into a text node                                                                               // 6557
				} else if ( !rhtml.test( elem ) ) {                                                                                // 6558
					nodes.push( context.createTextNode( elem ) );                                                                     // 6559
                                                                                                                       // 6560
				// Convert html into DOM nodes                                                                                     // 6561
				} else {                                                                                                           // 6562
					tmp = tmp || safe.appendChild( context.createElement("div") );                                                    // 6563
                                                                                                                       // 6564
					// Deserialize a standard representation                                                                          // 6565
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();                                                     // 6566
					wrap = wrapMap[ tag ] || wrapMap._default;                                                                        // 6567
                                                                                                                       // 6568
					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];                                       // 6569
                                                                                                                       // 6570
					// Descend through wrappers to the right content                                                                  // 6571
					j = wrap[0];                                                                                                      // 6572
					while ( j-- ) {                                                                                                   // 6573
						tmp = tmp.lastChild;                                                                                             // 6574
					}                                                                                                                 // 6575
                                                                                                                       // 6576
					// Manually add leading whitespace removed by IE                                                                  // 6577
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {                                     // 6578
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );                                      // 6579
					}                                                                                                                 // 6580
                                                                                                                       // 6581
					// Remove IE's autoinserted <tbody> from table fragments                                                          // 6582
					if ( !jQuery.support.tbody ) {                                                                                    // 6583
                                                                                                                       // 6584
						// String was a <table>, *may* have spurious <tbody>                                                             // 6585
						elem = tag === "table" && !rtbody.test( elem ) ?                                                                 // 6586
							tmp.firstChild :                                                                                                // 6587
                                                                                                                       // 6588
							// String was a bare <thead> or <tfoot>                                                                         // 6589
							wrap[1] === "<table>" && !rtbody.test( elem ) ?                                                                 // 6590
								tmp :                                                                                                          // 6591
								0;                                                                                                             // 6592
                                                                                                                       // 6593
						j = elem && elem.childNodes.length;                                                                              // 6594
						while ( j-- ) {                                                                                                  // 6595
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {                   // 6596
								elem.removeChild( tbody );                                                                                     // 6597
							}                                                                                                               // 6598
						}                                                                                                                // 6599
					}                                                                                                                 // 6600
                                                                                                                       // 6601
					jQuery.merge( nodes, tmp.childNodes );                                                                            // 6602
                                                                                                                       // 6603
					// Fix #12392 for WebKit and IE > 9                                                                               // 6604
					tmp.textContent = "";                                                                                             // 6605
                                                                                                                       // 6606
					// Fix #12392 for oldIE                                                                                           // 6607
					while ( tmp.firstChild ) {                                                                                        // 6608
						tmp.removeChild( tmp.firstChild );                                                                               // 6609
					}                                                                                                                 // 6610
                                                                                                                       // 6611
					// Remember the top-level container for proper cleanup                                                            // 6612
					tmp = safe.lastChild;                                                                                             // 6613
				}                                                                                                                  // 6614
			}                                                                                                                   // 6615
		}                                                                                                                    // 6616
                                                                                                                       // 6617
		// Fix #11356: Clear elements from fragment                                                                          // 6618
		if ( tmp ) {                                                                                                         // 6619
			safe.removeChild( tmp );                                                                                            // 6620
		}                                                                                                                    // 6621
                                                                                                                       // 6622
		// Reset defaultChecked for any radios and checkboxes                                                                // 6623
		// about to be appended to the DOM in IE 6/7 (#8060)                                                                 // 6624
		if ( !jQuery.support.appendChecked ) {                                                                               // 6625
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );                                                         // 6626
		}                                                                                                                    // 6627
                                                                                                                       // 6628
		i = 0;                                                                                                               // 6629
		while ( (elem = nodes[ i++ ]) ) {                                                                                    // 6630
                                                                                                                       // 6631
			// #4087 - If origin and destination elements are the same, and this is                                             // 6632
			// that element, do not do anything                                                                                 // 6633
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {                                                      // 6634
				continue;                                                                                                          // 6635
			}                                                                                                                   // 6636
                                                                                                                       // 6637
			contains = jQuery.contains( elem.ownerDocument, elem );                                                             // 6638
                                                                                                                       // 6639
			// Append to fragment                                                                                               // 6640
			tmp = getAll( safe.appendChild( elem ), "script" );                                                                 // 6641
                                                                                                                       // 6642
			// Preserve script evaluation history                                                                               // 6643
			if ( contains ) {                                                                                                   // 6644
				setGlobalEval( tmp );                                                                                              // 6645
			}                                                                                                                   // 6646
                                                                                                                       // 6647
			// Capture executables                                                                                              // 6648
			if ( scripts ) {                                                                                                    // 6649
				j = 0;                                                                                                             // 6650
				while ( (elem = tmp[ j++ ]) ) {                                                                                    // 6651
					if ( rscriptType.test( elem.type || "" ) ) {                                                                      // 6652
						scripts.push( elem );                                                                                            // 6653
					}                                                                                                                 // 6654
				}                                                                                                                  // 6655
			}                                                                                                                   // 6656
		}                                                                                                                    // 6657
                                                                                                                       // 6658
		tmp = null;                                                                                                          // 6659
                                                                                                                       // 6660
		return safe;                                                                                                         // 6661
	},                                                                                                                    // 6662
                                                                                                                       // 6663
	cleanData: function( elems, /* internal */ acceptData ) {                                                             // 6664
		var elem, type, id, data,                                                                                            // 6665
			i = 0,                                                                                                              // 6666
			internalKey = jQuery.expando,                                                                                       // 6667
			cache = jQuery.cache,                                                                                               // 6668
			deleteExpando = jQuery.support.deleteExpando,                                                                       // 6669
			special = jQuery.event.special;                                                                                     // 6670
                                                                                                                       // 6671
		for ( ; (elem = elems[i]) != null; i++ ) {                                                                           // 6672
                                                                                                                       // 6673
			if ( acceptData || jQuery.acceptData( elem ) ) {                                                                    // 6674
                                                                                                                       // 6675
				id = elem[ internalKey ];                                                                                          // 6676
				data = id && cache[ id ];                                                                                          // 6677
                                                                                                                       // 6678
				if ( data ) {                                                                                                      // 6679
					if ( data.events ) {                                                                                              // 6680
						for ( type in data.events ) {                                                                                    // 6681
							if ( special[ type ] ) {                                                                                        // 6682
								jQuery.event.remove( elem, type );                                                                             // 6683
                                                                                                                       // 6684
							// This is a shortcut to avoid jQuery.event.remove's overhead                                                   // 6685
							} else {                                                                                                        // 6686
								jQuery.removeEvent( elem, type, data.handle );                                                                 // 6687
							}                                                                                                               // 6688
						}                                                                                                                // 6689
					}                                                                                                                 // 6690
                                                                                                                       // 6691
					// Remove cache only if it was not already removed by jQuery.event.remove                                         // 6692
					if ( cache[ id ] ) {                                                                                              // 6693
                                                                                                                       // 6694
						delete cache[ id ];                                                                                              // 6695
                                                                                                                       // 6696
						// IE does not allow us to delete expando properties from nodes,                                                 // 6697
						// nor does it have a removeAttribute function on Document nodes;                                                // 6698
						// we must handle all of these cases                                                                             // 6699
						if ( deleteExpando ) {                                                                                           // 6700
							delete elem[ internalKey ];                                                                                     // 6701
                                                                                                                       // 6702
						} else if ( typeof elem.removeAttribute !== core_strundefined ) {                                                // 6703
							elem.removeAttribute( internalKey );                                                                            // 6704
                                                                                                                       // 6705
						} else {                                                                                                         // 6706
							elem[ internalKey ] = null;                                                                                     // 6707
						}                                                                                                                // 6708
                                                                                                                       // 6709
						core_deletedIds.push( id );                                                                                      // 6710
					}                                                                                                                 // 6711
				}                                                                                                                  // 6712
			}                                                                                                                   // 6713
		}                                                                                                                    // 6714
	},                                                                                                                    // 6715
                                                                                                                       // 6716
	_evalUrl: function( url ) {                                                                                           // 6717
		return jQuery.ajax({                                                                                                 // 6718
			url: url,                                                                                                           // 6719
			type: "GET",                                                                                                        // 6720
			dataType: "script",                                                                                                 // 6721
			async: false,                                                                                                       // 6722
			global: false,                                                                                                      // 6723
			"throws": true                                                                                                      // 6724
		});                                                                                                                  // 6725
	}                                                                                                                     // 6726
});                                                                                                                    // 6727
jQuery.fn.extend({                                                                                                     // 6728
	wrapAll: function( html ) {                                                                                           // 6729
		if ( jQuery.isFunction( html ) ) {                                                                                   // 6730
			return this.each(function(i) {                                                                                      // 6731
				jQuery(this).wrapAll( html.call(this, i) );                                                                        // 6732
			});                                                                                                                 // 6733
		}                                                                                                                    // 6734
                                                                                                                       // 6735
		if ( this[0] ) {                                                                                                     // 6736
			// The elements to wrap the target around                                                                           // 6737
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);                                                 // 6738
                                                                                                                       // 6739
			if ( this[0].parentNode ) {                                                                                         // 6740
				wrap.insertBefore( this[0] );                                                                                      // 6741
			}                                                                                                                   // 6742
                                                                                                                       // 6743
			wrap.map(function() {                                                                                               // 6744
				var elem = this;                                                                                                   // 6745
                                                                                                                       // 6746
				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {                                                      // 6747
					elem = elem.firstChild;                                                                                           // 6748
				}                                                                                                                  // 6749
                                                                                                                       // 6750
				return elem;                                                                                                       // 6751
			}).append( this );                                                                                                  // 6752
		}                                                                                                                    // 6753
                                                                                                                       // 6754
		return this;                                                                                                         // 6755
	},                                                                                                                    // 6756
                                                                                                                       // 6757
	wrapInner: function( html ) {                                                                                         // 6758
		if ( jQuery.isFunction( html ) ) {                                                                                   // 6759
			return this.each(function(i) {                                                                                      // 6760
				jQuery(this).wrapInner( html.call(this, i) );                                                                      // 6761
			});                                                                                                                 // 6762
		}                                                                                                                    // 6763
                                                                                                                       // 6764
		return this.each(function() {                                                                                        // 6765
			var self = jQuery( this ),                                                                                          // 6766
				contents = self.contents();                                                                                        // 6767
                                                                                                                       // 6768
			if ( contents.length ) {                                                                                            // 6769
				contents.wrapAll( html );                                                                                          // 6770
                                                                                                                       // 6771
			} else {                                                                                                            // 6772
				self.append( html );                                                                                               // 6773
			}                                                                                                                   // 6774
		});                                                                                                                  // 6775
	},                                                                                                                    // 6776
                                                                                                                       // 6777
	wrap: function( html ) {                                                                                              // 6778
		var isFunction = jQuery.isFunction( html );                                                                          // 6779
                                                                                                                       // 6780
		return this.each(function(i) {                                                                                       // 6781
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );                                                   // 6782
		});                                                                                                                  // 6783
	},                                                                                                                    // 6784
                                                                                                                       // 6785
	unwrap: function() {                                                                                                  // 6786
		return this.parent().each(function() {                                                                               // 6787
			if ( !jQuery.nodeName( this, "body" ) ) {                                                                           // 6788
				jQuery( this ).replaceWith( this.childNodes );                                                                     // 6789
			}                                                                                                                   // 6790
		}).end();                                                                                                            // 6791
	}                                                                                                                     // 6792
});                                                                                                                    // 6793
var iframe, getStyles, curCSS,                                                                                         // 6794
	ralpha = /alpha\([^)]*\)/i,                                                                                           // 6795
	ropacity = /opacity\s*=\s*([^)]*)/,                                                                                   // 6796
	rposition = /^(top|right|bottom|left)$/,                                                                              // 6797
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"                 // 6798
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display                                  // 6799
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,                                                                           // 6800
	rmargin = /^margin/,                                                                                                  // 6801
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),                                                           // 6802
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),                                                  // 6803
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),                                                           // 6804
	elemdisplay = { BODY: "block" },                                                                                      // 6805
                                                                                                                       // 6806
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },                                           // 6807
	cssNormalTransform = {                                                                                                // 6808
		letterSpacing: 0,                                                                                                    // 6809
		fontWeight: 400                                                                                                      // 6810
	},                                                                                                                    // 6811
                                                                                                                       // 6812
	cssExpand = [ "Top", "Right", "Bottom", "Left" ],                                                                     // 6813
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];                                                                         // 6814
                                                                                                                       // 6815
// return a css property mapped to a potentially vendor prefixed property                                              // 6816
function vendorPropName( style, name ) {                                                                               // 6817
                                                                                                                       // 6818
	// shortcut for names that are not vendor prefixed                                                                    // 6819
	if ( name in style ) {                                                                                                // 6820
		return name;                                                                                                         // 6821
	}                                                                                                                     // 6822
                                                                                                                       // 6823
	// check for vendor prefixed names                                                                                    // 6824
	var capName = name.charAt(0).toUpperCase() + name.slice(1),                                                           // 6825
		origName = name,                                                                                                     // 6826
		i = cssPrefixes.length;                                                                                              // 6827
                                                                                                                       // 6828
	while ( i-- ) {                                                                                                       // 6829
		name = cssPrefixes[ i ] + capName;                                                                                   // 6830
		if ( name in style ) {                                                                                               // 6831
			return name;                                                                                                        // 6832
		}                                                                                                                    // 6833
	}                                                                                                                     // 6834
                                                                                                                       // 6835
	return origName;                                                                                                      // 6836
}                                                                                                                      // 6837
                                                                                                                       // 6838
function isHidden( elem, el ) {                                                                                        // 6839
	// isHidden might be called from jQuery#filter function;                                                              // 6840
	// in that case, element will be second argument                                                                      // 6841
	elem = el || elem;                                                                                                    // 6842
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );                      // 6843
}                                                                                                                      // 6844
                                                                                                                       // 6845
function showHide( elements, show ) {                                                                                  // 6846
	var display, elem, hidden,                                                                                            // 6847
		values = [],                                                                                                         // 6848
		index = 0,                                                                                                           // 6849
		length = elements.length;                                                                                            // 6850
                                                                                                                       // 6851
	for ( ; index < length; index++ ) {                                                                                   // 6852
		elem = elements[ index ];                                                                                            // 6853
		if ( !elem.style ) {                                                                                                 // 6854
			continue;                                                                                                           // 6855
		}                                                                                                                    // 6856
                                                                                                                       // 6857
		values[ index ] = jQuery._data( elem, "olddisplay" );                                                                // 6858
		display = elem.style.display;                                                                                        // 6859
		if ( show ) {                                                                                                        // 6860
			// Reset the inline display of this element to learn if it is                                                       // 6861
			// being hidden by cascaded rules or not                                                                            // 6862
			if ( !values[ index ] && display === "none" ) {                                                                     // 6863
				elem.style.display = "";                                                                                           // 6864
			}                                                                                                                   // 6865
                                                                                                                       // 6866
			// Set elements which have been overridden with display: none                                                       // 6867
			// in a stylesheet to whatever the default browser style is                                                         // 6868
			// for such an element                                                                                              // 6869
			if ( elem.style.display === "" && isHidden( elem ) ) {                                                              // 6870
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );                           // 6871
			}                                                                                                                   // 6872
		} else {                                                                                                             // 6873
                                                                                                                       // 6874
			if ( !values[ index ] ) {                                                                                           // 6875
				hidden = isHidden( elem );                                                                                         // 6876
                                                                                                                       // 6877
				if ( display && display !== "none" || !hidden ) {                                                                  // 6878
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );                             // 6879
				}                                                                                                                  // 6880
			}                                                                                                                   // 6881
		}                                                                                                                    // 6882
	}                                                                                                                     // 6883
                                                                                                                       // 6884
	// Set the display of most of the elements in a second loop                                                           // 6885
	// to avoid the constant reflow                                                                                       // 6886
	for ( index = 0; index < length; index++ ) {                                                                          // 6887
		elem = elements[ index ];                                                                                            // 6888
		if ( !elem.style ) {                                                                                                 // 6889
			continue;                                                                                                           // 6890
		}                                                                                                                    // 6891
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {                                         // 6892
			elem.style.display = show ? values[ index ] || "" : "none";                                                         // 6893
		}                                                                                                                    // 6894
	}                                                                                                                     // 6895
                                                                                                                       // 6896
	return elements;                                                                                                      // 6897
}                                                                                                                      // 6898
                                                                                                                       // 6899
jQuery.fn.extend({                                                                                                     // 6900
	css: function( name, value ) {                                                                                        // 6901
		return jQuery.access( this, function( elem, name, value ) {                                                          // 6902
			var len, styles,                                                                                                    // 6903
				map = {},                                                                                                          // 6904
				i = 0;                                                                                                             // 6905
                                                                                                                       // 6906
			if ( jQuery.isArray( name ) ) {                                                                                     // 6907
				styles = getStyles( elem );                                                                                        // 6908
				len = name.length;                                                                                                 // 6909
                                                                                                                       // 6910
				for ( ; i < len; i++ ) {                                                                                           // 6911
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );                                                  // 6912
				}                                                                                                                  // 6913
                                                                                                                       // 6914
				return map;                                                                                                        // 6915
			}                                                                                                                   // 6916
                                                                                                                       // 6917
			return value !== undefined ?                                                                                        // 6918
				jQuery.style( elem, name, value ) :                                                                                // 6919
				jQuery.css( elem, name );                                                                                          // 6920
		}, name, value, arguments.length > 1 );                                                                              // 6921
	},                                                                                                                    // 6922
	show: function() {                                                                                                    // 6923
		return showHide( this, true );                                                                                       // 6924
	},                                                                                                                    // 6925
	hide: function() {                                                                                                    // 6926
		return showHide( this );                                                                                             // 6927
	},                                                                                                                    // 6928
	toggle: function( state ) {                                                                                           // 6929
		if ( typeof state === "boolean" ) {                                                                                  // 6930
			return state ? this.show() : this.hide();                                                                           // 6931
		}                                                                                                                    // 6932
                                                                                                                       // 6933
		return this.each(function() {                                                                                        // 6934
			if ( isHidden( this ) ) {                                                                                           // 6935
				jQuery( this ).show();                                                                                             // 6936
			} else {                                                                                                            // 6937
				jQuery( this ).hide();                                                                                             // 6938
			}                                                                                                                   // 6939
		});                                                                                                                  // 6940
	}                                                                                                                     // 6941
});                                                                                                                    // 6942
                                                                                                                       // 6943
jQuery.extend({                                                                                                        // 6944
	// Add in style property hooks for overriding the default                                                             // 6945
	// behavior of getting and setting a style property                                                                   // 6946
	cssHooks: {                                                                                                           // 6947
		opacity: {                                                                                                           // 6948
			get: function( elem, computed ) {                                                                                   // 6949
				if ( computed ) {                                                                                                  // 6950
					// We should always get a number back from opacity                                                                // 6951
					var ret = curCSS( elem, "opacity" );                                                                              // 6952
					return ret === "" ? "1" : ret;                                                                                    // 6953
				}                                                                                                                  // 6954
			}                                                                                                                   // 6955
		}                                                                                                                    // 6956
	},                                                                                                                    // 6957
                                                                                                                       // 6958
	// Don't automatically add "px" to these possibly-unitless properties                                                 // 6959
	cssNumber: {                                                                                                          // 6960
		"columnCount": true,                                                                                                 // 6961
		"fillOpacity": true,                                                                                                 // 6962
		"fontWeight": true,                                                                                                  // 6963
		"lineHeight": true,                                                                                                  // 6964
		"opacity": true,                                                                                                     // 6965
		"order": true,                                                                                                       // 6966
		"orphans": true,                                                                                                     // 6967
		"widows": true,                                                                                                      // 6968
		"zIndex": true,                                                                                                      // 6969
		"zoom": true                                                                                                         // 6970
	},                                                                                                                    // 6971
                                                                                                                       // 6972
	// Add in properties whose names you wish to fix before                                                               // 6973
	// setting or getting the value                                                                                       // 6974
	cssProps: {                                                                                                           // 6975
		// normalize float css property                                                                                      // 6976
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"                                                         // 6977
	},                                                                                                                    // 6978
                                                                                                                       // 6979
	// Get and set the style property on a DOM Node                                                                       // 6980
	style: function( elem, name, value, extra ) {                                                                         // 6981
		// Don't set styles on text and comment nodes                                                                        // 6982
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {                                          // 6983
			return;                                                                                                             // 6984
		}                                                                                                                    // 6985
                                                                                                                       // 6986
		// Make sure that we're working with the right name                                                                  // 6987
		var ret, type, hooks,                                                                                                // 6988
			origName = jQuery.camelCase( name ),                                                                                // 6989
			style = elem.style;                                                                                                 // 6990
                                                                                                                       // 6991
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );           // 6992
                                                                                                                       // 6993
		// gets hook for the prefixed version                                                                                // 6994
		// followed by the unprefixed version                                                                                // 6995
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                      // 6996
                                                                                                                       // 6997
		// Check if we're setting a value                                                                                    // 6998
		if ( value !== undefined ) {                                                                                         // 6999
			type = typeof value;                                                                                                // 7000
                                                                                                                       // 7001
			// convert relative number strings (+= or -=) to relative numbers. #7345                                            // 7002
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {                                                         // 7003
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );                                          // 7004
				// Fixes bug #9237                                                                                                 // 7005
				type = "number";                                                                                                   // 7006
			}                                                                                                                   // 7007
                                                                                                                       // 7008
			// Make sure that NaN and null values aren't set. See: #7116                                                        // 7009
			if ( value == null || type === "number" && isNaN( value ) ) {                                                       // 7010
				return;                                                                                                            // 7011
			}                                                                                                                   // 7012
                                                                                                                       // 7013
			// If a number was passed in, add 'px' to the (except for certain CSS properties)                                   // 7014
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {                                                         // 7015
				value += "px";                                                                                                     // 7016
			}                                                                                                                   // 7017
                                                                                                                       // 7018
			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,                                     // 7019
			// but it would mean to define eight (for every problematic property) identical functions                           // 7020
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {                        // 7021
				style[ name ] = "inherit";                                                                                         // 7022
			}                                                                                                                   // 7023
                                                                                                                       // 7024
			// If a hook was provided, use that value, otherwise just set the specified value                                   // 7025
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {                     // 7026
                                                                                                                       // 7027
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided                                   // 7028
				// Fixes bug #5509                                                                                                 // 7029
				try {                                                                                                              // 7030
					style[ name ] = value;                                                                                            // 7031
				} catch(e) {}                                                                                                      // 7032
			}                                                                                                                   // 7033
                                                                                                                       // 7034
		} else {                                                                                                             // 7035
			// If a hook was provided get the non-computed value from there                                                     // 7036
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {                           // 7037
				return ret;                                                                                                        // 7038
			}                                                                                                                   // 7039
                                                                                                                       // 7040
			// Otherwise just get the value from the style object                                                               // 7041
			return style[ name ];                                                                                               // 7042
		}                                                                                                                    // 7043
	},                                                                                                                    // 7044
                                                                                                                       // 7045
	css: function( elem, name, extra, styles ) {                                                                          // 7046
		var num, val, hooks,                                                                                                 // 7047
			origName = jQuery.camelCase( name );                                                                                // 7048
                                                                                                                       // 7049
		// Make sure that we're working with the right name                                                                  // 7050
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );      // 7051
                                                                                                                       // 7052
		// gets hook for the prefixed version                                                                                // 7053
		// followed by the unprefixed version                                                                                // 7054
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                      // 7055
                                                                                                                       // 7056
		// If a hook was provided get the computed value from there                                                          // 7057
		if ( hooks && "get" in hooks ) {                                                                                     // 7058
			val = hooks.get( elem, true, extra );                                                                               // 7059
		}                                                                                                                    // 7060
                                                                                                                       // 7061
		// Otherwise, if a way to get the computed value exists, use that                                                    // 7062
		if ( val === undefined ) {                                                                                           // 7063
			val = curCSS( elem, name, styles );                                                                                 // 7064
		}                                                                                                                    // 7065
                                                                                                                       // 7066
		//convert "normal" to computed value                                                                                 // 7067
		if ( val === "normal" && name in cssNormalTransform ) {                                                              // 7068
			val = cssNormalTransform[ name ];                                                                                   // 7069
		}                                                                                                                    // 7070
                                                                                                                       // 7071
		// Return, converting to number if forced or a qualifier was provided and val looks numeric                          // 7072
		if ( extra === "" || extra ) {                                                                                       // 7073
			num = parseFloat( val );                                                                                            // 7074
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;                                                  // 7075
		}                                                                                                                    // 7076
		return val;                                                                                                          // 7077
	}                                                                                                                     // 7078
});                                                                                                                    // 7079
                                                                                                                       // 7080
// NOTE: we've included the "window" in window.getComputedStyle                                                        // 7081
// because jsdom on node.js will break without it.                                                                     // 7082
if ( window.getComputedStyle ) {                                                                                       // 7083
	getStyles = function( elem ) {                                                                                        // 7084
		return window.getComputedStyle( elem, null );                                                                        // 7085
	};                                                                                                                    // 7086
                                                                                                                       // 7087
	curCSS = function( elem, name, _computed ) {                                                                          // 7088
		var width, minWidth, maxWidth,                                                                                       // 7089
			computed = _computed || getStyles( elem ),                                                                          // 7090
                                                                                                                       // 7091
			// getPropertyValue is only needed for .css('filter') in IE9, see #12537                                            // 7092
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,                                 // 7093
			style = elem.style;                                                                                                 // 7094
                                                                                                                       // 7095
		if ( computed ) {                                                                                                    // 7096
                                                                                                                       // 7097
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {                                                 // 7098
				ret = jQuery.style( elem, name );                                                                                  // 7099
			}                                                                                                                   // 7100
                                                                                                                       // 7101
			// A tribute to the "awesome hack by Dean Edwards"                                                                  // 7102
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right                        // 7103
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels     // 7104
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values                             // 7105
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {                                                              // 7106
                                                                                                                       // 7107
				// Remember the original values                                                                                    // 7108
				width = style.width;                                                                                               // 7109
				minWidth = style.minWidth;                                                                                         // 7110
				maxWidth = style.maxWidth;                                                                                         // 7111
                                                                                                                       // 7112
				// Put in the new values to get a computed value out                                                               // 7113
				style.minWidth = style.maxWidth = style.width = ret;                                                               // 7114
				ret = computed.width;                                                                                              // 7115
                                                                                                                       // 7116
				// Revert the changed values                                                                                       // 7117
				style.width = width;                                                                                               // 7118
				style.minWidth = minWidth;                                                                                         // 7119
				style.maxWidth = maxWidth;                                                                                         // 7120
			}                                                                                                                   // 7121
		}                                                                                                                    // 7122
                                                                                                                       // 7123
		return ret;                                                                                                          // 7124
	};                                                                                                                    // 7125
} else if ( document.documentElement.currentStyle ) {                                                                  // 7126
	getStyles = function( elem ) {                                                                                        // 7127
		return elem.currentStyle;                                                                                            // 7128
	};                                                                                                                    // 7129
                                                                                                                       // 7130
	curCSS = function( elem, name, _computed ) {                                                                          // 7131
		var left, rs, rsLeft,                                                                                                // 7132
			computed = _computed || getStyles( elem ),                                                                          // 7133
			ret = computed ? computed[ name ] : undefined,                                                                      // 7134
			style = elem.style;                                                                                                 // 7135
                                                                                                                       // 7136
		// Avoid setting ret to empty string here                                                                            // 7137
		// so we don't default to auto                                                                                       // 7138
		if ( ret == null && style && style[ name ] ) {                                                                       // 7139
			ret = style[ name ];                                                                                                // 7140
		}                                                                                                                    // 7141
                                                                                                                       // 7142
		// From the awesome hack by Dean Edwards                                                                             // 7143
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291                                                  // 7144
                                                                                                                       // 7145
		// If we're not dealing with a regular pixel number                                                                  // 7146
		// but a number that has a weird ending, we need to convert it to pixels                                             // 7147
		// but not position css attributes, as those are proportional to the parent element instead                          // 7148
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem                       // 7149
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {                                                            // 7150
                                                                                                                       // 7151
			// Remember the original values                                                                                     // 7152
			left = style.left;                                                                                                  // 7153
			rs = elem.runtimeStyle;                                                                                             // 7154
			rsLeft = rs && rs.left;                                                                                             // 7155
                                                                                                                       // 7156
			// Put in the new values to get a computed value out                                                                // 7157
			if ( rsLeft ) {                                                                                                     // 7158
				rs.left = elem.currentStyle.left;                                                                                  // 7159
			}                                                                                                                   // 7160
			style.left = name === "fontSize" ? "1em" : ret;                                                                     // 7161
			ret = style.pixelLeft + "px";                                                                                       // 7162
                                                                                                                       // 7163
			// Revert the changed values                                                                                        // 7164
			style.left = left;                                                                                                  // 7165
			if ( rsLeft ) {                                                                                                     // 7166
				rs.left = rsLeft;                                                                                                  // 7167
			}                                                                                                                   // 7168
		}                                                                                                                    // 7169
                                                                                                                       // 7170
		return ret === "" ? "auto" : ret;                                                                                    // 7171
	};                                                                                                                    // 7172
}                                                                                                                      // 7173
                                                                                                                       // 7174
function setPositiveNumber( elem, value, subtract ) {                                                                  // 7175
	var matches = rnumsplit.exec( value );                                                                                // 7176
	return matches ?                                                                                                      // 7177
		// Guard against undefined "subtract", e.g., when used as in cssHooks                                                // 7178
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :                                         // 7179
		value;                                                                                                               // 7180
}                                                                                                                      // 7181
                                                                                                                       // 7182
function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {                                              // 7183
	var i = extra === ( isBorderBox ? "border" : "content" ) ?                                                            // 7184
		// If we already have the right measurement, avoid augmentation                                                      // 7185
		4 :                                                                                                                  // 7186
		// Otherwise initialize for horizontal or vertical properties                                                        // 7187
		name === "width" ? 1 : 0,                                                                                            // 7188
                                                                                                                       // 7189
		val = 0;                                                                                                             // 7190
                                                                                                                       // 7191
	for ( ; i < 4; i += 2 ) {                                                                                             // 7192
		// both box models exclude margin, so add it if we want it                                                           // 7193
		if ( extra === "margin" ) {                                                                                          // 7194
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );                                                    // 7195
		}                                                                                                                    // 7196
                                                                                                                       // 7197
		if ( isBorderBox ) {                                                                                                 // 7198
			// border-box includes padding, so remove it if we want content                                                     // 7199
			if ( extra === "content" ) {                                                                                        // 7200
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                               // 7201
			}                                                                                                                   // 7202
                                                                                                                       // 7203
			// at this point, extra isn't border nor margin, so remove border                                                   // 7204
			if ( extra !== "margin" ) {                                                                                         // 7205
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                                      // 7206
			}                                                                                                                   // 7207
		} else {                                                                                                             // 7208
			// at this point, extra isn't content, so add padding                                                               // 7209
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                                // 7210
                                                                                                                       // 7211
			// at this point, extra isn't content nor padding, so add border                                                    // 7212
			if ( extra !== "padding" ) {                                                                                        // 7213
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                                      // 7214
			}                                                                                                                   // 7215
		}                                                                                                                    // 7216
	}                                                                                                                     // 7217
                                                                                                                       // 7218
	return val;                                                                                                           // 7219
}                                                                                                                      // 7220
                                                                                                                       // 7221
function getWidthOrHeight( elem, name, extra ) {                                                                       // 7222
                                                                                                                       // 7223
	// Start with offset property, which is equivalent to the border-box value                                            // 7224
	var valueIsBorderBox = true,                                                                                          // 7225
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,                                                       // 7226
		styles = getStyles( elem ),                                                                                          // 7227
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";           // 7228
                                                                                                                       // 7229
	// some non-html elements return undefined for offsetWidth, so check for null/undefined                               // 7230
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285                                                          // 7231
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668                                                       // 7232
	if ( val <= 0 || val == null ) {                                                                                      // 7233
		// Fall back to computed then uncomputed css if necessary                                                            // 7234
		val = curCSS( elem, name, styles );                                                                                  // 7235
		if ( val < 0 || val == null ) {                                                                                      // 7236
			val = elem.style[ name ];                                                                                           // 7237
		}                                                                                                                    // 7238
                                                                                                                       // 7239
		// Computed unit is not pixels. Stop here and return.                                                                // 7240
		if ( rnumnonpx.test(val) ) {                                                                                         // 7241
			return val;                                                                                                         // 7242
		}                                                                                                                    // 7243
                                                                                                                       // 7244
		// we need the check for style in case a browser which returns unreliable values                                     // 7245
		// for getComputedStyle silently falls back to the reliable elem.style                                               // 7246
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );                // 7247
                                                                                                                       // 7248
		// Normalize "", auto, and prepare for extra                                                                         // 7249
		val = parseFloat( val ) || 0;                                                                                        // 7250
	}                                                                                                                     // 7251
                                                                                                                       // 7252
	// use the active box-sizing model to add/subtract irrelevant styles                                                  // 7253
	return ( val +                                                                                                        // 7254
		augmentWidthOrHeight(                                                                                                // 7255
			elem,                                                                                                               // 7256
			name,                                                                                                               // 7257
			extra || ( isBorderBox ? "border" : "content" ),                                                                    // 7258
			valueIsBorderBox,                                                                                                   // 7259
			styles                                                                                                              // 7260
		)                                                                                                                    // 7261
	) + "px";                                                                                                             // 7262
}                                                                                                                      // 7263
                                                                                                                       // 7264
// Try to determine the default display value of an element                                                            // 7265
function css_defaultDisplay( nodeName ) {                                                                              // 7266
	var doc = document,                                                                                                   // 7267
		display = elemdisplay[ nodeName ];                                                                                   // 7268
                                                                                                                       // 7269
	if ( !display ) {                                                                                                     // 7270
		display = actualDisplay( nodeName, doc );                                                                            // 7271
                                                                                                                       // 7272
		// If the simple way fails, read from inside an iframe                                                               // 7273
		if ( display === "none" || !display ) {                                                                              // 7274
			// Use the already-created iframe if possible                                                                       // 7275
			iframe = ( iframe ||                                                                                                // 7276
				jQuery("<iframe frameborder='0' width='0' height='0'/>")                                                           // 7277
				.css( "cssText", "display:block !important" )                                                                      // 7278
			).appendTo( doc.documentElement );                                                                                  // 7279
                                                                                                                       // 7280
			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse                                      // 7281
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;                                            // 7282
			doc.write("<!doctype html><html><body>");                                                                           // 7283
			doc.close();                                                                                                        // 7284
                                                                                                                       // 7285
			display = actualDisplay( nodeName, doc );                                                                           // 7286
			iframe.detach();                                                                                                    // 7287
		}                                                                                                                    // 7288
                                                                                                                       // 7289
		// Store the correct default display                                                                                 // 7290
		elemdisplay[ nodeName ] = display;                                                                                   // 7291
	}                                                                                                                     // 7292
                                                                                                                       // 7293
	return display;                                                                                                       // 7294
}                                                                                                                      // 7295
                                                                                                                       // 7296
// Called ONLY from within css_defaultDisplay                                                                          // 7297
function actualDisplay( name, doc ) {                                                                                  // 7298
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),                                                  // 7299
		display = jQuery.css( elem[0], "display" );                                                                          // 7300
	elem.remove();                                                                                                        // 7301
	return display;                                                                                                       // 7302
}                                                                                                                      // 7303
                                                                                                                       // 7304
jQuery.each([ "height", "width" ], function( i, name ) {                                                               // 7305
	jQuery.cssHooks[ name ] = {                                                                                           // 7306
		get: function( elem, computed, extra ) {                                                                             // 7307
			if ( computed ) {                                                                                                   // 7308
				// certain elements can have dimension info if we invisibly show them                                              // 7309
				// however, it must have a current display style that would benefit from this                                      // 7310
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?                              // 7311
					jQuery.swap( elem, cssShow, function() {                                                                          // 7312
						return getWidthOrHeight( elem, name, extra );                                                                    // 7313
					}) :                                                                                                              // 7314
					getWidthOrHeight( elem, name, extra );                                                                            // 7315
			}                                                                                                                   // 7316
		},                                                                                                                   // 7317
                                                                                                                       // 7318
		set: function( elem, value, extra ) {                                                                                // 7319
			var styles = extra && getStyles( elem );                                                                            // 7320
			return setPositiveNumber( elem, value, extra ?                                                                      // 7321
				augmentWidthOrHeight(                                                                                              // 7322
					elem,                                                                                                             // 7323
					name,                                                                                                             // 7324
					extra,                                                                                                            // 7325
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",                      // 7326
					styles                                                                                                            // 7327
				) : 0                                                                                                              // 7328
			);                                                                                                                  // 7329
		}                                                                                                                    // 7330
	};                                                                                                                    // 7331
});                                                                                                                    // 7332
                                                                                                                       // 7333
if ( !jQuery.support.opacity ) {                                                                                       // 7334
	jQuery.cssHooks.opacity = {                                                                                           // 7335
		get: function( elem, computed ) {                                                                                    // 7336
			// IE uses filters for opacity                                                                                      // 7337
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?      // 7338
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :                                                                          // 7339
				computed ? "1" : "";                                                                                               // 7340
		},                                                                                                                   // 7341
                                                                                                                       // 7342
		set: function( elem, value ) {                                                                                       // 7343
			var style = elem.style,                                                                                             // 7344
				currentStyle = elem.currentStyle,                                                                                  // 7345
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",                                   // 7346
				filter = currentStyle && currentStyle.filter || style.filter || "";                                                // 7347
                                                                                                                       // 7348
			// IE has trouble with opacity if it does not have layout                                                           // 7349
			// Force it by setting the zoom level                                                                               // 7350
			style.zoom = 1;                                                                                                     // 7351
                                                                                                                       // 7352
			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652                   // 7353
			// if value === "", then remove inline opacity #12685                                                               // 7354
			if ( ( value >= 1 || value === "" ) &&                                                                              // 7355
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&                                                             // 7356
					style.removeAttribute ) {                                                                                         // 7357
                                                                                                                       // 7358
				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText                                     // 7359
				// if "filter:" is present at all, clearType is disabled, we want to avoid this                                    // 7360
				// style.removeAttribute is IE Only, but so apparently is this code path...                                        // 7361
				style.removeAttribute( "filter" );                                                                                 // 7362
                                                                                                                       // 7363
				// if there is no filter style applied in a css rule or unset inline opacity, we are done                          // 7364
				if ( value === "" || currentStyle && !currentStyle.filter ) {                                                      // 7365
					return;                                                                                                           // 7366
				}                                                                                                                  // 7367
			}                                                                                                                   // 7368
                                                                                                                       // 7369
			// otherwise, set new filter values                                                                                 // 7370
			style.filter = ralpha.test( filter ) ?                                                                              // 7371
				filter.replace( ralpha, opacity ) :                                                                                // 7372
				filter + " " + opacity;                                                                                            // 7373
		}                                                                                                                    // 7374
	};                                                                                                                    // 7375
}                                                                                                                      // 7376
                                                                                                                       // 7377
// These hooks cannot be added until DOM ready because the support test                                                // 7378
// for it is not run until after DOM ready                                                                             // 7379
jQuery(function() {                                                                                                    // 7380
	if ( !jQuery.support.reliableMarginRight ) {                                                                          // 7381
		jQuery.cssHooks.marginRight = {                                                                                      // 7382
			get: function( elem, computed ) {                                                                                   // 7383
				if ( computed ) {                                                                                                  // 7384
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 7385
					// Work around by temporarily setting element display to inline-block                                             // 7386
					return jQuery.swap( elem, { "display": "inline-block" },                                                          // 7387
						curCSS, [ elem, "marginRight" ] );                                                                               // 7388
				}                                                                                                                  // 7389
			}                                                                                                                   // 7390
		};                                                                                                                   // 7391
	}                                                                                                                     // 7392
                                                                                                                       // 7393
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084                                                          // 7394
	// getComputedStyle returns percent when specified for top/left/bottom/right                                          // 7395
	// rather than make the css module depend on the offset module, we just check for it here                             // 7396
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {                                                          // 7397
		jQuery.each( [ "top", "left" ], function( i, prop ) {                                                                // 7398
			jQuery.cssHooks[ prop ] = {                                                                                         // 7399
				get: function( elem, computed ) {                                                                                  // 7400
					if ( computed ) {                                                                                                 // 7401
						computed = curCSS( elem, prop );                                                                                 // 7402
						// if curCSS returns percentage, fallback to offset                                                              // 7403
						return rnumnonpx.test( computed ) ?                                                                              // 7404
							jQuery( elem ).position()[ prop ] + "px" :                                                                      // 7405
							computed;                                                                                                       // 7406
					}                                                                                                                 // 7407
				}                                                                                                                  // 7408
			};                                                                                                                  // 7409
		});                                                                                                                  // 7410
	}                                                                                                                     // 7411
                                                                                                                       // 7412
});                                                                                                                    // 7413
                                                                                                                       // 7414
if ( jQuery.expr && jQuery.expr.filters ) {                                                                            // 7415
	jQuery.expr.filters.hidden = function( elem ) {                                                                       // 7416
		// Support: Opera <= 12.12                                                                                           // 7417
		// Opera reports offsetWidths and offsetHeights less than zero on some elements                                      // 7418
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||                                                            // 7419
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};                                                                                                                    // 7421
                                                                                                                       // 7422
	jQuery.expr.filters.visible = function( elem ) {                                                                      // 7423
		return !jQuery.expr.filters.hidden( elem );                                                                          // 7424
	};                                                                                                                    // 7425
}                                                                                                                      // 7426
                                                                                                                       // 7427
// These hooks are used by animate to expand properties                                                                // 7428
jQuery.each({                                                                                                          // 7429
	margin: "",                                                                                                           // 7430
	padding: "",                                                                                                          // 7431
	border: "Width"                                                                                                       // 7432
}, function( prefix, suffix ) {                                                                                        // 7433
	jQuery.cssHooks[ prefix + suffix ] = {                                                                                // 7434
		expand: function( value ) {                                                                                          // 7435
			var i = 0,                                                                                                          // 7436
				expanded = {},                                                                                                     // 7437
                                                                                                                       // 7438
				// assumes a single number if not a string                                                                         // 7439
				parts = typeof value === "string" ? value.split(" ") : [ value ];                                                  // 7440
                                                                                                                       // 7441
			for ( ; i < 4; i++ ) {                                                                                              // 7442
				expanded[ prefix + cssExpand[ i ] + suffix ] =                                                                     // 7443
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];                                                                       // 7444
			}                                                                                                                   // 7445
                                                                                                                       // 7446
			return expanded;                                                                                                    // 7447
		}                                                                                                                    // 7448
	};                                                                                                                    // 7449
                                                                                                                       // 7450
	if ( !rmargin.test( prefix ) ) {                                                                                      // 7451
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;                                                          // 7452
	}                                                                                                                     // 7453
});                                                                                                                    // 7454
var r20 = /%20/g,                                                                                                      // 7455
	rbracket = /\[\]$/,                                                                                                   // 7456
	rCRLF = /\r?\n/g,                                                                                                     // 7457
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,                                                            // 7458
	rsubmittable = /^(?:input|select|textarea|keygen)/i;                                                                  // 7459
                                                                                                                       // 7460
jQuery.fn.extend({                                                                                                     // 7461
	serialize: function() {                                                                                               // 7462
		return jQuery.param( this.serializeArray() );                                                                        // 7463
	},                                                                                                                    // 7464
	serializeArray: function() {                                                                                          // 7465
		return this.map(function(){                                                                                          // 7466
			// Can add propHook for "elements" to filter or add form elements                                                   // 7467
			var elements = jQuery.prop( this, "elements" );                                                                     // 7468
			return elements ? jQuery.makeArray( elements ) : this;                                                              // 7469
		})                                                                                                                   // 7470
		.filter(function(){                                                                                                  // 7471
			var type = this.type;                                                                                               // 7472
			// Use .is(":disabled") so that fieldset[disabled] works                                                            // 7473
			return this.name && !jQuery( this ).is( ":disabled" ) &&                                                            // 7474
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&                                             // 7475
				( this.checked || !manipulation_rcheckableType.test( type ) );                                                     // 7476
		})                                                                                                                   // 7477
		.map(function( i, elem ){                                                                                            // 7478
			var val = jQuery( this ).val();                                                                                     // 7479
                                                                                                                       // 7480
			return val == null ?                                                                                                // 7481
				null :                                                                                                             // 7482
				jQuery.isArray( val ) ?                                                                                            // 7483
					jQuery.map( val, function( val ){                                                                                 // 7484
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                                 // 7485
					}) :                                                                                                              // 7486
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                                         // 7487
		}).get();                                                                                                            // 7488
	}                                                                                                                     // 7489
});                                                                                                                    // 7490
                                                                                                                       // 7491
//Serialize an array of form elements or a set of                                                                      // 7492
//key/values into a query string                                                                                       // 7493
jQuery.param = function( a, traditional ) {                                                                            // 7494
	var prefix,                                                                                                           // 7495
		s = [],                                                                                                              // 7496
		add = function( key, value ) {                                                                                       // 7497
			// If value is a function, invoke it and return its value                                                           // 7498
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );                                      // 7499
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );                                      // 7500
		};                                                                                                                   // 7501
                                                                                                                       // 7502
	// Set traditional to true for jQuery <= 1.3.2 behavior.                                                              // 7503
	if ( traditional === undefined ) {                                                                                    // 7504
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;                                                // 7505
	}                                                                                                                     // 7506
                                                                                                                       // 7507
	// If an array was passed in, assume that it is an array of form elements.                                            // 7508
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {                                            // 7509
		// Serialize the form elements                                                                                       // 7510
		jQuery.each( a, function() {                                                                                         // 7511
			add( this.name, this.value );                                                                                       // 7512
		});                                                                                                                  // 7513
                                                                                                                       // 7514
	} else {                                                                                                              // 7515
		// If traditional, encode the "old" way (the way 1.3.2 or older                                                      // 7516
		// did it), otherwise encode params recursively.                                                                     // 7517
		for ( prefix in a ) {                                                                                                // 7518
			buildParams( prefix, a[ prefix ], traditional, add );                                                               // 7519
		}                                                                                                                    // 7520
	}                                                                                                                     // 7521
                                                                                                                       // 7522
	// Return the resulting serialization                                                                                 // 7523
	return s.join( "&" ).replace( r20, "+" );                                                                             // 7524
};                                                                                                                     // 7525
                                                                                                                       // 7526
function buildParams( prefix, obj, traditional, add ) {                                                                // 7527
	var name;                                                                                                             // 7528
                                                                                                                       // 7529
	if ( jQuery.isArray( obj ) ) {                                                                                        // 7530
		// Serialize array item.                                                                                             // 7531
		jQuery.each( obj, function( i, v ) {                                                                                 // 7532
			if ( traditional || rbracket.test( prefix ) ) {                                                                     // 7533
				// Treat each array item as a scalar.                                                                              // 7534
				add( prefix, v );                                                                                                  // 7535
                                                                                                                       // 7536
			} else {                                                                                                            // 7537
				// Item is non-scalar (array or object), encode its numeric index.                                                 // 7538
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );                       // 7539
			}                                                                                                                   // 7540
		});                                                                                                                  // 7541
                                                                                                                       // 7542
	} else if ( !traditional && jQuery.type( obj ) === "object" ) {                                                       // 7543
		// Serialize object item.                                                                                            // 7544
		for ( name in obj ) {                                                                                                // 7545
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );                                            // 7546
		}                                                                                                                    // 7547
                                                                                                                       // 7548
	} else {                                                                                                              // 7549
		// Serialize scalar item.                                                                                            // 7550
		add( prefix, obj );                                                                                                  // 7551
	}                                                                                                                     // 7552
}                                                                                                                      // 7553
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +                                // 7554
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +                                             // 7555
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {                    // 7556
                                                                                                                       // 7557
	// Handle event binding                                                                                               // 7558
	jQuery.fn[ name ] = function( data, fn ) {                                                                            // 7559
		return arguments.length > 0 ?                                                                                        // 7560
			this.on( name, null, data, fn ) :                                                                                   // 7561
			this.trigger( name );                                                                                               // 7562
	};                                                                                                                    // 7563
});                                                                                                                    // 7564
                                                                                                                       // 7565
jQuery.fn.extend({                                                                                                     // 7566
	hover: function( fnOver, fnOut ) {                                                                                    // 7567
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );                                                      // 7568
	},                                                                                                                    // 7569
                                                                                                                       // 7570
	bind: function( types, data, fn ) {                                                                                   // 7571
		return this.on( types, null, data, fn );                                                                             // 7572
	},                                                                                                                    // 7573
	unbind: function( types, fn ) {                                                                                       // 7574
		return this.off( types, null, fn );                                                                                  // 7575
	},                                                                                                                    // 7576
                                                                                                                       // 7577
	delegate: function( selector, types, data, fn ) {                                                                     // 7578
		return this.on( types, selector, data, fn );                                                                         // 7579
	},                                                                                                                    // 7580
	undelegate: function( selector, types, fn ) {                                                                         // 7581
		// ( namespace ) or ( selector, types [, fn] )                                                                       // 7582
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );                // 7583
	}                                                                                                                     // 7584
});                                                                                                                    // 7585
var                                                                                                                    // 7586
	// Document location                                                                                                  // 7587
	ajaxLocParts,                                                                                                         // 7588
	ajaxLocation,                                                                                                         // 7589
	ajax_nonce = jQuery.now(),                                                                                            // 7590
                                                                                                                       // 7591
	ajax_rquery = /\?/,                                                                                                   // 7592
	rhash = /#.*$/,                                                                                                       // 7593
	rts = /([?&])_=[^&]*/,                                                                                                // 7594
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL                                       // 7595
	// #7653, #8125, #8152: local protocol detection                                                                      // 7596
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,                                         // 7597
	rnoContent = /^(?:GET|HEAD)$/,                                                                                        // 7598
	rprotocol = /^\/\//,                                                                                                  // 7599
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,                                                                 // 7600
                                                                                                                       // 7601
	// Keep a copy of the old load method                                                                                 // 7602
	_load = jQuery.fn.load,                                                                                               // 7603
                                                                                                                       // 7604
	/* Prefilters                                                                                                         // 7605
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)                                // 7606
	 * 2) These are called:                                                                                               // 7607
	 *    - BEFORE asking for a transport                                                                                 // 7608
	 *    - AFTER param serialization (s.data is a string if s.processData is true)                                       // 7609
	 * 3) key is the dataType                                                                                             // 7610
	 * 4) the catchall symbol "*" can be used                                                                             // 7611
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed                            // 7612
	 */                                                                                                                   // 7613
	prefilters = {},                                                                                                      // 7614
                                                                                                                       // 7615
	/* Transports bindings                                                                                                // 7616
	 * 1) key is the dataType                                                                                             // 7617
	 * 2) the catchall symbol "*" can be used                                                                             // 7618
	 * 3) selection will start with transport dataType and THEN go to "*" if needed                                       // 7619
	 */                                                                                                                   // 7620
	transports = {},                                                                                                      // 7621
                                                                                                                       // 7622
	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression                               // 7623
	allTypes = "*/".concat("*");                                                                                          // 7624
                                                                                                                       // 7625
// #8138, IE may throw an exception when accessing                                                                     // 7626
// a field from window.location if document.domain has been set                                                        // 7627
try {                                                                                                                  // 7628
	ajaxLocation = location.href;                                                                                         // 7629
} catch( e ) {                                                                                                         // 7630
	// Use the href attribute of an A element                                                                             // 7631
	// since IE will modify it given document.location                                                                    // 7632
	ajaxLocation = document.createElement( "a" );                                                                         // 7633
	ajaxLocation.href = "";                                                                                               // 7634
	ajaxLocation = ajaxLocation.href;                                                                                     // 7635
}                                                                                                                      // 7636
                                                                                                                       // 7637
// Segment location into parts                                                                                         // 7638
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];                                                          // 7639
                                                                                                                       // 7640
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport                                                // 7641
function addToPrefiltersOrTransports( structure ) {                                                                    // 7642
                                                                                                                       // 7643
	// dataTypeExpression is optional and defaults to "*"                                                                 // 7644
	return function( dataTypeExpression, func ) {                                                                         // 7645
                                                                                                                       // 7646
		if ( typeof dataTypeExpression !== "string" ) {                                                                      // 7647
			func = dataTypeExpression;                                                                                          // 7648
			dataTypeExpression = "*";                                                                                           // 7649
		}                                                                                                                    // 7650
                                                                                                                       // 7651
		var dataType,                                                                                                        // 7652
			i = 0,                                                                                                              // 7653
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];                                         // 7654
                                                                                                                       // 7655
		if ( jQuery.isFunction( func ) ) {                                                                                   // 7656
			// For each dataType in the dataTypeExpression                                                                      // 7657
			while ( (dataType = dataTypes[i++]) ) {                                                                             // 7658
				// Prepend if requested                                                                                            // 7659
				if ( dataType[0] === "+" ) {                                                                                       // 7660
					dataType = dataType.slice( 1 ) || "*";                                                                            // 7661
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );                                            // 7662
                                                                                                                       // 7663
				// Otherwise append                                                                                                // 7664
				} else {                                                                                                           // 7665
					(structure[ dataType ] = structure[ dataType ] || []).push( func );                                               // 7666
				}                                                                                                                  // 7667
			}                                                                                                                   // 7668
		}                                                                                                                    // 7669
	};                                                                                                                    // 7670
}                                                                                                                      // 7671
                                                                                                                       // 7672
// Base inspection function for prefilters and transports                                                              // 7673
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {                                 // 7674
                                                                                                                       // 7675
	var inspected = {},                                                                                                   // 7676
		seekingTransport = ( structure === transports );                                                                     // 7677
                                                                                                                       // 7678
	function inspect( dataType ) {                                                                                        // 7679
		var selected;                                                                                                        // 7680
		inspected[ dataType ] = true;                                                                                        // 7681
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {                                        // 7682
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );                                    // 7683
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {           // 7684
				options.dataTypes.unshift( dataTypeOrTransport );                                                                  // 7685
				inspect( dataTypeOrTransport );                                                                                    // 7686
				return false;                                                                                                      // 7687
			} else if ( seekingTransport ) {                                                                                    // 7688
				return !( selected = dataTypeOrTransport );                                                                        // 7689
			}                                                                                                                   // 7690
		});                                                                                                                  // 7691
		return selected;                                                                                                     // 7692
	}                                                                                                                     // 7693
                                                                                                                       // 7694
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );                                      // 7695
}                                                                                                                      // 7696
                                                                                                                       // 7697
// A special extend for ajax options                                                                                   // 7698
// that takes "flat" options (not to be deep extended)                                                                 // 7699
// Fixes #9887                                                                                                         // 7700
function ajaxExtend( target, src ) {                                                                                   // 7701
	var deep, key,                                                                                                        // 7702
		flatOptions = jQuery.ajaxSettings.flatOptions || {};                                                                 // 7703
                                                                                                                       // 7704
	for ( key in src ) {                                                                                                  // 7705
		if ( src[ key ] !== undefined ) {                                                                                    // 7706
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];                                      // 7707
		}                                                                                                                    // 7708
	}                                                                                                                     // 7709
	if ( deep ) {                                                                                                         // 7710
		jQuery.extend( true, target, deep );                                                                                 // 7711
	}                                                                                                                     // 7712
                                                                                                                       // 7713
	return target;                                                                                                        // 7714
}                                                                                                                      // 7715
                                                                                                                       // 7716
jQuery.fn.load = function( url, params, callback ) {                                                                   // 7717
	if ( typeof url !== "string" && _load ) {                                                                             // 7718
		return _load.apply( this, arguments );                                                                               // 7719
	}                                                                                                                     // 7720
                                                                                                                       // 7721
	var selector, response, type,                                                                                         // 7722
		self = this,                                                                                                         // 7723
		off = url.indexOf(" ");                                                                                              // 7724
                                                                                                                       // 7725
	if ( off >= 0 ) {                                                                                                     // 7726
		selector = url.slice( off, url.length );                                                                             // 7727
		url = url.slice( 0, off );                                                                                           // 7728
	}                                                                                                                     // 7729
                                                                                                                       // 7730
	// If it's a function                                                                                                 // 7731
	if ( jQuery.isFunction( params ) ) {                                                                                  // 7732
                                                                                                                       // 7733
		// We assume that it's the callback                                                                                  // 7734
		callback = params;                                                                                                   // 7735
		params = undefined;                                                                                                  // 7736
                                                                                                                       // 7737
	// Otherwise, build a param string                                                                                    // 7738
	} else if ( params && typeof params === "object" ) {                                                                  // 7739
		type = "POST";                                                                                                       // 7740
	}                                                                                                                     // 7741
                                                                                                                       // 7742
	// If we have elements to modify, make the request                                                                    // 7743
	if ( self.length > 0 ) {                                                                                              // 7744
		jQuery.ajax({                                                                                                        // 7745
			url: url,                                                                                                           // 7746
                                                                                                                       // 7747
			// if "type" variable is undefined, then "GET" method will be used                                                  // 7748
			type: type,                                                                                                         // 7749
			dataType: "html",                                                                                                   // 7750
			data: params                                                                                                        // 7751
		}).done(function( responseText ) {                                                                                   // 7752
                                                                                                                       // 7753
			// Save response for use in complete callback                                                                       // 7754
			response = arguments;                                                                                               // 7755
                                                                                                                       // 7756
			self.html( selector ?                                                                                               // 7757
                                                                                                                       // 7758
				// If a selector was specified, locate the right elements in a dummy div                                           // 7759
				// Exclude scripts to avoid IE 'Permission Denied' errors                                                          // 7760
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :                                      // 7761
                                                                                                                       // 7762
				// Otherwise use the full result                                                                                   // 7763
				responseText );                                                                                                    // 7764
                                                                                                                       // 7765
		}).complete( callback && function( jqXHR, status ) {                                                                 // 7766
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );                                           // 7767
		});                                                                                                                  // 7768
	}                                                                                                                     // 7769
                                                                                                                       // 7770
	return this;                                                                                                          // 7771
};                                                                                                                     // 7772
                                                                                                                       // 7773
// Attach a bunch of functions for handling common AJAX events                                                         // 7774
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){ // 7775
	jQuery.fn[ type ] = function( fn ){                                                                                   // 7776
		return this.on( type, fn );                                                                                          // 7777
	};                                                                                                                    // 7778
});                                                                                                                    // 7779
                                                                                                                       // 7780
jQuery.extend({                                                                                                        // 7781
                                                                                                                       // 7782
	// Counter for holding the number of active queries                                                                   // 7783
	active: 0,                                                                                                            // 7784
                                                                                                                       // 7785
	// Last-Modified header cache for next request                                                                        // 7786
	lastModified: {},                                                                                                     // 7787
	etag: {},                                                                                                             // 7788
                                                                                                                       // 7789
	ajaxSettings: {                                                                                                       // 7790
		url: ajaxLocation,                                                                                                   // 7791
		type: "GET",                                                                                                         // 7792
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),                                                                   // 7793
		global: true,                                                                                                        // 7794
		processData: true,                                                                                                   // 7795
		async: true,                                                                                                         // 7796
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",                                                     // 7797
		/*                                                                                                                   // 7798
		timeout: 0,                                                                                                          // 7799
		data: null,                                                                                                          // 7800
		dataType: null,                                                                                                      // 7801
		username: null,                                                                                                      // 7802
		password: null,                                                                                                      // 7803
		cache: null,                                                                                                         // 7804
		throws: false,                                                                                                       // 7805
		traditional: false,                                                                                                  // 7806
		headers: {},                                                                                                         // 7807
		*/                                                                                                                   // 7808
                                                                                                                       // 7809
		accepts: {                                                                                                           // 7810
			"*": allTypes,                                                                                                      // 7811
			text: "text/plain",                                                                                                 // 7812
			html: "text/html",                                                                                                  // 7813
			xml: "application/xml, text/xml",                                                                                   // 7814
			json: "application/json, text/javascript"                                                                           // 7815
		},                                                                                                                   // 7816
                                                                                                                       // 7817
		contents: {                                                                                                          // 7818
			xml: /xml/,                                                                                                         // 7819
			html: /html/,                                                                                                       // 7820
			json: /json/                                                                                                        // 7821
		},                                                                                                                   // 7822
                                                                                                                       // 7823
		responseFields: {                                                                                                    // 7824
			xml: "responseXML",                                                                                                 // 7825
			text: "responseText",                                                                                               // 7826
			json: "responseJSON"                                                                                                // 7827
		},                                                                                                                   // 7828
                                                                                                                       // 7829
		// Data converters                                                                                                   // 7830
		// Keys separate source (or catchall "*") and destination types with a single space                                  // 7831
		converters: {                                                                                                        // 7832
                                                                                                                       // 7833
			// Convert anything to text                                                                                         // 7834
			"* text": String,                                                                                                   // 7835
                                                                                                                       // 7836
			// Text to html (true = no transformation)                                                                          // 7837
			"text html": true,                                                                                                  // 7838
                                                                                                                       // 7839
			// Evaluate text as a json expression                                                                               // 7840
			"text json": jQuery.parseJSON,                                                                                      // 7841
                                                                                                                       // 7842
			// Parse text as xml                                                                                                // 7843
			"text xml": jQuery.parseXML                                                                                         // 7844
		},                                                                                                                   // 7845
                                                                                                                       // 7846
		// For options that shouldn't be deep extended:                                                                      // 7847
		// you can add your own custom options here if                                                                       // 7848
		// and when you create one that shouldn't be                                                                         // 7849
		// deep extended (see ajaxExtend)                                                                                    // 7850
		flatOptions: {                                                                                                       // 7851
			url: true,                                                                                                          // 7852
			context: true                                                                                                       // 7853
		}                                                                                                                    // 7854
	},                                                                                                                    // 7855
                                                                                                                       // 7856
	// Creates a full fledged settings object into target                                                                 // 7857
	// with both ajaxSettings and settings fields.                                                                        // 7858
	// If target is omitted, writes into ajaxSettings.                                                                    // 7859
	ajaxSetup: function( target, settings ) {                                                                             // 7860
		return settings ?                                                                                                    // 7861
                                                                                                                       // 7862
			// Building a settings object                                                                                       // 7863
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :                                                 // 7864
                                                                                                                       // 7865
			// Extending ajaxSettings                                                                                           // 7866
			ajaxExtend( jQuery.ajaxSettings, target );                                                                          // 7867
	},                                                                                                                    // 7868
                                                                                                                       // 7869
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),                                                             // 7870
	ajaxTransport: addToPrefiltersOrTransports( transports ),                                                             // 7871
                                                                                                                       // 7872
	// Main method                                                                                                        // 7873
	ajax: function( url, options ) {                                                                                      // 7874
                                                                                                                       // 7875
		// If url is an object, simulate pre-1.5 signature                                                                   // 7876
		if ( typeof url === "object" ) {                                                                                     // 7877
			options = url;                                                                                                      // 7878
			url = undefined;                                                                                                    // 7879
		}                                                                                                                    // 7880
                                                                                                                       // 7881
		// Force options to be an object                                                                                     // 7882
		options = options || {};                                                                                             // 7883
                                                                                                                       // 7884
		var // Cross-domain detection vars                                                                                   // 7885
			parts,                                                                                                              // 7886
			// Loop variable                                                                                                    // 7887
			i,                                                                                                                  // 7888
			// URL without anti-cache param                                                                                     // 7889
			cacheURL,                                                                                                           // 7890
			// Response headers as string                                                                                       // 7891
			responseHeadersString,                                                                                              // 7892
			// timeout handle                                                                                                   // 7893
			timeoutTimer,                                                                                                       // 7894
                                                                                                                       // 7895
			// To know if global events are to be dispatched                                                                    // 7896
			fireGlobals,                                                                                                        // 7897
                                                                                                                       // 7898
			transport,                                                                                                          // 7899
			// Response headers                                                                                                 // 7900
			responseHeaders,                                                                                                    // 7901
			// Create the final options object                                                                                  // 7902
			s = jQuery.ajaxSetup( {}, options ),                                                                                // 7903
			// Callbacks context                                                                                                // 7904
			callbackContext = s.context || s,                                                                                   // 7905
			// Context for global events is callbackContext if it is a DOM node or jQuery collection                            // 7906
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?                          // 7907
				jQuery( callbackContext ) :                                                                                        // 7908
				jQuery.event,                                                                                                      // 7909
			// Deferreds                                                                                                        // 7910
			deferred = jQuery.Deferred(),                                                                                       // 7911
			completeDeferred = jQuery.Callbacks("once memory"),                                                                 // 7912
			// Status-dependent callbacks                                                                                       // 7913
			statusCode = s.statusCode || {},                                                                                    // 7914
			// Headers (they are sent all at once)                                                                              // 7915
			requestHeaders = {},                                                                                                // 7916
			requestHeadersNames = {},                                                                                           // 7917
			// The jqXHR state                                                                                                  // 7918
			state = 0,                                                                                                          // 7919
			// Default abort message                                                                                            // 7920
			strAbort = "canceled",                                                                                              // 7921
			// Fake xhr                                                                                                         // 7922
			jqXHR = {                                                                                                           // 7923
				readyState: 0,                                                                                                     // 7924
                                                                                                                       // 7925
				// Builds headers hashtable if needed                                                                              // 7926
				getResponseHeader: function( key ) {                                                                               // 7927
					var match;                                                                                                        // 7928
					if ( state === 2 ) {                                                                                              // 7929
						if ( !responseHeaders ) {                                                                                        // 7930
							responseHeaders = {};                                                                                           // 7931
							while ( (match = rheaders.exec( responseHeadersString )) ) {                                                    // 7932
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];                                                        // 7933
							}                                                                                                               // 7934
						}                                                                                                                // 7935
						match = responseHeaders[ key.toLowerCase() ];                                                                    // 7936
					}                                                                                                                 // 7937
					return match == null ? null : match;                                                                              // 7938
				},                                                                                                                 // 7939
                                                                                                                       // 7940
				// Raw string                                                                                                      // 7941
				getAllResponseHeaders: function() {                                                                                // 7942
					return state === 2 ? responseHeadersString : null;                                                                // 7943
				},                                                                                                                 // 7944
                                                                                                                       // 7945
				// Caches the header                                                                                               // 7946
				setRequestHeader: function( name, value ) {                                                                        // 7947
					var lname = name.toLowerCase();                                                                                   // 7948
					if ( !state ) {                                                                                                   // 7949
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;                                      // 7950
						requestHeaders[ name ] = value;                                                                                  // 7951
					}                                                                                                                 // 7952
					return this;                                                                                                      // 7953
				},                                                                                                                 // 7954
                                                                                                                       // 7955
				// Overrides response content-type header                                                                          // 7956
				overrideMimeType: function( type ) {                                                                               // 7957
					if ( !state ) {                                                                                                   // 7958
						s.mimeType = type;                                                                                               // 7959
					}                                                                                                                 // 7960
					return this;                                                                                                      // 7961
				},                                                                                                                 // 7962
                                                                                                                       // 7963
				// Status-dependent callbacks                                                                                      // 7964
				statusCode: function( map ) {                                                                                      // 7965
					var code;                                                                                                         // 7966
					if ( map ) {                                                                                                      // 7967
						if ( state < 2 ) {                                                                                               // 7968
							for ( code in map ) {                                                                                           // 7969
								// Lazy-add the new callback in a way that preserves old ones                                                  // 7970
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];                                                      // 7971
							}                                                                                                               // 7972
						} else {                                                                                                         // 7973
							// Execute the appropriate callbacks                                                                            // 7974
							jqXHR.always( map[ jqXHR.status ] );                                                                            // 7975
						}                                                                                                                // 7976
					}                                                                                                                 // 7977
					return this;                                                                                                      // 7978
				},                                                                                                                 // 7979
                                                                                                                       // 7980
				// Cancel the request                                                                                              // 7981
				abort: function( statusText ) {                                                                                    // 7982
					var finalText = statusText || strAbort;                                                                           // 7983
					if ( transport ) {                                                                                                // 7984
						transport.abort( finalText );                                                                                    // 7985
					}                                                                                                                 // 7986
					done( 0, finalText );                                                                                             // 7987
					return this;                                                                                                      // 7988
				}                                                                                                                  // 7989
			};                                                                                                                  // 7990
                                                                                                                       // 7991
		// Attach deferreds                                                                                                  // 7992
		deferred.promise( jqXHR ).complete = completeDeferred.add;                                                           // 7993
		jqXHR.success = jqXHR.done;                                                                                          // 7994
		jqXHR.error = jqXHR.fail;                                                                                            // 7995
                                                                                                                       // 7996
		// Remove hash character (#7531: and string promotion)                                                               // 7997
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)                                           // 7998
		// Handle falsy url in the settings object (#10093: consistency with old signature)                                  // 7999
		// We also use the url parameter if available                                                                        // 8000
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
                                                                                                                       // 8002
		// Alias method option to type as per ticket #12004                                                                  // 8003
		s.type = options.method || options.type || s.method || s.type;                                                       // 8004
                                                                                                                       // 8005
		// Extract dataTypes list                                                                                            // 8006
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];                        // 8007
                                                                                                                       // 8008
		// A cross-domain request is in order when we have a protocol:host:port mismatch                                     // 8009
		if ( s.crossDomain == null ) {                                                                                       // 8010
			parts = rurl.exec( s.url.toLowerCase() );                                                                           // 8011
			s.crossDomain = !!( parts &&                                                                                        // 8012
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||                                          // 8013
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==                                                   // 8014
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )                                      // 8015
			);                                                                                                                  // 8016
		}                                                                                                                    // 8017
                                                                                                                       // 8018
		// Convert data if not already a string                                                                              // 8019
		if ( s.data && s.processData && typeof s.data !== "string" ) {                                                       // 8020
			s.data = jQuery.param( s.data, s.traditional );                                                                     // 8021
		}                                                                                                                    // 8022
                                                                                                                       // 8023
		// Apply prefilters                                                                                                  // 8024
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );                                                      // 8025
                                                                                                                       // 8026
		// If request was aborted inside a prefilter, stop there                                                             // 8027
		if ( state === 2 ) {                                                                                                 // 8028
			return jqXHR;                                                                                                       // 8029
		}                                                                                                                    // 8030
                                                                                                                       // 8031
		// We can fire global events as of now if asked to                                                                   // 8032
		fireGlobals = s.global;                                                                                              // 8033
                                                                                                                       // 8034
		// Watch for a new set of requests                                                                                   // 8035
		if ( fireGlobals && jQuery.active++ === 0 ) {                                                                        // 8036
			jQuery.event.trigger("ajaxStart");                                                                                  // 8037
		}                                                                                                                    // 8038
                                                                                                                       // 8039
		// Uppercase the type                                                                                                // 8040
		s.type = s.type.toUpperCase();                                                                                       // 8041
                                                                                                                       // 8042
		// Determine if request has content                                                                                  // 8043
		s.hasContent = !rnoContent.test( s.type );                                                                           // 8044
                                                                                                                       // 8045
		// Save the URL in case we're toying with the If-Modified-Since                                                      // 8046
		// and/or If-None-Match header later on                                                                              // 8047
		cacheURL = s.url;                                                                                                    // 8048
                                                                                                                       // 8049
		// More options handling for requests with no content                                                                // 8050
		if ( !s.hasContent ) {                                                                                               // 8051
                                                                                                                       // 8052
			// If data is available, append data to url                                                                         // 8053
			if ( s.data ) {                                                                                                     // 8054
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );                                     // 8055
				// #9682: remove data so that it's not used in an eventual retry                                                   // 8056
				delete s.data;                                                                                                     // 8057
			}                                                                                                                   // 8058
                                                                                                                       // 8059
			// Add anti-cache in url if needed                                                                                  // 8060
			if ( s.cache === false ) {                                                                                          // 8061
				s.url = rts.test( cacheURL ) ?                                                                                     // 8062
                                                                                                                       // 8063
					// If there is already a '_' parameter, set its value                                                             // 8064
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :                                                                  // 8065
                                                                                                                       // 8066
					// Otherwise add one to the end                                                                                   // 8067
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;                                    // 8068
			}                                                                                                                   // 8069
		}                                                                                                                    // 8070
                                                                                                                       // 8071
		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                     // 8072
		if ( s.ifModified ) {                                                                                                // 8073
			if ( jQuery.lastModified[ cacheURL ] ) {                                                                            // 8074
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );                                    // 8075
			}                                                                                                                   // 8076
			if ( jQuery.etag[ cacheURL ] ) {                                                                                    // 8077
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );                                                // 8078
			}                                                                                                                   // 8079
		}                                                                                                                    // 8080
                                                                                                                       // 8081
		// Set the correct header, if data is being sent                                                                     // 8082
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {                                    // 8083
			jqXHR.setRequestHeader( "Content-Type", s.contentType );                                                            // 8084
		}                                                                                                                    // 8085
                                                                                                                       // 8086
		// Set the Accepts header for the server, depending on the dataType                                                  // 8087
		jqXHR.setRequestHeader(                                                                                              // 8088
			"Accept",                                                                                                           // 8089
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?                                                                   // 8090
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :                   // 8091
				s.accepts[ "*" ]                                                                                                   // 8092
		);                                                                                                                   // 8093
                                                                                                                       // 8094
		// Check for headers option                                                                                          // 8095
		for ( i in s.headers ) {                                                                                             // 8096
			jqXHR.setRequestHeader( i, s.headers[ i ] );                                                                        // 8097
		}                                                                                                                    // 8098
                                                                                                                       // 8099
		// Allow custom headers/mimetypes and early abort                                                                    // 8100
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {                 // 8101
			// Abort if not done already and return                                                                             // 8102
			return jqXHR.abort();                                                                                               // 8103
		}                                                                                                                    // 8104
                                                                                                                       // 8105
		// aborting is no longer a cancellation                                                                              // 8106
		strAbort = "abort";                                                                                                  // 8107
                                                                                                                       // 8108
		// Install callbacks on deferreds                                                                                    // 8109
		for ( i in { success: 1, error: 1, complete: 1 } ) {                                                                 // 8110
			jqXHR[ i ]( s[ i ] );                                                                                               // 8111
		}                                                                                                                    // 8112
                                                                                                                       // 8113
		// Get transport                                                                                                     // 8114
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );                                          // 8115
                                                                                                                       // 8116
		// If no transport, we auto-abort                                                                                    // 8117
		if ( !transport ) {                                                                                                  // 8118
			done( -1, "No Transport" );                                                                                         // 8119
		} else {                                                                                                             // 8120
			jqXHR.readyState = 1;                                                                                               // 8121
                                                                                                                       // 8122
			// Send global event                                                                                                // 8123
			if ( fireGlobals ) {                                                                                                // 8124
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );                                                            // 8125
			}                                                                                                                   // 8126
			// Timeout                                                                                                          // 8127
			if ( s.async && s.timeout > 0 ) {                                                                                   // 8128
				timeoutTimer = setTimeout(function() {                                                                             // 8129
					jqXHR.abort("timeout");                                                                                           // 8130
				}, s.timeout );                                                                                                    // 8131
			}                                                                                                                   // 8132
                                                                                                                       // 8133
			try {                                                                                                               // 8134
				state = 1;                                                                                                         // 8135
				transport.send( requestHeaders, done );                                                                            // 8136
			} catch ( e ) {                                                                                                     // 8137
				// Propagate exception as error if not done                                                                        // 8138
				if ( state < 2 ) {                                                                                                 // 8139
					done( -1, e );                                                                                                    // 8140
				// Simply rethrow otherwise                                                                                        // 8141
				} else {                                                                                                           // 8142
					throw e;                                                                                                          // 8143
				}                                                                                                                  // 8144
			}                                                                                                                   // 8145
		}                                                                                                                    // 8146
                                                                                                                       // 8147
		// Callback for when everything is done                                                                              // 8148
		function done( status, nativeStatusText, responses, headers ) {                                                      // 8149
			var isSuccess, success, error, response, modified,                                                                  // 8150
				statusText = nativeStatusText;                                                                                     // 8151
                                                                                                                       // 8152
			// Called once                                                                                                      // 8153
			if ( state === 2 ) {                                                                                                // 8154
				return;                                                                                                            // 8155
			}                                                                                                                   // 8156
                                                                                                                       // 8157
			// State is "done" now                                                                                              // 8158
			state = 2;                                                                                                          // 8159
                                                                                                                       // 8160
			// Clear timeout if it exists                                                                                       // 8161
			if ( timeoutTimer ) {                                                                                               // 8162
				clearTimeout( timeoutTimer );                                                                                      // 8163
			}                                                                                                                   // 8164
                                                                                                                       // 8165
			// Dereference transport for early garbage collection                                                               // 8166
			// (no matter how long the jqXHR object will be used)                                                               // 8167
			transport = undefined;                                                                                              // 8168
                                                                                                                       // 8169
			// Cache response headers                                                                                           // 8170
			responseHeadersString = headers || "";                                                                              // 8171
                                                                                                                       // 8172
			// Set readyState                                                                                                   // 8173
			jqXHR.readyState = status > 0 ? 4 : 0;                                                                              // 8174
                                                                                                                       // 8175
			// Determine if successful                                                                                          // 8176
			isSuccess = status >= 200 && status < 300 || status === 304;                                                        // 8177
                                                                                                                       // 8178
			// Get response data                                                                                                // 8179
			if ( responses ) {                                                                                                  // 8180
				response = ajaxHandleResponses( s, jqXHR, responses );                                                             // 8181
			}                                                                                                                   // 8182
                                                                                                                       // 8183
			// Convert no matter what (that way responseXXX fields are always set)                                              // 8184
			response = ajaxConvert( s, response, jqXHR, isSuccess );                                                            // 8185
                                                                                                                       // 8186
			// If successful, handle type chaining                                                                              // 8187
			if ( isSuccess ) {                                                                                                  // 8188
                                                                                                                       // 8189
				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                   // 8190
				if ( s.ifModified ) {                                                                                              // 8191
					modified = jqXHR.getResponseHeader("Last-Modified");                                                              // 8192
					if ( modified ) {                                                                                                 // 8193
						jQuery.lastModified[ cacheURL ] = modified;                                                                      // 8194
					}                                                                                                                 // 8195
					modified = jqXHR.getResponseHeader("etag");                                                                       // 8196
					if ( modified ) {                                                                                                 // 8197
						jQuery.etag[ cacheURL ] = modified;                                                                              // 8198
					}                                                                                                                 // 8199
				}                                                                                                                  // 8200
                                                                                                                       // 8201
				// if no content                                                                                                   // 8202
				if ( status === 204 || s.type === "HEAD" ) {                                                                       // 8203
					statusText = "nocontent";                                                                                         // 8204
                                                                                                                       // 8205
				// if not modified                                                                                                 // 8206
				} else if ( status === 304 ) {                                                                                     // 8207
					statusText = "notmodified";                                                                                       // 8208
                                                                                                                       // 8209
				// If we have data, let's convert it                                                                               // 8210
				} else {                                                                                                           // 8211
					statusText = response.state;                                                                                      // 8212
					success = response.data;                                                                                          // 8213
					error = response.error;                                                                                           // 8214
					isSuccess = !error;                                                                                               // 8215
				}                                                                                                                  // 8216
			} else {                                                                                                            // 8217
				// We extract error from statusText                                                                                // 8218
				// then normalize statusText and status for non-aborts                                                             // 8219
				error = statusText;                                                                                                // 8220
				if ( status || !statusText ) {                                                                                     // 8221
					statusText = "error";                                                                                             // 8222
					if ( status < 0 ) {                                                                                               // 8223
						status = 0;                                                                                                      // 8224
					}                                                                                                                 // 8225
				}                                                                                                                  // 8226
			}                                                                                                                   // 8227
                                                                                                                       // 8228
			// Set data for the fake xhr object                                                                                 // 8229
			jqXHR.status = status;                                                                                              // 8230
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";                                                         // 8231
                                                                                                                       // 8232
			// Success/Error                                                                                                    // 8233
			if ( isSuccess ) {                                                                                                  // 8234
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );                                           // 8235
			} else {                                                                                                            // 8236
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );                                              // 8237
			}                                                                                                                   // 8238
                                                                                                                       // 8239
			// Status-dependent callbacks                                                                                       // 8240
			jqXHR.statusCode( statusCode );                                                                                     // 8241
			statusCode = undefined;                                                                                             // 8242
                                                                                                                       // 8243
			if ( fireGlobals ) {                                                                                                // 8244
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",                                               // 8245
					[ jqXHR, s, isSuccess ? success : error ] );                                                                      // 8246
			}                                                                                                                   // 8247
                                                                                                                       // 8248
			// Complete                                                                                                         // 8249
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );                                                // 8250
                                                                                                                       // 8251
			if ( fireGlobals ) {                                                                                                // 8252
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );                                                        // 8253
				// Handle the global AJAX counter                                                                                  // 8254
				if ( !( --jQuery.active ) ) {                                                                                      // 8255
					jQuery.event.trigger("ajaxStop");                                                                                 // 8256
				}                                                                                                                  // 8257
			}                                                                                                                   // 8258
		}                                                                                                                    // 8259
                                                                                                                       // 8260
		return jqXHR;                                                                                                        // 8261
	},                                                                                                                    // 8262
                                                                                                                       // 8263
	getJSON: function( url, data, callback ) {                                                                            // 8264
		return jQuery.get( url, data, callback, "json" );                                                                    // 8265
	},                                                                                                                    // 8266
                                                                                                                       // 8267
	getScript: function( url, callback ) {                                                                                // 8268
		return jQuery.get( url, undefined, callback, "script" );                                                             // 8269
	}                                                                                                                     // 8270
});                                                                                                                    // 8271
                                                                                                                       // 8272
jQuery.each( [ "get", "post" ], function( i, method ) {                                                                // 8273
	jQuery[ method ] = function( url, data, callback, type ) {                                                            // 8274
		// shift arguments if data argument was omitted                                                                      // 8275
		if ( jQuery.isFunction( data ) ) {                                                                                   // 8276
			type = type || callback;                                                                                            // 8277
			callback = data;                                                                                                    // 8278
			data = undefined;                                                                                                   // 8279
		}                                                                                                                    // 8280
                                                                                                                       // 8281
		return jQuery.ajax({                                                                                                 // 8282
			url: url,                                                                                                           // 8283
			type: method,                                                                                                       // 8284
			dataType: type,                                                                                                     // 8285
			data: data,                                                                                                         // 8286
			success: callback                                                                                                   // 8287
		});                                                                                                                  // 8288
	};                                                                                                                    // 8289
});                                                                                                                    // 8290
                                                                                                                       // 8291
/* Handles responses to an ajax request:                                                                               // 8292
 * - finds the right dataType (mediates between content-type and expected dataType)                                    // 8293
 * - returns the corresponding response                                                                                // 8294
 */                                                                                                                    // 8295
function ajaxHandleResponses( s, jqXHR, responses ) {                                                                  // 8296
	var firstDataType, ct, finalDataType, type,                                                                           // 8297
		contents = s.contents,                                                                                               // 8298
		dataTypes = s.dataTypes;                                                                                             // 8299
                                                                                                                       // 8300
	// Remove auto dataType and get content-type in the process                                                           // 8301
	while( dataTypes[ 0 ] === "*" ) {                                                                                     // 8302
		dataTypes.shift();                                                                                                   // 8303
		if ( ct === undefined ) {                                                                                            // 8304
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");                                                         // 8305
		}                                                                                                                    // 8306
	}                                                                                                                     // 8307
                                                                                                                       // 8308
	// Check if we're dealing with a known content-type                                                                   // 8309
	if ( ct ) {                                                                                                           // 8310
		for ( type in contents ) {                                                                                           // 8311
			if ( contents[ type ] && contents[ type ].test( ct ) ) {                                                            // 8312
				dataTypes.unshift( type );                                                                                         // 8313
				break;                                                                                                             // 8314
			}                                                                                                                   // 8315
		}                                                                                                                    // 8316
	}                                                                                                                     // 8317
                                                                                                                       // 8318
	// Check to see if we have a response for the expected dataType                                                       // 8319
	if ( dataTypes[ 0 ] in responses ) {                                                                                  // 8320
		finalDataType = dataTypes[ 0 ];                                                                                      // 8321
	} else {                                                                                                              // 8322
		// Try convertible dataTypes                                                                                         // 8323
		for ( type in responses ) {                                                                                          // 8324
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {                                               // 8325
				finalDataType = type;                                                                                              // 8326
				break;                                                                                                             // 8327
			}                                                                                                                   // 8328
			if ( !firstDataType ) {                                                                                             // 8329
				firstDataType = type;                                                                                              // 8330
			}                                                                                                                   // 8331
		}                                                                                                                    // 8332
		// Or just use first one                                                                                             // 8333
		finalDataType = finalDataType || firstDataType;                                                                      // 8334
	}                                                                                                                     // 8335
                                                                                                                       // 8336
	// If we found a dataType                                                                                             // 8337
	// We add the dataType to the list if needed                                                                          // 8338
	// and return the corresponding response                                                                              // 8339
	if ( finalDataType ) {                                                                                                // 8340
		if ( finalDataType !== dataTypes[ 0 ] ) {                                                                            // 8341
			dataTypes.unshift( finalDataType );                                                                                 // 8342
		}                                                                                                                    // 8343
		return responses[ finalDataType ];                                                                                   // 8344
	}                                                                                                                     // 8345
}                                                                                                                      // 8346
                                                                                                                       // 8347
/* Chain conversions given the request and the original response                                                       // 8348
 * Also sets the responseXXX fields on the jqXHR instance                                                              // 8349
 */                                                                                                                    // 8350
function ajaxConvert( s, response, jqXHR, isSuccess ) {                                                                // 8351
	var conv2, current, conv, tmp, prev,                                                                                  // 8352
		converters = {},                                                                                                     // 8353
		// Work with a copy of dataTypes in case we need to modify it for conversion                                         // 8354
		dataTypes = s.dataTypes.slice();                                                                                     // 8355
                                                                                                                       // 8356
	// Create converters map with lowercased keys                                                                         // 8357
	if ( dataTypes[ 1 ] ) {                                                                                               // 8358
		for ( conv in s.converters ) {                                                                                       // 8359
			converters[ conv.toLowerCase() ] = s.converters[ conv ];                                                            // 8360
		}                                                                                                                    // 8361
	}                                                                                                                     // 8362
                                                                                                                       // 8363
	current = dataTypes.shift();                                                                                          // 8364
                                                                                                                       // 8365
	// Convert to each sequential dataType                                                                                // 8366
	while ( current ) {                                                                                                   // 8367
                                                                                                                       // 8368
		if ( s.responseFields[ current ] ) {                                                                                 // 8369
			jqXHR[ s.responseFields[ current ] ] = response;                                                                    // 8370
		}                                                                                                                    // 8371
                                                                                                                       // 8372
		// Apply the dataFilter if provided                                                                                  // 8373
		if ( !prev && isSuccess && s.dataFilter ) {                                                                          // 8374
			response = s.dataFilter( response, s.dataType );                                                                    // 8375
		}                                                                                                                    // 8376
                                                                                                                       // 8377
		prev = current;                                                                                                      // 8378
		current = dataTypes.shift();                                                                                         // 8379
                                                                                                                       // 8380
		if ( current ) {                                                                                                     // 8381
                                                                                                                       // 8382
			// There's only work to do if current dataType is non-auto                                                          // 8383
			if ( current === "*" ) {                                                                                            // 8384
                                                                                                                       // 8385
				current = prev;                                                                                                    // 8386
                                                                                                                       // 8387
			// Convert response if prev dataType is non-auto and differs from current                                           // 8388
			} else if ( prev !== "*" && prev !== current ) {                                                                    // 8389
                                                                                                                       // 8390
				// Seek a direct converter                                                                                         // 8391
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];                                         // 8392
                                                                                                                       // 8393
				// If none found, seek a pair                                                                                      // 8394
				if ( !conv ) {                                                                                                     // 8395
					for ( conv2 in converters ) {                                                                                     // 8396
                                                                                                                       // 8397
						// If conv2 outputs current                                                                                      // 8398
						tmp = conv2.split( " " );                                                                                        // 8399
						if ( tmp[ 1 ] === current ) {                                                                                    // 8400
                                                                                                                       // 8401
							// If prev can be converted to accepted input                                                                   // 8402
							conv = converters[ prev + " " + tmp[ 0 ] ] ||                                                                   // 8403
								converters[ "* " + tmp[ 0 ] ];                                                                                 // 8404
							if ( conv ) {                                                                                                   // 8405
								// Condense equivalence converters                                                                             // 8406
								if ( conv === true ) {                                                                                         // 8407
									conv = converters[ conv2 ];                                                                                   // 8408
                                                                                                                       // 8409
								// Otherwise, insert the intermediate dataType                                                                 // 8410
								} else if ( converters[ conv2 ] !== true ) {                                                                   // 8411
									current = tmp[ 0 ];                                                                                           // 8412
									dataTypes.unshift( tmp[ 1 ] );                                                                                // 8413
								}                                                                                                              // 8414
								break;                                                                                                         // 8415
							}                                                                                                               // 8416
						}                                                                                                                // 8417
					}                                                                                                                 // 8418
				}                                                                                                                  // 8419
                                                                                                                       // 8420
				// Apply converter (if not an equivalence)                                                                         // 8421
				if ( conv !== true ) {                                                                                             // 8422
                                                                                                                       // 8423
					// Unless errors are allowed to bubble, catch and return them                                                     // 8424
					if ( conv && s[ "throws" ] ) {                                                                                    // 8425
						response = conv( response );                                                                                     // 8426
					} else {                                                                                                          // 8427
						try {                                                                                                            // 8428
							response = conv( response );                                                                                    // 8429
						} catch ( e ) {                                                                                                  // 8430
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };             // 8431
						}                                                                                                                // 8432
					}                                                                                                                 // 8433
				}                                                                                                                  // 8434
			}                                                                                                                   // 8435
		}                                                                                                                    // 8436
	}                                                                                                                     // 8437
                                                                                                                       // 8438
	return { state: "success", data: response };                                                                          // 8439
}                                                                                                                      // 8440
// Install script dataType                                                                                             // 8441
jQuery.ajaxSetup({                                                                                                     // 8442
	accepts: {                                                                                                            // 8443
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"                  // 8444
	},                                                                                                                    // 8445
	contents: {                                                                                                           // 8446
		script: /(?:java|ecma)script/                                                                                        // 8447
	},                                                                                                                    // 8448
	converters: {                                                                                                         // 8449
		"text script": function( text ) {                                                                                    // 8450
			jQuery.globalEval( text );                                                                                          // 8451
			return text;                                                                                                        // 8452
		}                                                                                                                    // 8453
	}                                                                                                                     // 8454
});                                                                                                                    // 8455
                                                                                                                       // 8456
// Handle cache's special case and global                                                                              // 8457
jQuery.ajaxPrefilter( "script", function( s ) {                                                                        // 8458
	if ( s.cache === undefined ) {                                                                                        // 8459
		s.cache = false;                                                                                                     // 8460
	}                                                                                                                     // 8461
	if ( s.crossDomain ) {                                                                                                // 8462
		s.type = "GET";                                                                                                      // 8463
		s.global = false;                                                                                                    // 8464
	}                                                                                                                     // 8465
});                                                                                                                    // 8466
                                                                                                                       // 8467
// Bind script tag hack transport                                                                                      // 8468
jQuery.ajaxTransport( "script", function(s) {                                                                          // 8469
                                                                                                                       // 8470
	// This transport only deals with cross domain requests                                                               // 8471
	if ( s.crossDomain ) {                                                                                                // 8472
                                                                                                                       // 8473
		var script,                                                                                                          // 8474
			head = document.head || jQuery("head")[0] || document.documentElement;                                              // 8475
                                                                                                                       // 8476
		return {                                                                                                             // 8477
                                                                                                                       // 8478
			send: function( _, callback ) {                                                                                     // 8479
                                                                                                                       // 8480
				script = document.createElement("script");                                                                         // 8481
                                                                                                                       // 8482
				script.async = true;                                                                                               // 8483
                                                                                                                       // 8484
				if ( s.scriptCharset ) {                                                                                           // 8485
					script.charset = s.scriptCharset;                                                                                 // 8486
				}                                                                                                                  // 8487
                                                                                                                       // 8488
				script.src = s.url;                                                                                                // 8489
                                                                                                                       // 8490
				// Attach handlers for all browsers                                                                                // 8491
				script.onload = script.onreadystatechange = function( _, isAbort ) {                                               // 8492
                                                                                                                       // 8493
					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {                             // 8494
                                                                                                                       // 8495
						// Handle memory leak in IE                                                                                      // 8496
						script.onload = script.onreadystatechange = null;                                                                // 8497
                                                                                                                       // 8498
						// Remove the script                                                                                             // 8499
						if ( script.parentNode ) {                                                                                       // 8500
							script.parentNode.removeChild( script );                                                                        // 8501
						}                                                                                                                // 8502
                                                                                                                       // 8503
						// Dereference the script                                                                                        // 8504
						script = null;                                                                                                   // 8505
                                                                                                                       // 8506
						// Callback if not abort                                                                                         // 8507
						if ( !isAbort ) {                                                                                                // 8508
							callback( 200, "success" );                                                                                     // 8509
						}                                                                                                                // 8510
					}                                                                                                                 // 8511
				};                                                                                                                 // 8512
                                                                                                                       // 8513
				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending                                          // 8514
				// Use native DOM manipulation to avoid our domManip AJAX trickery                                                 // 8515
				head.insertBefore( script, head.firstChild );                                                                      // 8516
			},                                                                                                                  // 8517
                                                                                                                       // 8518
			abort: function() {                                                                                                 // 8519
				if ( script ) {                                                                                                    // 8520
					script.onload( undefined, true );                                                                                 // 8521
				}                                                                                                                  // 8522
			}                                                                                                                   // 8523
		};                                                                                                                   // 8524
	}                                                                                                                     // 8525
});                                                                                                                    // 8526
var oldCallbacks = [],                                                                                                 // 8527
	rjsonp = /(=)\?(?=&|$)|\?\?/;                                                                                         // 8528
                                                                                                                       // 8529
// Default jsonp settings                                                                                              // 8530
jQuery.ajaxSetup({                                                                                                     // 8531
	jsonp: "callback",                                                                                                    // 8532
	jsonpCallback: function() {                                                                                           // 8533
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );                                    // 8534
		this[ callback ] = true;                                                                                             // 8535
		return callback;                                                                                                     // 8536
	}                                                                                                                     // 8537
});                                                                                                                    // 8538
                                                                                                                       // 8539
// Detect, normalize options and install callbacks for jsonp requests                                                  // 8540
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {                                           // 8541
                                                                                                                       // 8542
	var callbackName, overwritten, responseContainer,                                                                     // 8543
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?                                                             // 8544
			"url" :                                                                                                             // 8545
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);                                                                                                                   // 8547
                                                                                                                       // 8548
	// Handle iff the expected data type is "jsonp" or we have a parameter to set                                         // 8549
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {                                                                     // 8550
                                                                                                                       // 8551
		// Get callback name, remembering preexisting value associated with it                                               // 8552
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?                                              // 8553
			s.jsonpCallback() :                                                                                                 // 8554
			s.jsonpCallback;                                                                                                    // 8555
                                                                                                                       // 8556
		// Insert callback into url or form data                                                                             // 8557
		if ( jsonProp ) {                                                                                                    // 8558
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );                                               // 8559
		} else if ( s.jsonp !== false ) {                                                                                    // 8560
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;                                  // 8561
		}                                                                                                                    // 8562
                                                                                                                       // 8563
		// Use data converter to retrieve json after script execution                                                        // 8564
		s.converters["script json"] = function() {                                                                           // 8565
			if ( !responseContainer ) {                                                                                         // 8566
				jQuery.error( callbackName + " was not called" );                                                                  // 8567
			}                                                                                                                   // 8568
			return responseContainer[ 0 ];                                                                                      // 8569
		};                                                                                                                   // 8570
                                                                                                                       // 8571
		// force json dataType                                                                                               // 8572
		s.dataTypes[ 0 ] = "json";                                                                                           // 8573
                                                                                                                       // 8574
		// Install callback                                                                                                  // 8575
		overwritten = window[ callbackName ];                                                                                // 8576
		window[ callbackName ] = function() {                                                                                // 8577
			responseContainer = arguments;                                                                                      // 8578
		};                                                                                                                   // 8579
                                                                                                                       // 8580
		// Clean-up function (fires after converters)                                                                        // 8581
		jqXHR.always(function() {                                                                                            // 8582
			// Restore preexisting value                                                                                        // 8583
			window[ callbackName ] = overwritten;                                                                               // 8584
                                                                                                                       // 8585
			// Save back as free                                                                                                // 8586
			if ( s[ callbackName ] ) {                                                                                          // 8587
				// make sure that re-using the options doesn't screw things around                                                 // 8588
				s.jsonpCallback = originalSettings.jsonpCallback;                                                                  // 8589
                                                                                                                       // 8590
				// save the callback name for future use                                                                           // 8591
				oldCallbacks.push( callbackName );                                                                                 // 8592
			}                                                                                                                   // 8593
                                                                                                                       // 8594
			// Call if it was a function and we have a response                                                                 // 8595
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {                                                      // 8596
				overwritten( responseContainer[ 0 ] );                                                                             // 8597
			}                                                                                                                   // 8598
                                                                                                                       // 8599
			responseContainer = overwritten = undefined;                                                                        // 8600
		});                                                                                                                  // 8601
                                                                                                                       // 8602
		// Delegate to script                                                                                                // 8603
		return "script";                                                                                                     // 8604
	}                                                                                                                     // 8605
});                                                                                                                    // 8606
var xhrCallbacks, xhrSupported,                                                                                        // 8607
	xhrId = 0,                                                                                                            // 8608
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload                                   // 8609
	xhrOnUnloadAbort = window.ActiveXObject && function() {                                                               // 8610
		// Abort all pending requests                                                                                        // 8611
		var key;                                                                                                             // 8612
		for ( key in xhrCallbacks ) {                                                                                        // 8613
			xhrCallbacks[ key ]( undefined, true );                                                                             // 8614
		}                                                                                                                    // 8615
	};                                                                                                                    // 8616
                                                                                                                       // 8617
// Functions to create xhrs                                                                                            // 8618
function createStandardXHR() {                                                                                         // 8619
	try {                                                                                                                 // 8620
		return new window.XMLHttpRequest();                                                                                  // 8621
	} catch( e ) {}                                                                                                       // 8622
}                                                                                                                      // 8623
                                                                                                                       // 8624
function createActiveXHR() {                                                                                           // 8625
	try {                                                                                                                 // 8626
		return new window.ActiveXObject("Microsoft.XMLHTTP");                                                                // 8627
	} catch( e ) {}                                                                                                       // 8628
}                                                                                                                      // 8629
                                                                                                                       // 8630
// Create the request object                                                                                           // 8631
// (This is still attached to ajaxSettings for backward compatibility)                                                 // 8632
jQuery.ajaxSettings.xhr = window.ActiveXObject ?                                                                       // 8633
	/* Microsoft failed to properly                                                                                       // 8634
	 * implement the XMLHttpRequest in IE7 (can't request local files),                                                   // 8635
	 * so we use the ActiveXObject when it is available                                                                   // 8636
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so                                                          // 8637
	 * we need a fallback.                                                                                                // 8638
	 */                                                                                                                   // 8639
	function() {                                                                                                          // 8640
		return !this.isLocal && createStandardXHR() || createActiveXHR();                                                    // 8641
	} :                                                                                                                   // 8642
	// For all other browsers, use the standard XMLHttpRequest object                                                     // 8643
	createStandardXHR;                                                                                                    // 8644
                                                                                                                       // 8645
// Determine support properties                                                                                        // 8646
xhrSupported = jQuery.ajaxSettings.xhr();                                                                              // 8647
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );                                         // 8648
xhrSupported = jQuery.support.ajax = !!xhrSupported;                                                                   // 8649
                                                                                                                       // 8650
// Create transport if the browser can provide an xhr                                                                  // 8651
if ( xhrSupported ) {                                                                                                  // 8652
                                                                                                                       // 8653
	jQuery.ajaxTransport(function( s ) {                                                                                  // 8654
		// Cross domain only allowed if supported through XMLHttpRequest                                                     // 8655
		if ( !s.crossDomain || jQuery.support.cors ) {                                                                       // 8656
                                                                                                                       // 8657
			var callback;                                                                                                       // 8658
                                                                                                                       // 8659
			return {                                                                                                            // 8660
				send: function( headers, complete ) {                                                                              // 8661
                                                                                                                       // 8662
					// Get a new xhr                                                                                                  // 8663
					var handle, i,                                                                                                    // 8664
						xhr = s.xhr();                                                                                                   // 8665
                                                                                                                       // 8666
					// Open the socket                                                                                                // 8667
					// Passing null username, generates a login popup on Opera (#2865)                                                // 8668
					if ( s.username ) {                                                                                               // 8669
						xhr.open( s.type, s.url, s.async, s.username, s.password );                                                      // 8670
					} else {                                                                                                          // 8671
						xhr.open( s.type, s.url, s.async );                                                                              // 8672
					}                                                                                                                 // 8673
                                                                                                                       // 8674
					// Apply custom fields if provided                                                                                // 8675
					if ( s.xhrFields ) {                                                                                              // 8676
						for ( i in s.xhrFields ) {                                                                                       // 8677
							xhr[ i ] = s.xhrFields[ i ];                                                                                    // 8678
						}                                                                                                                // 8679
					}                                                                                                                 // 8680
                                                                                                                       // 8681
					// Override mime type if needed                                                                                   // 8682
					if ( s.mimeType && xhr.overrideMimeType ) {                                                                       // 8683
						xhr.overrideMimeType( s.mimeType );                                                                              // 8684
					}                                                                                                                 // 8685
                                                                                                                       // 8686
					// X-Requested-With header                                                                                        // 8687
					// For cross-domain requests, seeing as conditions for a preflight are                                            // 8688
					// akin to a jigsaw puzzle, we simply never set it to be sure.                                                    // 8689
					// (it can always be set on a per-request basis or even using ajaxSetup)                                          // 8690
					// For same-domain requests, won't change header if already provided.                                             // 8691
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {                                                           // 8692
						headers["X-Requested-With"] = "XMLHttpRequest";                                                                  // 8693
					}                                                                                                                 // 8694
                                                                                                                       // 8695
					// Need an extra try/catch for cross domain requests in Firefox 3                                                 // 8696
					try {                                                                                                             // 8697
						for ( i in headers ) {                                                                                           // 8698
							xhr.setRequestHeader( i, headers[ i ] );                                                                        // 8699
						}                                                                                                                // 8700
					} catch( err ) {}                                                                                                 // 8701
                                                                                                                       // 8702
					// Do send the request                                                                                            // 8703
					// This may raise an exception which is actually                                                                  // 8704
					// handled in jQuery.ajax (so no try/catch here)                                                                  // 8705
					xhr.send( ( s.hasContent && s.data ) || null );                                                                   // 8706
                                                                                                                       // 8707
					// Listener                                                                                                       // 8708
					callback = function( _, isAbort ) {                                                                               // 8709
						var status, responseHeaders, statusText, responses;                                                              // 8710
                                                                                                                       // 8711
						// Firefox throws exceptions when accessing properties                                                           // 8712
						// of an xhr when a network error occurred                                                                       // 8713
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE) // 8714
						try {                                                                                                            // 8715
                                                                                                                       // 8716
							// Was never called and is aborted or complete                                                                  // 8717
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {                                                        // 8718
                                                                                                                       // 8719
								// Only called once                                                                                            // 8720
								callback = undefined;                                                                                          // 8721
                                                                                                                       // 8722
								// Do not keep as active anymore                                                                               // 8723
								if ( handle ) {                                                                                                // 8724
									xhr.onreadystatechange = jQuery.noop;                                                                         // 8725
									if ( xhrOnUnloadAbort ) {                                                                                     // 8726
										delete xhrCallbacks[ handle ];                                                                               // 8727
									}                                                                                                             // 8728
								}                                                                                                              // 8729
                                                                                                                       // 8730
								// If it's an abort                                                                                            // 8731
								if ( isAbort ) {                                                                                               // 8732
									// Abort it manually if needed                                                                                // 8733
									if ( xhr.readyState !== 4 ) {                                                                                 // 8734
										xhr.abort();                                                                                                 // 8735
									}                                                                                                             // 8736
								} else {                                                                                                       // 8737
									responses = {};                                                                                               // 8738
									status = xhr.status;                                                                                          // 8739
									responseHeaders = xhr.getAllResponseHeaders();                                                                // 8740
                                                                                                                       // 8741
									// When requesting binary data, IE6-9 will throw an exception                                                 // 8742
									// on any attempt to access responseText (#11426)                                                             // 8743
									if ( typeof xhr.responseText === "string" ) {                                                                 // 8744
										responses.text = xhr.responseText;                                                                           // 8745
									}                                                                                                             // 8746
                                                                                                                       // 8747
									// Firefox throws an exception when accessing                                                                 // 8748
									// statusText for faulty cross-domain requests                                                                // 8749
									try {                                                                                                         // 8750
										statusText = xhr.statusText;                                                                                 // 8751
									} catch( e ) {                                                                                                // 8752
										// We normalize with Webkit giving an empty statusText                                                       // 8753
										statusText = "";                                                                                             // 8754
									}                                                                                                             // 8755
                                                                                                                       // 8756
									// Filter status for non standard behaviors                                                                   // 8757
                                                                                                                       // 8758
									// If the request is local and we have data: assume a success                                                 // 8759
									// (success with no data won't get notified, that's the best we                                               // 8760
									// can do given current implementations)                                                                      // 8761
									if ( !status && s.isLocal && !s.crossDomain ) {                                                               // 8762
										status = responses.text ? 200 : 404;                                                                         // 8763
									// IE - #1450: sometimes returns 1223 when it should be 204                                                   // 8764
									} else if ( status === 1223 ) {                                                                               // 8765
										status = 204;                                                                                                // 8766
									}                                                                                                             // 8767
								}                                                                                                              // 8768
							}                                                                                                               // 8769
						} catch( firefoxAccessException ) {                                                                              // 8770
							if ( !isAbort ) {                                                                                               // 8771
								complete( -1, firefoxAccessException );                                                                        // 8772
							}                                                                                                               // 8773
						}                                                                                                                // 8774
                                                                                                                       // 8775
						// Call complete if needed                                                                                       // 8776
						if ( responses ) {                                                                                               // 8777
							complete( status, statusText, responses, responseHeaders );                                                     // 8778
						}                                                                                                                // 8779
					};                                                                                                                // 8780
                                                                                                                       // 8781
					if ( !s.async ) {                                                                                                 // 8782
						// if we're in sync mode we fire the callback                                                                    // 8783
						callback();                                                                                                      // 8784
					} else if ( xhr.readyState === 4 ) {                                                                              // 8785
						// (IE6 & IE7) if it's in cache and has been                                                                     // 8786
						// retrieved directly we need to fire the callback                                                               // 8787
						setTimeout( callback );                                                                                          // 8788
					} else {                                                                                                          // 8789
						handle = ++xhrId;                                                                                                // 8790
						if ( xhrOnUnloadAbort ) {                                                                                        // 8791
							// Create the active xhrs callbacks list if needed                                                              // 8792
							// and attach the unload handler                                                                                // 8793
							if ( !xhrCallbacks ) {                                                                                          // 8794
								xhrCallbacks = {};                                                                                             // 8795
								jQuery( window ).unload( xhrOnUnloadAbort );                                                                   // 8796
							}                                                                                                               // 8797
							// Add to list of active xhrs callbacks                                                                         // 8798
							xhrCallbacks[ handle ] = callback;                                                                              // 8799
						}                                                                                                                // 8800
						xhr.onreadystatechange = callback;                                                                               // 8801
					}                                                                                                                 // 8802
				},                                                                                                                 // 8803
                                                                                                                       // 8804
				abort: function() {                                                                                                // 8805
					if ( callback ) {                                                                                                 // 8806
						callback( undefined, true );                                                                                     // 8807
					}                                                                                                                 // 8808
				}                                                                                                                  // 8809
			};                                                                                                                  // 8810
		}                                                                                                                    // 8811
	});                                                                                                                   // 8812
}                                                                                                                      // 8813
var fxNow, timerId,                                                                                                    // 8814
	rfxtypes = /^(?:toggle|show|hide)$/,                                                                                  // 8815
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),                                             // 8816
	rrun = /queueHooks$/,                                                                                                 // 8817
	animationPrefilters = [ defaultPrefilter ],                                                                           // 8818
	tweeners = {                                                                                                          // 8819
		"*": [function( prop, value ) {                                                                                      // 8820
			var tween = this.createTween( prop, value ),                                                                        // 8821
				target = tween.cur(),                                                                                              // 8822
				parts = rfxnum.exec( value ),                                                                                      // 8823
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),                                            // 8824
                                                                                                                       // 8825
				// Starting value computation is required for potential unit mismatches                                            // 8826
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&                                                // 8827
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),                                                                    // 8828
				scale = 1,                                                                                                         // 8829
				maxIterations = 20;                                                                                                // 8830
                                                                                                                       // 8831
			if ( start && start[ 3 ] !== unit ) {                                                                               // 8832
				// Trust units reported by jQuery.css                                                                              // 8833
				unit = unit || start[ 3 ];                                                                                         // 8834
                                                                                                                       // 8835
				// Make sure we update the tween properties later on                                                               // 8836
				parts = parts || [];                                                                                               // 8837
                                                                                                                       // 8838
				// Iteratively approximate from a nonzero starting point                                                           // 8839
				start = +target || 1;                                                                                              // 8840
                                                                                                                       // 8841
				do {                                                                                                               // 8842
					// If previous iteration zeroed out, double until we get *something*                                              // 8843
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below                         // 8844
					scale = scale || ".5";                                                                                            // 8845
                                                                                                                       // 8846
					// Adjust and apply                                                                                               // 8847
					start = start / scale;                                                                                            // 8848
					jQuery.style( tween.elem, prop, start + unit );                                                                   // 8849
                                                                                                                       // 8850
				// Update scale, tolerating zero or NaN from tween.cur()                                                           // 8851
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough                             // 8852
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );                            // 8853
			}                                                                                                                   // 8854
                                                                                                                       // 8855
			// Update tween properties                                                                                          // 8856
			if ( parts ) {                                                                                                      // 8857
				start = tween.start = +start || +target || 0;                                                                      // 8858
				tween.unit = unit;                                                                                                 // 8859
				// If a +=/-= token was provided, we're doing a relative animation                                                 // 8860
				tween.end = parts[ 1 ] ?                                                                                           // 8861
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :                                                                         // 8862
					+parts[ 2 ];                                                                                                      // 8863
			}                                                                                                                   // 8864
                                                                                                                       // 8865
			return tween;                                                                                                       // 8866
		}]                                                                                                                   // 8867
	};                                                                                                                    // 8868
                                                                                                                       // 8869
// Animations created synchronously will run synchronously                                                             // 8870
function createFxNow() {                                                                                               // 8871
	setTimeout(function() {                                                                                               // 8872
		fxNow = undefined;                                                                                                   // 8873
	});                                                                                                                   // 8874
	return ( fxNow = jQuery.now() );                                                                                      // 8875
}                                                                                                                      // 8876
                                                                                                                       // 8877
function createTween( value, prop, animation ) {                                                                       // 8878
	var tween,                                                                                                            // 8879
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),                                                   // 8880
		index = 0,                                                                                                           // 8881
		length = collection.length;                                                                                          // 8882
	for ( ; index < length; index++ ) {                                                                                   // 8883
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {                                                // 8884
                                                                                                                       // 8885
			// we're done with this property                                                                                    // 8886
			return tween;                                                                                                       // 8887
		}                                                                                                                    // 8888
	}                                                                                                                     // 8889
}                                                                                                                      // 8890
                                                                                                                       // 8891
function Animation( elem, properties, options ) {                                                                      // 8892
	var result,                                                                                                           // 8893
		stopped,                                                                                                             // 8894
		index = 0,                                                                                                           // 8895
		length = animationPrefilters.length,                                                                                 // 8896
		deferred = jQuery.Deferred().always( function() {                                                                    // 8897
			// don't match elem in the :animated selector                                                                       // 8898
			delete tick.elem;                                                                                                   // 8899
		}),                                                                                                                  // 8900
		tick = function() {                                                                                                  // 8901
			if ( stopped ) {                                                                                                    // 8902
				return false;                                                                                                      // 8903
			}                                                                                                                   // 8904
			var currentTime = fxNow || createFxNow(),                                                                           // 8905
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),                                 // 8906
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)                                               // 8907
				temp = remaining / animation.duration || 0,                                                                        // 8908
				percent = 1 - temp,                                                                                                // 8909
				index = 0,                                                                                                         // 8910
				length = animation.tweens.length;                                                                                  // 8911
                                                                                                                       // 8912
			for ( ; index < length ; index++ ) {                                                                                // 8913
				animation.tweens[ index ].run( percent );                                                                          // 8914
			}                                                                                                                   // 8915
                                                                                                                       // 8916
			deferred.notifyWith( elem, [ animation, percent, remaining ]);                                                      // 8917
                                                                                                                       // 8918
			if ( percent < 1 && length ) {                                                                                      // 8919
				return remaining;                                                                                                  // 8920
			} else {                                                                                                            // 8921
				deferred.resolveWith( elem, [ animation ] );                                                                       // 8922
				return false;                                                                                                      // 8923
			}                                                                                                                   // 8924
		},                                                                                                                   // 8925
		animation = deferred.promise({                                                                                       // 8926
			elem: elem,                                                                                                         // 8927
			props: jQuery.extend( {}, properties ),                                                                             // 8928
			opts: jQuery.extend( true, { specialEasing: {} }, options ),                                                        // 8929
			originalProperties: properties,                                                                                     // 8930
			originalOptions: options,                                                                                           // 8931
			startTime: fxNow || createFxNow(),                                                                                  // 8932
			duration: options.duration,                                                                                         // 8933
			tweens: [],                                                                                                         // 8934
			createTween: function( prop, end ) {                                                                                // 8935
				var tween = jQuery.Tween( elem, animation.opts, prop, end,                                                         // 8936
						animation.opts.specialEasing[ prop ] || animation.opts.easing );                                                 // 8937
				animation.tweens.push( tween );                                                                                    // 8938
				return tween;                                                                                                      // 8939
			},                                                                                                                  // 8940
			stop: function( gotoEnd ) {                                                                                         // 8941
				var index = 0,                                                                                                     // 8942
					// if we are going to the end, we want to run all the tweens                                                      // 8943
					// otherwise we skip this part                                                                                    // 8944
					length = gotoEnd ? animation.tweens.length : 0;                                                                   // 8945
				if ( stopped ) {                                                                                                   // 8946
					return this;                                                                                                      // 8947
				}                                                                                                                  // 8948
				stopped = true;                                                                                                    // 8949
				for ( ; index < length ; index++ ) {                                                                               // 8950
					animation.tweens[ index ].run( 1 );                                                                               // 8951
				}                                                                                                                  // 8952
                                                                                                                       // 8953
				// resolve when we played the last frame                                                                           // 8954
				// otherwise, reject                                                                                               // 8955
				if ( gotoEnd ) {                                                                                                   // 8956
					deferred.resolveWith( elem, [ animation, gotoEnd ] );                                                             // 8957
				} else {                                                                                                           // 8958
					deferred.rejectWith( elem, [ animation, gotoEnd ] );                                                              // 8959
				}                                                                                                                  // 8960
				return this;                                                                                                       // 8961
			}                                                                                                                   // 8962
		}),                                                                                                                  // 8963
		props = animation.props;                                                                                             // 8964
                                                                                                                       // 8965
	propFilter( props, animation.opts.specialEasing );                                                                    // 8966
                                                                                                                       // 8967
	for ( ; index < length ; index++ ) {                                                                                  // 8968
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );                                // 8969
		if ( result ) {                                                                                                      // 8970
			return result;                                                                                                      // 8971
		}                                                                                                                    // 8972
	}                                                                                                                     // 8973
                                                                                                                       // 8974
	jQuery.map( props, createTween, animation );                                                                          // 8975
                                                                                                                       // 8976
	if ( jQuery.isFunction( animation.opts.start ) ) {                                                                    // 8977
		animation.opts.start.call( elem, animation );                                                                        // 8978
	}                                                                                                                     // 8979
                                                                                                                       // 8980
	jQuery.fx.timer(                                                                                                      // 8981
		jQuery.extend( tick, {                                                                                               // 8982
			elem: elem,                                                                                                         // 8983
			anim: animation,                                                                                                    // 8984
			queue: animation.opts.queue                                                                                         // 8985
		})                                                                                                                   // 8986
	);                                                                                                                    // 8987
                                                                                                                       // 8988
	// attach callbacks from options                                                                                      // 8989
	return animation.progress( animation.opts.progress )                                                                  // 8990
		.done( animation.opts.done, animation.opts.complete )                                                                // 8991
		.fail( animation.opts.fail )                                                                                         // 8992
		.always( animation.opts.always );                                                                                    // 8993
}                                                                                                                      // 8994
                                                                                                                       // 8995
function propFilter( props, specialEasing ) {                                                                          // 8996
	var index, name, easing, value, hooks;                                                                                // 8997
                                                                                                                       // 8998
	// camelCase, specialEasing and expand cssHook pass                                                                   // 8999
	for ( index in props ) {                                                                                              // 9000
		name = jQuery.camelCase( index );                                                                                    // 9001
		easing = specialEasing[ name ];                                                                                      // 9002
		value = props[ index ];                                                                                              // 9003
		if ( jQuery.isArray( value ) ) {                                                                                     // 9004
			easing = value[ 1 ];                                                                                                // 9005
			value = props[ index ] = value[ 0 ];                                                                                // 9006
		}                                                                                                                    // 9007
                                                                                                                       // 9008
		if ( index !== name ) {                                                                                              // 9009
			props[ name ] = value;                                                                                              // 9010
			delete props[ index ];                                                                                              // 9011
		}                                                                                                                    // 9012
                                                                                                                       // 9013
		hooks = jQuery.cssHooks[ name ];                                                                                     // 9014
		if ( hooks && "expand" in hooks ) {                                                                                  // 9015
			value = hooks.expand( value );                                                                                      // 9016
			delete props[ name ];                                                                                               // 9017
                                                                                                                       // 9018
			// not quite $.extend, this wont overwrite keys already present.                                                    // 9019
			// also - reusing 'index' from above because we have the correct "name"                                             // 9020
			for ( index in value ) {                                                                                            // 9021
				if ( !( index in props ) ) {                                                                                       // 9022
					props[ index ] = value[ index ];                                                                                  // 9023
					specialEasing[ index ] = easing;                                                                                  // 9024
				}                                                                                                                  // 9025
			}                                                                                                                   // 9026
		} else {                                                                                                             // 9027
			specialEasing[ name ] = easing;                                                                                     // 9028
		}                                                                                                                    // 9029
	}                                                                                                                     // 9030
}                                                                                                                      // 9031
                                                                                                                       // 9032
jQuery.Animation = jQuery.extend( Animation, {                                                                         // 9033
                                                                                                                       // 9034
	tweener: function( props, callback ) {                                                                                // 9035
		if ( jQuery.isFunction( props ) ) {                                                                                  // 9036
			callback = props;                                                                                                   // 9037
			props = [ "*" ];                                                                                                    // 9038
		} else {                                                                                                             // 9039
			props = props.split(" ");                                                                                           // 9040
		}                                                                                                                    // 9041
                                                                                                                       // 9042
		var prop,                                                                                                            // 9043
			index = 0,                                                                                                          // 9044
			length = props.length;                                                                                              // 9045
                                                                                                                       // 9046
		for ( ; index < length ; index++ ) {                                                                                 // 9047
			prop = props[ index ];                                                                                              // 9048
			tweeners[ prop ] = tweeners[ prop ] || [];                                                                          // 9049
			tweeners[ prop ].unshift( callback );                                                                               // 9050
		}                                                                                                                    // 9051
	},                                                                                                                    // 9052
                                                                                                                       // 9053
	prefilter: function( callback, prepend ) {                                                                            // 9054
		if ( prepend ) {                                                                                                     // 9055
			animationPrefilters.unshift( callback );                                                                            // 9056
		} else {                                                                                                             // 9057
			animationPrefilters.push( callback );                                                                               // 9058
		}                                                                                                                    // 9059
	}                                                                                                                     // 9060
});                                                                                                                    // 9061
                                                                                                                       // 9062
function defaultPrefilter( elem, props, opts ) {                                                                       // 9063
	/* jshint validthis: true */                                                                                          // 9064
	var prop, value, toggle, tween, hooks, oldfire,                                                                       // 9065
		anim = this,                                                                                                         // 9066
		orig = {},                                                                                                           // 9067
		style = elem.style,                                                                                                  // 9068
		hidden = elem.nodeType && isHidden( elem ),                                                                          // 9069
		dataShow = jQuery._data( elem, "fxshow" );                                                                           // 9070
                                                                                                                       // 9071
	// handle queue: false promises                                                                                       // 9072
	if ( !opts.queue ) {                                                                                                  // 9073
		hooks = jQuery._queueHooks( elem, "fx" );                                                                            // 9074
		if ( hooks.unqueued == null ) {                                                                                      // 9075
			hooks.unqueued = 0;                                                                                                 // 9076
			oldfire = hooks.empty.fire;                                                                                         // 9077
			hooks.empty.fire = function() {                                                                                     // 9078
				if ( !hooks.unqueued ) {                                                                                           // 9079
					oldfire();                                                                                                        // 9080
				}                                                                                                                  // 9081
			};                                                                                                                  // 9082
		}                                                                                                                    // 9083
		hooks.unqueued++;                                                                                                    // 9084
                                                                                                                       // 9085
		anim.always(function() {                                                                                             // 9086
			// doing this makes sure that the complete handler will be called                                                   // 9087
			// before this completes                                                                                            // 9088
			anim.always(function() {                                                                                            // 9089
				hooks.unqueued--;                                                                                                  // 9090
				if ( !jQuery.queue( elem, "fx" ).length ) {                                                                        // 9091
					hooks.empty.fire();                                                                                               // 9092
				}                                                                                                                  // 9093
			});                                                                                                                 // 9094
		});                                                                                                                  // 9095
	}                                                                                                                     // 9096
                                                                                                                       // 9097
	// height/width overflow pass                                                                                         // 9098
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {                                             // 9099
		// Make sure that nothing sneaks out                                                                                 // 9100
		// Record all 3 overflow attributes because IE does not                                                              // 9101
		// change the overflow attribute when overflowX and                                                                  // 9102
		// overflowY are set to the same value                                                                               // 9103
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];                                                // 9104
                                                                                                                       // 9105
		// Set display property to inline-block for height/width                                                             // 9106
		// animations on inline elements that are having width/height animated                                               // 9107
		if ( jQuery.css( elem, "display" ) === "inline" &&                                                                   // 9108
				jQuery.css( elem, "float" ) === "none" ) {                                                                         // 9109
                                                                                                                       // 9110
			// inline-level elements accept inline-block;                                                                       // 9111
			// block-level elements need to be inline with layout                                                               // 9112
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {                 // 9113
				style.display = "inline-block";                                                                                    // 9114
                                                                                                                       // 9115
			} else {                                                                                                            // 9116
				style.zoom = 1;                                                                                                    // 9117
			}                                                                                                                   // 9118
		}                                                                                                                    // 9119
	}                                                                                                                     // 9120
                                                                                                                       // 9121
	if ( opts.overflow ) {                                                                                                // 9122
		style.overflow = "hidden";                                                                                           // 9123
		if ( !jQuery.support.shrinkWrapBlocks ) {                                                                            // 9124
			anim.always(function() {                                                                                            // 9125
				style.overflow = opts.overflow[ 0 ];                                                                               // 9126
				style.overflowX = opts.overflow[ 1 ];                                                                              // 9127
				style.overflowY = opts.overflow[ 2 ];                                                                              // 9128
			});                                                                                                                 // 9129
		}                                                                                                                    // 9130
	}                                                                                                                     // 9131
                                                                                                                       // 9132
                                                                                                                       // 9133
	// show/hide pass                                                                                                     // 9134
	for ( prop in props ) {                                                                                               // 9135
		value = props[ prop ];                                                                                               // 9136
		if ( rfxtypes.exec( value ) ) {                                                                                      // 9137
			delete props[ prop ];                                                                                               // 9138
			toggle = toggle || value === "toggle";                                                                              // 9139
			if ( value === ( hidden ? "hide" : "show" ) ) {                                                                     // 9140
				continue;                                                                                                          // 9141
			}                                                                                                                   // 9142
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );                                          // 9143
		}                                                                                                                    // 9144
	}                                                                                                                     // 9145
                                                                                                                       // 9146
	if ( !jQuery.isEmptyObject( orig ) ) {                                                                                // 9147
		if ( dataShow ) {                                                                                                    // 9148
			if ( "hidden" in dataShow ) {                                                                                       // 9149
				hidden = dataShow.hidden;                                                                                          // 9150
			}                                                                                                                   // 9151
		} else {                                                                                                             // 9152
			dataShow = jQuery._data( elem, "fxshow", {} );                                                                      // 9153
		}                                                                                                                    // 9154
                                                                                                                       // 9155
		// store state if its toggle - enables .stop().toggle() to "reverse"                                                 // 9156
		if ( toggle ) {                                                                                                      // 9157
			dataShow.hidden = !hidden;                                                                                          // 9158
		}                                                                                                                    // 9159
		if ( hidden ) {                                                                                                      // 9160
			jQuery( elem ).show();                                                                                              // 9161
		} else {                                                                                                             // 9162
			anim.done(function() {                                                                                              // 9163
				jQuery( elem ).hide();                                                                                             // 9164
			});                                                                                                                 // 9165
		}                                                                                                                    // 9166
		anim.done(function() {                                                                                               // 9167
			var prop;                                                                                                           // 9168
			jQuery._removeData( elem, "fxshow" );                                                                               // 9169
			for ( prop in orig ) {                                                                                              // 9170
				jQuery.style( elem, prop, orig[ prop ] );                                                                          // 9171
			}                                                                                                                   // 9172
		});                                                                                                                  // 9173
		for ( prop in orig ) {                                                                                               // 9174
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );                                                   // 9175
                                                                                                                       // 9176
			if ( !( prop in dataShow ) ) {                                                                                      // 9177
				dataShow[ prop ] = tween.start;                                                                                    // 9178
				if ( hidden ) {                                                                                                    // 9179
					tween.end = tween.start;                                                                                          // 9180
					tween.start = prop === "width" || prop === "height" ? 1 : 0;                                                      // 9181
				}                                                                                                                  // 9182
			}                                                                                                                   // 9183
		}                                                                                                                    // 9184
	}                                                                                                                     // 9185
}                                                                                                                      // 9186
                                                                                                                       // 9187
function Tween( elem, options, prop, end, easing ) {                                                                   // 9188
	return new Tween.prototype.init( elem, options, prop, end, easing );                                                  // 9189
}                                                                                                                      // 9190
jQuery.Tween = Tween;                                                                                                  // 9191
                                                                                                                       // 9192
Tween.prototype = {                                                                                                    // 9193
	constructor: Tween,                                                                                                   // 9194
	init: function( elem, options, prop, end, easing, unit ) {                                                            // 9195
		this.elem = elem;                                                                                                    // 9196
		this.prop = prop;                                                                                                    // 9197
		this.easing = easing || "swing";                                                                                     // 9198
		this.options = options;                                                                                              // 9199
		this.start = this.now = this.cur();                                                                                  // 9200
		this.end = end;                                                                                                      // 9201
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );                                                        // 9202
	},                                                                                                                    // 9203
	cur: function() {                                                                                                     // 9204
		var hooks = Tween.propHooks[ this.prop ];                                                                            // 9205
                                                                                                                       // 9206
		return hooks && hooks.get ?                                                                                          // 9207
			hooks.get( this ) :                                                                                                 // 9208
			Tween.propHooks._default.get( this );                                                                               // 9209
	},                                                                                                                    // 9210
	run: function( percent ) {                                                                                            // 9211
		var eased,                                                                                                           // 9212
			hooks = Tween.propHooks[ this.prop ];                                                                               // 9213
                                                                                                                       // 9214
		if ( this.options.duration ) {                                                                                       // 9215
			this.pos = eased = jQuery.easing[ this.easing ](                                                                    // 9216
				percent, this.options.duration * percent, 0, 1, this.options.duration                                              // 9217
			);                                                                                                                  // 9218
		} else {                                                                                                             // 9219
			this.pos = eased = percent;                                                                                         // 9220
		}                                                                                                                    // 9221
		this.now = ( this.end - this.start ) * eased + this.start;                                                           // 9222
                                                                                                                       // 9223
		if ( this.options.step ) {                                                                                           // 9224
			this.options.step.call( this.elem, this.now, this );                                                                // 9225
		}                                                                                                                    // 9226
                                                                                                                       // 9227
		if ( hooks && hooks.set ) {                                                                                          // 9228
			hooks.set( this );                                                                                                  // 9229
		} else {                                                                                                             // 9230
			Tween.propHooks._default.set( this );                                                                               // 9231
		}                                                                                                                    // 9232
		return this;                                                                                                         // 9233
	}                                                                                                                     // 9234
};                                                                                                                     // 9235
                                                                                                                       // 9236
Tween.prototype.init.prototype = Tween.prototype;                                                                      // 9237
                                                                                                                       // 9238
Tween.propHooks = {                                                                                                    // 9239
	_default: {                                                                                                           // 9240
		get: function( tween ) {                                                                                             // 9241
			var result;                                                                                                         // 9242
                                                                                                                       // 9243
			if ( tween.elem[ tween.prop ] != null &&                                                                            // 9244
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {                                                  // 9245
				return tween.elem[ tween.prop ];                                                                                   // 9246
			}                                                                                                                   // 9247
                                                                                                                       // 9248
			// passing an empty string as a 3rd parameter to .css will automatically                                            // 9249
			// attempt a parseFloat and fallback to a string if the parse fails                                                 // 9250
			// so, simple values such as "10px" are parsed to Float.                                                            // 9251
			// complex values such as "rotate(1rad)" are returned as is.                                                        // 9252
			result = jQuery.css( tween.elem, tween.prop, "" );                                                                  // 9253
			// Empty strings, null, undefined and "auto" are converted to 0.                                                    // 9254
			return !result || result === "auto" ? 0 : result;                                                                   // 9255
		},                                                                                                                   // 9256
		set: function( tween ) {                                                                                             // 9257
			// use step hook for back compat - use cssHook if its there - use .style if its                                     // 9258
			// available and use plain properties where available                                                               // 9259
			if ( jQuery.fx.step[ tween.prop ] ) {                                                                               // 9260
				jQuery.fx.step[ tween.prop ]( tween );                                                                             // 9261
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );                                                    // 9263
			} else {                                                                                                            // 9264
				tween.elem[ tween.prop ] = tween.now;                                                                              // 9265
			}                                                                                                                   // 9266
		}                                                                                                                    // 9267
	}                                                                                                                     // 9268
};                                                                                                                     // 9269
                                                                                                                       // 9270
// Support: IE <=9                                                                                                     // 9271
// Panic based approach to setting things on disconnected nodes                                                        // 9272
                                                                                                                       // 9273
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {                                                             // 9274
	set: function( tween ) {                                                                                              // 9275
		if ( tween.elem.nodeType && tween.elem.parentNode ) {                                                                // 9276
			tween.elem[ tween.prop ] = tween.now;                                                                               // 9277
		}                                                                                                                    // 9278
	}                                                                                                                     // 9279
};                                                                                                                     // 9280
                                                                                                                       // 9281
jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {                                                        // 9282
	var cssFn = jQuery.fn[ name ];                                                                                        // 9283
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                             // 9284
		return speed == null || typeof speed === "boolean" ?                                                                 // 9285
			cssFn.apply( this, arguments ) :                                                                                    // 9286
			this.animate( genFx( name, true ), speed, easing, callback );                                                       // 9287
	};                                                                                                                    // 9288
});                                                                                                                    // 9289
                                                                                                                       // 9290
jQuery.fn.extend({                                                                                                     // 9291
	fadeTo: function( speed, to, easing, callback ) {                                                                     // 9292
                                                                                                                       // 9293
		// show any hidden elements after setting opacity to 0                                                               // 9294
		return this.filter( isHidden ).css( "opacity", 0 ).show()                                                            // 9295
                                                                                                                       // 9296
			// animate to the value specified                                                                                   // 9297
			.end().animate({ opacity: to }, speed, easing, callback );                                                          // 9298
	},                                                                                                                    // 9299
	animate: function( prop, speed, easing, callback ) {                                                                  // 9300
		var empty = jQuery.isEmptyObject( prop ),                                                                            // 9301
			optall = jQuery.speed( speed, easing, callback ),                                                                   // 9302
			doAnimation = function() {                                                                                          // 9303
				// Operate on a copy of prop so per-property easing won't be lost                                                  // 9304
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );                                                   // 9305
                                                                                                                       // 9306
				// Empty animations, or finishing resolves immediately                                                             // 9307
				if ( empty || jQuery._data( this, "finish" ) ) {                                                                   // 9308
					anim.stop( true );                                                                                                // 9309
				}                                                                                                                  // 9310
			};                                                                                                                  // 9311
			doAnimation.finish = doAnimation;                                                                                   // 9312
                                                                                                                       // 9313
		return empty || optall.queue === false ?                                                                             // 9314
			this.each( doAnimation ) :                                                                                          // 9315
			this.queue( optall.queue, doAnimation );                                                                            // 9316
	},                                                                                                                    // 9317
	stop: function( type, clearQueue, gotoEnd ) {                                                                         // 9318
		var stopQueue = function( hooks ) {                                                                                  // 9319
			var stop = hooks.stop;                                                                                              // 9320
			delete hooks.stop;                                                                                                  // 9321
			stop( gotoEnd );                                                                                                    // 9322
		};                                                                                                                   // 9323
                                                                                                                       // 9324
		if ( typeof type !== "string" ) {                                                                                    // 9325
			gotoEnd = clearQueue;                                                                                               // 9326
			clearQueue = type;                                                                                                  // 9327
			type = undefined;                                                                                                   // 9328
		}                                                                                                                    // 9329
		if ( clearQueue && type !== false ) {                                                                                // 9330
			this.queue( type || "fx", [] );                                                                                     // 9331
		}                                                                                                                    // 9332
                                                                                                                       // 9333
		return this.each(function() {                                                                                        // 9334
			var dequeue = true,                                                                                                 // 9335
				index = type != null && type + "queueHooks",                                                                       // 9336
				timers = jQuery.timers,                                                                                            // 9337
				data = jQuery._data( this );                                                                                       // 9338
                                                                                                                       // 9339
			if ( index ) {                                                                                                      // 9340
				if ( data[ index ] && data[ index ].stop ) {                                                                       // 9341
					stopQueue( data[ index ] );                                                                                       // 9342
				}                                                                                                                  // 9343
			} else {                                                                                                            // 9344
				for ( index in data ) {                                                                                            // 9345
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {                                                // 9346
						stopQueue( data[ index ] );                                                                                      // 9347
					}                                                                                                                 // 9348
				}                                                                                                                  // 9349
			}                                                                                                                   // 9350
                                                                                                                       // 9351
			for ( index = timers.length; index--; ) {                                                                           // 9352
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {                         // 9353
					timers[ index ].anim.stop( gotoEnd );                                                                             // 9354
					dequeue = false;                                                                                                  // 9355
					timers.splice( index, 1 );                                                                                        // 9356
				}                                                                                                                  // 9357
			}                                                                                                                   // 9358
                                                                                                                       // 9359
			// start the next in the queue if the last step wasn't forced                                                       // 9360
			// timers currently will call their complete callbacks, which will dequeue                                          // 9361
			// but only if they were gotoEnd                                                                                    // 9362
			if ( dequeue || !gotoEnd ) {                                                                                        // 9363
				jQuery.dequeue( this, type );                                                                                      // 9364
			}                                                                                                                   // 9365
		});                                                                                                                  // 9366
	},                                                                                                                    // 9367
	finish: function( type ) {                                                                                            // 9368
		if ( type !== false ) {                                                                                              // 9369
			type = type || "fx";                                                                                                // 9370
		}                                                                                                                    // 9371
		return this.each(function() {                                                                                        // 9372
			var index,                                                                                                          // 9373
				data = jQuery._data( this ),                                                                                       // 9374
				queue = data[ type + "queue" ],                                                                                    // 9375
				hooks = data[ type + "queueHooks" ],                                                                               // 9376
				timers = jQuery.timers,                                                                                            // 9377
				length = queue ? queue.length : 0;                                                                                 // 9378
                                                                                                                       // 9379
			// enable finishing flag on private data                                                                            // 9380
			data.finish = true;                                                                                                 // 9381
                                                                                                                       // 9382
			// empty the queue first                                                                                            // 9383
			jQuery.queue( this, type, [] );                                                                                     // 9384
                                                                                                                       // 9385
			if ( hooks && hooks.stop ) {                                                                                        // 9386
				hooks.stop.call( this, true );                                                                                     // 9387
			}                                                                                                                   // 9388
                                                                                                                       // 9389
			// look for any active animations, and finish them                                                                  // 9390
			for ( index = timers.length; index--; ) {                                                                           // 9391
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {                                           // 9392
					timers[ index ].anim.stop( true );                                                                                // 9393
					timers.splice( index, 1 );                                                                                        // 9394
				}                                                                                                                  // 9395
			}                                                                                                                   // 9396
                                                                                                                       // 9397
			// look for any animations in the old queue and finish them                                                         // 9398
			for ( index = 0; index < length; index++ ) {                                                                        // 9399
				if ( queue[ index ] && queue[ index ].finish ) {                                                                   // 9400
					queue[ index ].finish.call( this );                                                                               // 9401
				}                                                                                                                  // 9402
			}                                                                                                                   // 9403
                                                                                                                       // 9404
			// turn off finishing flag                                                                                          // 9405
			delete data.finish;                                                                                                 // 9406
		});                                                                                                                  // 9407
	}                                                                                                                     // 9408
});                                                                                                                    // 9409
                                                                                                                       // 9410
// Generate parameters to create a standard animation                                                                  // 9411
function genFx( type, includeWidth ) {                                                                                 // 9412
	var which,                                                                                                            // 9413
		attrs = { height: type },                                                                                            // 9414
		i = 0;                                                                                                               // 9415
                                                                                                                       // 9416
	// if we include width, step value is 1 to do all cssExpand values,                                                   // 9417
	// if we don't include width, step value is 2 to skip over Left and Right                                             // 9418
	includeWidth = includeWidth? 1 : 0;                                                                                   // 9419
	for( ; i < 4 ; i += 2 - includeWidth ) {                                                                              // 9420
		which = cssExpand[ i ];                                                                                              // 9421
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;                                                       // 9422
	}                                                                                                                     // 9423
                                                                                                                       // 9424
	if ( includeWidth ) {                                                                                                 // 9425
		attrs.opacity = attrs.width = type;                                                                                  // 9426
	}                                                                                                                     // 9427
                                                                                                                       // 9428
	return attrs;                                                                                                         // 9429
}                                                                                                                      // 9430
                                                                                                                       // 9431
// Generate shortcuts for custom animations                                                                            // 9432
jQuery.each({                                                                                                          // 9433
	slideDown: genFx("show"),                                                                                             // 9434
	slideUp: genFx("hide"),                                                                                               // 9435
	slideToggle: genFx("toggle"),                                                                                         // 9436
	fadeIn: { opacity: "show" },                                                                                          // 9437
	fadeOut: { opacity: "hide" },                                                                                         // 9438
	fadeToggle: { opacity: "toggle" }                                                                                     // 9439
}, function( name, props ) {                                                                                           // 9440
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                             // 9441
		return this.animate( props, speed, easing, callback );                                                               // 9442
	};                                                                                                                    // 9443
});                                                                                                                    // 9444
                                                                                                                       // 9445
jQuery.speed = function( speed, easing, fn ) {                                                                         // 9446
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {                                         // 9447
		complete: fn || !fn && easing ||                                                                                     // 9448
			jQuery.isFunction( speed ) && speed,                                                                                // 9449
		duration: speed,                                                                                                     // 9450
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing                                             // 9451
	};                                                                                                                    // 9452
                                                                                                                       // 9453
	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :                                  // 9454
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;                     // 9455
                                                                                                                       // 9456
	// normalize opt.queue - true/undefined/null -> "fx"                                                                  // 9457
	if ( opt.queue == null || opt.queue === true ) {                                                                      // 9458
		opt.queue = "fx";                                                                                                    // 9459
	}                                                                                                                     // 9460
                                                                                                                       // 9461
	// Queueing                                                                                                           // 9462
	opt.old = opt.complete;                                                                                               // 9463
                                                                                                                       // 9464
	opt.complete = function() {                                                                                           // 9465
		if ( jQuery.isFunction( opt.old ) ) {                                                                                // 9466
			opt.old.call( this );                                                                                               // 9467
		}                                                                                                                    // 9468
                                                                                                                       // 9469
		if ( opt.queue ) {                                                                                                   // 9470
			jQuery.dequeue( this, opt.queue );                                                                                  // 9471
		}                                                                                                                    // 9472
	};                                                                                                                    // 9473
                                                                                                                       // 9474
	return opt;                                                                                                           // 9475
};                                                                                                                     // 9476
                                                                                                                       // 9477
jQuery.easing = {                                                                                                      // 9478
	linear: function( p ) {                                                                                               // 9479
		return p;                                                                                                            // 9480
	},                                                                                                                    // 9481
	swing: function( p ) {                                                                                                // 9482
		return 0.5 - Math.cos( p*Math.PI ) / 2;                                                                              // 9483
	}                                                                                                                     // 9484
};                                                                                                                     // 9485
                                                                                                                       // 9486
jQuery.timers = [];                                                                                                    // 9487
jQuery.fx = Tween.prototype.init;                                                                                      // 9488
jQuery.fx.tick = function() {                                                                                          // 9489
	var timer,                                                                                                            // 9490
		timers = jQuery.timers,                                                                                              // 9491
		i = 0;                                                                                                               // 9492
                                                                                                                       // 9493
	fxNow = jQuery.now();                                                                                                 // 9494
                                                                                                                       // 9495
	for ( ; i < timers.length; i++ ) {                                                                                    // 9496
		timer = timers[ i ];                                                                                                 // 9497
		// Checks the timer has not already been removed                                                                     // 9498
		if ( !timer() && timers[ i ] === timer ) {                                                                           // 9499
			timers.splice( i--, 1 );                                                                                            // 9500
		}                                                                                                                    // 9501
	}                                                                                                                     // 9502
                                                                                                                       // 9503
	if ( !timers.length ) {                                                                                               // 9504
		jQuery.fx.stop();                                                                                                    // 9505
	}                                                                                                                     // 9506
	fxNow = undefined;                                                                                                    // 9507
};                                                                                                                     // 9508
                                                                                                                       // 9509
jQuery.fx.timer = function( timer ) {                                                                                  // 9510
	if ( timer() && jQuery.timers.push( timer ) ) {                                                                       // 9511
		jQuery.fx.start();                                                                                                   // 9512
	}                                                                                                                     // 9513
};                                                                                                                     // 9514
                                                                                                                       // 9515
jQuery.fx.interval = 13;                                                                                               // 9516
                                                                                                                       // 9517
jQuery.fx.start = function() {                                                                                         // 9518
	if ( !timerId ) {                                                                                                     // 9519
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );                                                         // 9520
	}                                                                                                                     // 9521
};                                                                                                                     // 9522
                                                                                                                       // 9523
jQuery.fx.stop = function() {                                                                                          // 9524
	clearInterval( timerId );                                                                                             // 9525
	timerId = null;                                                                                                       // 9526
};                                                                                                                     // 9527
                                                                                                                       // 9528
jQuery.fx.speeds = {                                                                                                   // 9529
	slow: 600,                                                                                                            // 9530
	fast: 200,                                                                                                            // 9531
	// Default speed                                                                                                      // 9532
	_default: 400                                                                                                         // 9533
};                                                                                                                     // 9534
                                                                                                                       // 9535
// Back Compat <1.8 extension point                                                                                    // 9536
jQuery.fx.step = {};                                                                                                   // 9537
                                                                                                                       // 9538
if ( jQuery.expr && jQuery.expr.filters ) {                                                                            // 9539
	jQuery.expr.filters.animated = function( elem ) {                                                                     // 9540
		return jQuery.grep(jQuery.timers, function( fn ) {                                                                   // 9541
			return elem === fn.elem;                                                                                            // 9542
		}).length;                                                                                                           // 9543
	};                                                                                                                    // 9544
}                                                                                                                      // 9545
jQuery.fn.offset = function( options ) {                                                                               // 9546
	if ( arguments.length ) {                                                                                             // 9547
		return options === undefined ?                                                                                       // 9548
			this :                                                                                                              // 9549
			this.each(function( i ) {                                                                                           // 9550
				jQuery.offset.setOffset( this, options, i );                                                                       // 9551
			});                                                                                                                 // 9552
	}                                                                                                                     // 9553
                                                                                                                       // 9554
	var docElem, win,                                                                                                     // 9555
		box = { top: 0, left: 0 },                                                                                           // 9556
		elem = this[ 0 ],                                                                                                    // 9557
		doc = elem && elem.ownerDocument;                                                                                    // 9558
                                                                                                                       // 9559
	if ( !doc ) {                                                                                                         // 9560
		return;                                                                                                              // 9561
	}                                                                                                                     // 9562
                                                                                                                       // 9563
	docElem = doc.documentElement;                                                                                        // 9564
                                                                                                                       // 9565
	// Make sure it's not a disconnected DOM node                                                                         // 9566
	if ( !jQuery.contains( docElem, elem ) ) {                                                                            // 9567
		return box;                                                                                                          // 9568
	}                                                                                                                     // 9569
                                                                                                                       // 9570
	// If we don't have gBCR, just use 0,0 rather than error                                                              // 9571
	// BlackBerry 5, iOS 3 (original iPhone)                                                                              // 9572
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {                                                      // 9573
		box = elem.getBoundingClientRect();                                                                                  // 9574
	}                                                                                                                     // 9575
	win = getWindow( doc );                                                                                               // 9576
	return {                                                                                                              // 9577
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),                             // 9578
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )                             // 9579
	};                                                                                                                    // 9580
};                                                                                                                     // 9581
                                                                                                                       // 9582
jQuery.offset = {                                                                                                      // 9583
                                                                                                                       // 9584
	setOffset: function( elem, options, i ) {                                                                             // 9585
		var position = jQuery.css( elem, "position" );                                                                       // 9586
                                                                                                                       // 9587
		// set position first, in-case top/left are set even on static elem                                                  // 9588
		if ( position === "static" ) {                                                                                       // 9589
			elem.style.position = "relative";                                                                                   // 9590
		}                                                                                                                    // 9591
                                                                                                                       // 9592
		var curElem = jQuery( elem ),                                                                                        // 9593
			curOffset = curElem.offset(),                                                                                       // 9594
			curCSSTop = jQuery.css( elem, "top" ),                                                                              // 9595
			curCSSLeft = jQuery.css( elem, "left" ),                                                                            // 9596
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;                                                                      // 9598
                                                                                                                       // 9599
		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed      // 9600
		if ( calculatePosition ) {                                                                                           // 9601
			curPosition = curElem.position();                                                                                   // 9602
			curTop = curPosition.top;                                                                                           // 9603
			curLeft = curPosition.left;                                                                                         // 9604
		} else {                                                                                                             // 9605
			curTop = parseFloat( curCSSTop ) || 0;                                                                              // 9606
			curLeft = parseFloat( curCSSLeft ) || 0;                                                                            // 9607
		}                                                                                                                    // 9608
                                                                                                                       // 9609
		if ( jQuery.isFunction( options ) ) {                                                                                // 9610
			options = options.call( elem, i, curOffset );                                                                       // 9611
		}                                                                                                                    // 9612
                                                                                                                       // 9613
		if ( options.top != null ) {                                                                                         // 9614
			props.top = ( options.top - curOffset.top ) + curTop;                                                               // 9615
		}                                                                                                                    // 9616
		if ( options.left != null ) {                                                                                        // 9617
			props.left = ( options.left - curOffset.left ) + curLeft;                                                           // 9618
		}                                                                                                                    // 9619
                                                                                                                       // 9620
		if ( "using" in options ) {                                                                                          // 9621
			options.using.call( elem, props );                                                                                  // 9622
		} else {                                                                                                             // 9623
			curElem.css( props );                                                                                               // 9624
		}                                                                                                                    // 9625
	}                                                                                                                     // 9626
};                                                                                                                     // 9627
                                                                                                                       // 9628
                                                                                                                       // 9629
jQuery.fn.extend({                                                                                                     // 9630
                                                                                                                       // 9631
	position: function() {                                                                                                // 9632
		if ( !this[ 0 ] ) {                                                                                                  // 9633
			return;                                                                                                             // 9634
		}                                                                                                                    // 9635
                                                                                                                       // 9636
		var offsetParent, offset,                                                                                            // 9637
			parentOffset = { top: 0, left: 0 },                                                                                 // 9638
			elem = this[ 0 ];                                                                                                   // 9639
                                                                                                                       // 9640
		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent     // 9641
		if ( jQuery.css( elem, "position" ) === "fixed" ) {                                                                  // 9642
			// we assume that getBoundingClientRect is available when computed position is fixed                                // 9643
			offset = elem.getBoundingClientRect();                                                                              // 9644
		} else {                                                                                                             // 9645
			// Get *real* offsetParent                                                                                          // 9646
			offsetParent = this.offsetParent();                                                                                 // 9647
                                                                                                                       // 9648
			// Get correct offsets                                                                                              // 9649
			offset = this.offset();                                                                                             // 9650
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {                                                              // 9651
				parentOffset = offsetParent.offset();                                                                              // 9652
			}                                                                                                                   // 9653
                                                                                                                       // 9654
			// Add offsetParent borders                                                                                         // 9655
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );                                       // 9656
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );                                      // 9657
		}                                                                                                                    // 9658
                                                                                                                       // 9659
		// Subtract parent offsets and element margins                                                                       // 9660
		// note: when an element has margin: auto the offsetLeft and marginLeft                                              // 9661
		// are the same in Safari causing offset.left to incorrectly be 0                                                    // 9662
		return {                                                                                                             // 9663
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),                                       // 9664
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)                                       // 9665
		};                                                                                                                   // 9666
	},                                                                                                                    // 9667
                                                                                                                       // 9668
	offsetParent: function() {                                                                                            // 9669
		return this.map(function() {                                                                                         // 9670
			var offsetParent = this.offsetParent || docElem;                                                                    // 9671
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;                                                                          // 9673
			}                                                                                                                   // 9674
			return offsetParent || docElem;                                                                                     // 9675
		});                                                                                                                  // 9676
	}                                                                                                                     // 9677
});                                                                                                                    // 9678
                                                                                                                       // 9679
                                                                                                                       // 9680
// Create scrollLeft and scrollTop methods                                                                             // 9681
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {                         // 9682
	var top = /Y/.test( prop );                                                                                           // 9683
                                                                                                                       // 9684
	jQuery.fn[ method ] = function( val ) {                                                                               // 9685
		return jQuery.access( this, function( elem, method, val ) {                                                          // 9686
			var win = getWindow( elem );                                                                                        // 9687
                                                                                                                       // 9688
			if ( val === undefined ) {                                                                                          // 9689
				return win ? (prop in win) ? win[ prop ] :                                                                         // 9690
					win.document.documentElement[ method ] :                                                                          // 9691
					elem[ method ];                                                                                                   // 9692
			}                                                                                                                   // 9693
                                                                                                                       // 9694
			if ( win ) {                                                                                                        // 9695
				win.scrollTo(                                                                                                      // 9696
					!top ? val : jQuery( win ).scrollLeft(),                                                                          // 9697
					top ? val : jQuery( win ).scrollTop()                                                                             // 9698
				);                                                                                                                 // 9699
                                                                                                                       // 9700
			} else {                                                                                                            // 9701
				elem[ method ] = val;                                                                                              // 9702
			}                                                                                                                   // 9703
		}, method, val, arguments.length, null );                                                                            // 9704
	};                                                                                                                    // 9705
});                                                                                                                    // 9706
                                                                                                                       // 9707
function getWindow( elem ) {                                                                                           // 9708
	return jQuery.isWindow( elem ) ?                                                                                      // 9709
		elem :                                                                                                               // 9710
		elem.nodeType === 9 ?                                                                                                // 9711
			elem.defaultView || elem.parentWindow :                                                                             // 9712
			false;                                                                                                              // 9713
}                                                                                                                      // 9714
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods                                   // 9715
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {                                            // 9716
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {     // 9717
		// margin is only for outerHeight, outerWidth                                                                        // 9718
		jQuery.fn[ funcName ] = function( margin, value ) {                                                                  // 9719
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),                                // 9720
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );                               // 9721
                                                                                                                       // 9722
			return jQuery.access( this, function( elem, type, value ) {                                                         // 9723
				var doc;                                                                                                           // 9724
                                                                                                                       // 9725
				if ( jQuery.isWindow( elem ) ) {                                                                                   // 9726
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there                                  // 9727
					// isn't a whole lot we can do. See pull request at this URL for discussion:                                      // 9728
					// https://github.com/jquery/jquery/pull/764                                                                      // 9729
					return elem.document.documentElement[ "client" + name ];                                                          // 9730
				}                                                                                                                  // 9731
                                                                                                                       // 9732
				// Get document width or height                                                                                    // 9733
				if ( elem.nodeType === 9 ) {                                                                                       // 9734
					doc = elem.documentElement;                                                                                       // 9735
                                                                                                                       // 9736
					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest             // 9737
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.       // 9738
					return Math.max(                                                                                                  // 9739
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],                                                            // 9740
						elem.body[ "offset" + name ], doc[ "offset" + name ],                                                            // 9741
						doc[ "client" + name ]                                                                                           // 9742
					);                                                                                                                // 9743
				}                                                                                                                  // 9744
                                                                                                                       // 9745
				return value === undefined ?                                                                                       // 9746
					// Get width or height on the element, requesting but not forcing parseFloat                                      // 9747
					jQuery.css( elem, type, extra ) :                                                                                 // 9748
                                                                                                                       // 9749
					// Set width or height on the element                                                                             // 9750
					jQuery.style( elem, type, value, extra );                                                                         // 9751
			}, type, chainable ? margin : undefined, chainable, null );                                                         // 9752
		};                                                                                                                   // 9753
	});                                                                                                                   // 9754
});                                                                                                                    // 9755
// Limit scope pollution from any deprecated API                                                                       // 9756
// (function() {                                                                                                       // 9757
                                                                                                                       // 9758
// The number of elements contained in the matched element set                                                         // 9759
jQuery.fn.size = function() {                                                                                          // 9760
	return this.length;                                                                                                   // 9761
};                                                                                                                     // 9762
                                                                                                                       // 9763
jQuery.fn.andSelf = jQuery.fn.addBack;                                                                                 // 9764
                                                                                                                       // 9765
// })();                                                                                                               // 9766
if ( typeof module === "object" && module && typeof module.exports === "object" ) {                                    // 9767
	// Expose jQuery as module.exports in loaders that implement the Node                                                 // 9768
	// module pattern (including browserify). Do not create the global, since                                             // 9769
	// the user will be storing it themselves locally, and globals are frowned                                            // 9770
	// upon in the Node module world.                                                                                     // 9771
	module.exports = jQuery;                                                                                              // 9772
} else {                                                                                                               // 9773
	// Otherwise expose jQuery to the global object as usual                                                              // 9774
	window.jQuery = window.$ = jQuery;                                                                                    // 9775
                                                                                                                       // 9776
	// Register as a named AMD module, since jQuery can be concatenated with other                                        // 9777
	// files that may use define, but not via a proper concatenation script that                                          // 9778
	// understands anonymous AMD modules. A named AMD is safest and most robust                                           // 9779
	// way to register. Lowercase jquery is used because AMD module names are                                             // 9780
	// derived from file names, and jQuery is normally delivered in a lowercase                                           // 9781
	// file name. Do this after creating the global so that if an AMD module wants                                        // 9782
	// to call noConflict to hide this version of jQuery, it will work.                                                   // 9783
	if ( typeof define === "function" && define.amd ) {                                                                   // 9784
		define( "jquery", [], function () { return jQuery; } );                                                              // 9785
	}                                                                                                                     // 9786
}                                                                                                                      // 9787
                                                                                                                       // 9788
})( window );                                                                                                          // 9789
                                                                                                                       // 9790
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jquery/post.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Put jQuery and $ in our exported package-scope variables and remove window.$.                                       // 1
// (Sadly, we don't call noConflict(true), which would also remove                                                     // 2
// window.jQuery, because bootstrap very specifically relies on window.jQuery.)                                        // 3
$ = jQuery = window.jQuery.noConflict();                                                                               // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.jquery = {
  $: $,
  jQuery: jQuery
};

})();

//# sourceMappingURL=5978a910eadb45ea575f412686b11169f992024b.map
